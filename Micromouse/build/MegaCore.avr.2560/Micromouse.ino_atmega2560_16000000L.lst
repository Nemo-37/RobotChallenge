
C:\Users\artem\AppData\Local\Temp\arduino\sketches\AF5FD9C5461018D6FA195FE838A1A9C4/Micromouse.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__ctors_end>
       4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
       8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
       c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      10:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      14:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      18:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      1c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      20:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      24:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      28:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      2c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      30:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      34:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_13>
      38:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      3c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      40:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      44:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      48:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      4c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      50:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      54:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      58:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      5c:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_23>
      60:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      64:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__vector_25>
      68:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__vector_26>
      6c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      70:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      74:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      78:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      7c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      80:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      84:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      88:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      8c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      90:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      94:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      98:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      9c:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_39>
      a0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      a4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      a8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      ac:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      b0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      b4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      b8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      bc:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      c0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      c4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      c8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      cc:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      d0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      d4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      d8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      dc:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>
      e0:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__bad_interrupt>

000000e4 <__trampolines_start>:
__trampolines_start():
      e4:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <turnOffPWM+0x64>
      e8:	0c 94 79 1a 	jmp	0x34f2	; 0x34f2 <turnOffPWM+0x78>
      ec:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <turnOffPWM+0x9c>
      f0:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <analogWrite+0x17c>
      f4:	0c 94 a6 19 	jmp	0x334c	; 0x334c <analogWrite+0x80>
      f8:	0c 94 9e 19 	jmp	0x333c	; 0x333c <analogWrite+0x70>
      fc:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <analogWrite+0xfa>
     100:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <analogWrite+0xd6>
     104:	0c 94 67 06 	jmp	0xcce	; 0xcce <TwoWire::available()>
     108:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <Print::availableForWrite()>
     10c:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>
     110:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <_GLOBAL__sub_I___vector_25>
     114:	0c 94 06 1a 	jmp	0x340c	; 0x340c <analogWrite+0x140>
     118:	0c 94 bf 19 	jmp	0x337e	; 0x337e <analogWrite+0xb2>
     11c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <TwoWire::onReceiveService(unsigned char*, int)>
     120:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <turnOffPWM+0xc8>
     124:	0c 94 11 12 	jmp	0x2422	; 0x2422 <HardwareSerial::peek()>
     128:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <turnOffPWM+0x48>
     12c:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <turnOffPWM+0x6c>
     130:	0c 94 1f 12 	jmp	0x243e	; 0x243e <HardwareSerial::read()>
     134:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <turnOffPWM+0x80>
     138:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <_GLOBAL__sub_I_sensor>
     13c:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <turnOffPWM+0xc0>
     140:	0c 94 b5 19 	jmp	0x336a	; 0x336a <analogWrite+0x9e>
     144:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <analogWrite+0xe6>
     148:	0c 94 95 1a 	jmp	0x352a	; 0x352a <turnOffPWM+0xb0>
     14c:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <TwoWire::read()>
     150:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <HardwareSerial::write(unsigned char)>
     154:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <TwoWire::onRequestService()>
     158:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <turnOffPWM+0x88>
     15c:	0c 94 81 06 	jmp	0xd02	; 0xd02 <TwoWire::peek()>
     160:	0c 94 42 12 	jmp	0x2484	; 0x2484 <serialEventRun()>
     164:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <analogWrite+0x168>
     168:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <turnOffPWM+0xc6>
     16c:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <turnOffPWM+0x58>
     170:	0c 94 f6 06 	jmp	0xdec	; 0xdec <TwoWire::write(unsigned char const*, unsigned int)>
     174:	0c 94 87 1a 	jmp	0x350e	; 0x350e <turnOffPWM+0x94>
     178:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <analogWrite+0x1a4>
     17c:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <turnOffPWM+0xa4>
     180:	0c 94 ed 19 	jmp	0x33da	; 0x33da <analogWrite+0x10e>
     184:	0c 94 33 12 	jmp	0x2466	; 0x2466 <HardwareSerial::availableForWrite()>
     188:	0c 94 05 12 	jmp	0x240a	; 0x240a <HardwareSerial::available()>
     18c:	0c 94 99 12 	jmp	0x2532	; 0x2532 <HardwareSerial::flush()>
     190:	0c 94 be 13 	jmp	0x277c	; 0x277c <Serial0_available()>
     194:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <analogWrite+0x8a>
     198:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <Print::write(unsigned char const*, unsigned int)>
     19c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <TwoWire::flush()>
     1a0:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <analogWrite+0xc6>
     1a4:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <turnOffPWM+0xb8>
     1a8:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <analogWrite+0x154>
     1ac:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <turnOffPWM+0x50>
     1b0:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <analogWrite+0x190>
     1b4:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <turnOffPWM+0x3c>
     1b8:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <analogWrite+0x122>
     1bc:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <TwoWire::write(unsigned char)>

000001c0 <__trampolines_end>:
__trampolines_end():
     1c0:	02 00       	Address 0x000001c0 is out of bounds.
.word	0xffff	; ????

000001c1 <digital_pin_to_timer_PGM>:
     1c1:	00 00 0b 0c 03 0a 0d 0e 0f 09 08 04 05 02 00 00     ................
	...
     1ed:	13 12 11 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000217 <digital_pin_to_bit_mask_PGM>:
     217:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     227:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     237:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     247:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     257:	04 08 10 20 40 80 04 40 80 04 80 08 10 10 20 40     ... @..@...... @
     267:	04 08 10 20 40 80                                   ... @.

0000026d <digital_pin_to_port_PGM>:
     26d:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     27d:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     28d:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     29d:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     2ad:	0b 0b 0b 0b 0b 0b 05 05 05 08 08 07 07 04 04 04     ................
     2bd:	0a 0a 0a 0a 0a 0a                                   ......

000002c3 <port_to_input_PGM>:
     2c3:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     2d3:	00 01 00 00 03 01 06 01 09 01                       ..........

000002dd <port_to_output_PGM>:
     2dd:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     2ed:	02 01 00 00 05 01 08 01 0b 01                       ..........

000002f7 <port_to_mode_PGM>:
     2f7:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     307:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000312 <__ctors_start>:
__ctors_start():
     312:	76 04       	cpc	r7, r6
     314:	bb 07       	cpc	r27, r27
     316:	c8 13       	cpse	r28, r24

00000318 <__ctors_end>:
__dtors_end():
     318:	11 24       	eor	r1, r1
     31a:	1f be       	out	0x3f, r1	; 63
     31c:	cf ef       	ldi	r28, 0xFF	; 255
     31e:	d1 e2       	ldi	r29, 0x21	; 33
     320:	de bf       	out	0x3e, r29	; 62
     322:	cd bf       	out	0x3d, r28	; 61
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	0c bf       	out	0x3c, r16	; 60

00000328 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     328:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     32a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     32c:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     32e:	e6 e7       	ldi	r30, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     330:	fa e3       	ldi	r31, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     332:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     334:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     336:	02 c0       	rjmp	.+4      	; 0x33c <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     338:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     33a:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     33c:	ae 35       	cpi	r26, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     33e:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     340:	d9 f7       	brne	.-10     	; 0x338 <__do_copy_data+0x10>

00000342 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     342:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     344:	ae e5       	ldi	r26, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     346:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     348:	01 c0       	rjmp	.+2      	; 0x34c <.do_clear_bss_start>

0000034a <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     34a:	1d 92       	st	X+, r1

0000034c <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     34c:	a0 36       	cpi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     34e:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     350:	e1 f7       	brne	.-8      	; 0x34a <.do_clear_bss_loop>

00000352 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     352:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     354:	cc e8       	ldi	r28, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     356:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2470
     358:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     35a:	06 c0       	rjmp	.+12     	; 0x368 <__do_global_ctors+0x16>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     35c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2476
     35e:	01 09       	sbc	r16, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2477
     360:	80 2f       	mov	r24, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     362:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     364:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     368:	c9 38       	cpi	r28, 0x89	; 137
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     36a:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2486
     36c:	80 e0       	ldi	r24, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2487
     36e:	08 07       	cpc	r16, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     370:	a9 f7       	brne	.-22     	; 0x35c <__do_global_ctors+0xa>
     372:	0e 94 52 18 	call	0x30a4	; 0x30a4 <main>
     376:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <_exit>

0000037a <__bad_interrupt>:
__vector_38():
     37a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000037e <setup>:
setup():
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:23
GMotor motor1(DRIVER2WIRE, 2, 3, HIGH);
GMotor motor2(DRIVER2WIRE, 4, 5, HIGH);


void setup() {
  pinMode(13, OUTPUT);
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	8d e0       	ldi	r24, 0x0D	; 13
     382:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:24
  pinMode(31, OUTPUT);
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	8f e1       	ldi	r24, 0x1F	; 31
     38a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:25
  pinMode(30, INPUT);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	8e e1       	ldi	r24, 0x1E	; 30
     392:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:26
  pinMode(9, OUTPUT);
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:27
  pinMode(10, OUTPUT);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	8a e0       	ldi	r24, 0x0A	; 10
     3a2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:28
  pinMode(7, OUTPUT);
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:29
  pinMode(6, OUTPUT);
     3ae:	61 e0       	ldi	r22, 0x01	; 1
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:30
  pinMode(8, OUTPUT);
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:31
  digitalWrite(9, LOW);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	89 e0       	ldi	r24, 0x09	; 9
     3c2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:32
  digitalWrite(10, LOW);
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	8a e0       	ldi	r24, 0x0A	; 10
     3ca:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:33
  digitalWrite(7, LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	87 e0       	ldi	r24, 0x07	; 7
     3d2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:34
  digitalWrite(6, LOW);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:35
  digitalWrite(8, LOW);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	88 e0       	ldi	r24, 0x08	; 8
     3e2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:37

  delay(500);
     3e6:	64 ef       	ldi	r22, 0xF4	; 244
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:38
  Wire.begin();
     3f2:	8a ee       	ldi	r24, 0xEA	; 234
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 23 07 	call	0xe46	; 0xe46 <TwoWire::begin()>
_ZN14HardwareSerial5beginEm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     3fa:	26 e0       	ldi	r18, 0x06	; 6
     3fc:	40 e8       	ldi	r20, 0x80	; 128
     3fe:	55 e2       	ldi	r21, 0x25	; 37
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 e9       	ldi	r24, 0x90	; 144
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	0e 94 06 13 	call	0x260c	; 0x260c <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:43


  Serial.begin(9600);

  digitalWrite(9, HIGH);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	89 e0       	ldi	r24, 0x09	; 9
     410:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:44
  delay(150);
     414:	66 e9       	ldi	r22, 0x96	; 150
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:45
  Serial.println("00");
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	72 e0       	ldi	r23, 0x02	; 2
     424:	80 e9       	ldi	r24, 0x90	; 144
     426:	93 e0       	ldi	r25, 0x03	; 3
     428:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:46
  sensor.init(true);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	8c ed       	ldi	r24, 0xDC	; 220
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <VL53L0X::init(bool)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:48

  Serial.println("01");
     436:	64 e0       	ldi	r22, 0x04	; 4
     438:	72 e0       	ldi	r23, 0x02	; 2
     43a:	80 e9       	ldi	r24, 0x90	; 144
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:49
  delay(100);
     442:	64 e6       	ldi	r22, 0x64	; 100
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:50
  sensor.setAddress((uint8_t)01);
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8c ed       	ldi	r24, 0xDC	; 220
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0e 94 1d 0a 	call	0x143a	; 0x143a <VL53L0X::setAddress(unsigned char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:51
  Serial.println("02");
     458:	67 e0       	ldi	r22, 0x07	; 7
     45a:	72 e0       	ldi	r23, 0x02	; 2
     45c:	80 e9       	ldi	r24, 0x90	; 144
     45e:	93 e0       	ldi	r25, 0x03	; 3
     460:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:53

  digitalWrite(10, HIGH);
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:54
  delay(150);
     46c:	66 e9       	ldi	r22, 0x96	; 150
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:55
  sensor2.init(true);
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	8e ec       	ldi	r24, 0xCE	; 206
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <VL53L0X::init(bool)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:56
  Serial.println("03");
     482:	6a e0       	ldi	r22, 0x0A	; 10
     484:	72 e0       	ldi	r23, 0x02	; 2
     486:	80 e9       	ldi	r24, 0x90	; 144
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:57
  delay(100);
     48e:	64 e6       	ldi	r22, 0x64	; 100
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:58
  sensor2.setAddress((uint8_t)02);
     49a:	62 e0       	ldi	r22, 0x02	; 2
     49c:	8e ec       	ldi	r24, 0xCE	; 206
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	0e 94 1d 0a 	call	0x143a	; 0x143a <VL53L0X::setAddress(unsigned char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:59
  Serial.println("04");
     4a4:	6d e0       	ldi	r22, 0x0D	; 13
     4a6:	72 e0       	ldi	r23, 0x02	; 2
     4a8:	80 e9       	ldi	r24, 0x90	; 144
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:61

  digitalWrite(7, HIGH);
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:62
  delay(150);
     4b8:	66 e9       	ldi	r22, 0x96	; 150
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:63
  sensor3.init(true);
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	80 ec       	ldi	r24, 0xC0	; 192
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <VL53L0X::init(bool)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:64
  Serial.println("05");
     4ce:	60 e1       	ldi	r22, 0x10	; 16
     4d0:	72 e0       	ldi	r23, 0x02	; 2
     4d2:	80 e9       	ldi	r24, 0x90	; 144
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:65
  delay(100);
     4da:	64 e6       	ldi	r22, 0x64	; 100
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:66
  sensor3.setAddress((uint8_t)03);
     4e6:	63 e0       	ldi	r22, 0x03	; 3
     4e8:	80 ec       	ldi	r24, 0xC0	; 192
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 1d 0a 	call	0x143a	; 0x143a <VL53L0X::setAddress(unsigned char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:67
  Serial.println("06");
     4f0:	63 e1       	ldi	r22, 0x13	; 19
     4f2:	72 e0       	ldi	r23, 0x02	; 2
     4f4:	80 e9       	ldi	r24, 0x90	; 144
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:69

  digitalWrite(6, HIGH);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	86 e0       	ldi	r24, 0x06	; 6
     500:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:70
  delay(150);
     504:	66 e9       	ldi	r22, 0x96	; 150
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:71
  Serial.println("07");
     510:	66 e1       	ldi	r22, 0x16	; 22
     512:	72 e0       	ldi	r23, 0x02	; 2
     514:	80 e9       	ldi	r24, 0x90	; 144
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:72
  sensor4.init(true);
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	82 eb       	ldi	r24, 0xB2	; 178
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <VL53L0X::init(bool)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:74

  Serial.println("08");
     526:	69 e1       	ldi	r22, 0x19	; 25
     528:	72 e0       	ldi	r23, 0x02	; 2
     52a:	80 e9       	ldi	r24, 0x90	; 144
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:75
  delay(100);
     532:	64 e6       	ldi	r22, 0x64	; 100
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:76
  sensor4.setAddress((uint8_t)04);
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	82 eb       	ldi	r24, 0xB2	; 178
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 1d 0a 	call	0x143a	; 0x143a <VL53L0X::setAddress(unsigned char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:77
  Serial.println("09");
     548:	6c e1       	ldi	r22, 0x1C	; 28
     54a:	72 e0       	ldi	r23, 0x02	; 2
     54c:	80 e9       	ldi	r24, 0x90	; 144
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:79

  digitalWrite(8, HIGH);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	88 e0       	ldi	r24, 0x08	; 8
     558:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:80
  delay(150);
     55c:	66 e9       	ldi	r22, 0x96	; 150
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:81
  Serial.println("10");
     568:	6f e1       	ldi	r22, 0x1F	; 31
     56a:	72 e0       	ldi	r23, 0x02	; 2
     56c:	80 e9       	ldi	r24, 0x90	; 144
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:82
  sensor5.init(true);
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	84 ea       	ldi	r24, 0xA4	; 164
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <VL53L0X::init(bool)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:84

  Serial.println("11");
     57e:	62 e2       	ldi	r22, 0x22	; 34
     580:	72 e0       	ldi	r23, 0x02	; 2
     582:	80 e9       	ldi	r24, 0x90	; 144
     584:	93 e0       	ldi	r25, 0x03	; 3
     586:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:85
  delay(100);
     58a:	64 e6       	ldi	r22, 0x64	; 100
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:86
  sensor5.setAddress((uint8_t)05);
     596:	65 e0       	ldi	r22, 0x05	; 5
     598:	84 ea       	ldi	r24, 0xA4	; 164
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 1d 0a 	call	0x143a	; 0x143a <VL53L0X::setAddress(unsigned char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:87
  Serial.println("12");
     5a0:	65 e2       	ldi	r22, 0x25	; 37
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	80 e9       	ldi	r24, 0x90	; 144
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:90


  Serial.println("addresses set");
     5ac:	68 e2       	ldi	r22, 0x28	; 40
     5ae:	72 e0       	ldi	r23, 0x02	; 2
     5b0:	80 e9       	ldi	r24, 0x90	; 144
     5b2:	93 e0       	ldi	r25, 0x03	; 3
     5b4:	0e 94 35 14 	call	0x286a	; 0x286a <Print::println(char const*)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:92

  sensor.startContinuous();
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	ba 01       	movw	r22, r20
     5be:	8c ed       	ldi	r24, 0xDC	; 220
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 ae 0b 	call	0x175c	; 0x175c <VL53L0X::startContinuous(unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:93
  sensor2.startContinuous();
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	ba 01       	movw	r22, r20
     5cc:	8e ec       	ldi	r24, 0xCE	; 206
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 ae 0b 	call	0x175c	; 0x175c <VL53L0X::startContinuous(unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:94
  sensor3.startContinuous();
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	ba 01       	movw	r22, r20
     5da:	80 ec       	ldi	r24, 0xC0	; 192
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 ae 0b 	call	0x175c	; 0x175c <VL53L0X::startContinuous(unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:95
  sensor4.startContinuous();
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	ba 01       	movw	r22, r20
     5e8:	82 eb       	ldi	r24, 0xB2	; 178
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 ae 0b 	call	0x175c	; 0x175c <VL53L0X::startContinuous(unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:96
  sensor5.startContinuous();
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	ba 01       	movw	r22, r20
     5f6:	84 ea       	ldi	r24, 0xA4	; 164
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	0e 94 ae 0b 	call	0x175c	; 0x175c <VL53L0X::startContinuous(unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:98

  motor1.setMode(BRAKE);
     5fe:	63 e0       	ldi	r22, 0x03	; 3
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	8e e7       	ldi	r24, 0x7E	; 126
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:99
  motor2.setMode(BRAKE);
     60a:	63 e0       	ldi	r22, 0x03	; 3
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	8e e5       	ldi	r24, 0x5E	; 94
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:100
  s = 120;
     616:	88 e7       	ldi	r24, 0x78	; 120
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <s+0x1>
     61e:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <s>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:101
}
     622:	08 95       	ret

00000624 <loop>:
loop():
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:103

void loop() {
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:104
  if (digitalRead(30) == HIGH) {
     62c:	8e e1       	ldi	r24, 0x1E	; 30
     62e:	0e 94 0e 1b 	call	0x361c	; 0x361c <digitalRead>
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	09 f0       	breq	.+2      	; 0x638 <loop+0x14>
     636:	55 c1       	rjmp	.+682    	; 0x8e2 <loop+0x2be>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:105
    delay(1000);
     638:	68 ee       	ldi	r22, 0xE8	; 232
     63a:	73 e0       	ldi	r23, 0x03	; 3
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:116
      //e = sensor5.readRangeContinuousMillimeters();

      if (d < 90) {
        motor1.setMode(AUTO);
        motor2.setMode(AUTO);
        motor1.setSpeed(-70 - s);
     644:	ca eb       	ldi	r28, 0xBA	; 186
     646:	df ef       	ldi	r29, 0xFF	; 255
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:122
        motor2.setSpeed(110 + s);
      }
      if (d > 90) {
        motor1.setMode(AUTO);
        motor2.setMode(AUTO);
        motor1.setSpeed(-130 - s);
     648:	0e e7       	ldi	r16, 0x7E	; 126
     64a:	1f ef       	ldi	r17, 0xFF	; 255
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:109
  if (digitalRead(30) == HIGH) {
    delay(1000);
    while (true) {
      //a = sensor.readRangeContinuousMillimeters();
      //b = sensor2.readRangeContinuousMillimeters();
      c = sensor3.readRangeContinuousMillimeters();
     64c:	80 ec       	ldi	r24, 0xC0	; 192
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <VL53L0X::readRangeContinuousMillimeters()>
     654:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <c+0x1>
     658:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <c>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:110
      d = sensor4.readRangeContinuousMillimeters();
     65c:	82 eb       	ldi	r24, 0xB2	; 178
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <VL53L0X::readRangeContinuousMillimeters()>
     664:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <d+0x1>
     668:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <d>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:113
      //e = sensor5.readRangeContinuousMillimeters();

      if (d < 90) {
     66c:	8a 35       	cpi	r24, 0x5A	; 90
     66e:	91 05       	cpc	r25, r1
     670:	0c f5       	brge	.+66     	; 0x6b4 <loop+0x90>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:114
        motor1.setMode(AUTO);
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	8e e7       	ldi	r24, 0x7E	; 126
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:115
        motor2.setMode(AUTO);
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	8e e5       	ldi	r24, 0x5E	; 94
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:116
        motor1.setSpeed(-70 - s);
     68a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <s>
     68e:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <s+0x1>
     692:	be 01       	movw	r22, r28
     694:	68 1b       	sub	r22, r24
     696:	79 0b       	sbc	r23, r25
     698:	8e e7       	ldi	r24, 0x7E	; 126
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:117
        motor2.setSpeed(110 + s);
     6a0:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <s>
     6a4:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <s+0x1>
     6a8:	62 59       	subi	r22, 0x92	; 146
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	8e e5       	ldi	r24, 0x5E	; 94
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:119
      }
      if (d > 90) {
     6b4:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <d>
     6b8:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <d+0x1>
     6bc:	8b 35       	cpi	r24, 0x5B	; 91
     6be:	91 05       	cpc	r25, r1
     6c0:	0c f1       	brlt	.+66     	; 0x704 <loop+0xe0>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:120
        motor1.setMode(AUTO);
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	8e e7       	ldi	r24, 0x7E	; 126
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:121
        motor2.setMode(AUTO);
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	8e e5       	ldi	r24, 0x5E	; 94
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:122
        motor1.setSpeed(-130 - s);
     6da:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <s>
     6de:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <s+0x1>
     6e2:	b8 01       	movw	r22, r16
     6e4:	68 1b       	sub	r22, r24
     6e6:	79 0b       	sbc	r23, r25
     6e8:	8e e7       	ldi	r24, 0x7E	; 126
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:123
        motor2.setSpeed(40 + s);
     6f0:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <s>
     6f4:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <s+0x1>
     6f8:	68 5d       	subi	r22, 0xD8	; 216
     6fa:	7f 4f       	sbci	r23, 0xFF	; 255
     6fc:	8e e5       	ldi	r24, 0x5E	; 94
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:125
      }
      if (c < 140) {
     704:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <c>
     708:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <c+0x1>
     70c:	8c 38       	cpi	r24, 0x8C	; 140
     70e:	91 05       	cpc	r25, r1
     710:	0c f0       	brlt	.+2      	; 0x714 <loop+0xf0>
     712:	6f c0       	rjmp	.+222    	; 0x7f2 <loop+0x1ce>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:126
        tone(31, 2000, 200);
     714:	28 ec       	ldi	r18, 0xC8	; 200
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 ed       	ldi	r22, 0xD0	; 208
     71e:	77 e0       	ldi	r23, 0x07	; 7
     720:	8f e1       	ldi	r24, 0x1F	; 31
     722:	0e 94 4c 14 	call	0x2898	; 0x2898 <tone(unsigned char, unsigned int, unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:129
        //motor1.setMode(BRAKE);
        //motor2.setMode(BRAKE);
        motor1.setMode(AUTO);
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	8e e7       	ldi	r24, 0x7E	; 126
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:130
        motor2.setMode(AUTO);
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	8e e5       	ldi	r24, 0x5E	; 94
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:131
        motor1.setSpeed(200);
     73e:	68 ec       	ldi	r22, 0xC8	; 200
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	8e e7       	ldi	r24, 0x7E	; 126
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:132
        motor2.setSpeed(-200);
     74a:	68 e3       	ldi	r22, 0x38	; 56
     74c:	7f ef       	ldi	r23, 0xFF	; 255
     74e:	8e e5       	ldi	r24, 0x5E	; 94
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:133
        delay(100);
     756:	64 e6       	ldi	r22, 0x64	; 100
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:134
        motor1.setMode(AUTO);
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	8e e7       	ldi	r24, 0x7E	; 126
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:135
        motor2.setMode(AUTO);
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	8e e5       	ldi	r24, 0x5E	; 94
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:136
        motor1.setSpeed(200);
     77a:	68 ec       	ldi	r22, 0xC8	; 200
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	8e e7       	ldi	r24, 0x7E	; 126
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:137
        motor2.setSpeed(200);
     786:	68 ec       	ldi	r22, 0xC8	; 200
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	8e e5       	ldi	r24, 0x5E	; 94
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:138
        delay(100);
     792:	64 e6       	ldi	r22, 0x64	; 100
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:139
        motor1.setMode(BRAKE);
     79e:	63 e0       	ldi	r22, 0x03	; 3
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	8e e7       	ldi	r24, 0x7E	; 126
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:140
        motor2.setMode(BRAKE);
     7aa:	63 e0       	ldi	r22, 0x03	; 3
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	8e e5       	ldi	r24, 0x5E	; 94
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:141
        motor1.setMode(AUTO);
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	8e e7       	ldi	r24, 0x7E	; 126
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:142
        motor2.setMode(AUTO);
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	8e e5       	ldi	r24, 0x5E	; 94
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:143
        motor1.setSpeed(-120);
     7ce:	68 e8       	ldi	r22, 0x88	; 136
     7d0:	7f ef       	ldi	r23, 0xFF	; 255
     7d2:	8e e7       	ldi	r24, 0x7E	; 126
     7d4:	92 e0       	ldi	r25, 0x02	; 2
     7d6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:144
        motor2.setSpeed(120);
     7da:	68 e7       	ldi	r22, 0x78	; 120
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	8e e5       	ldi	r24, 0x5E	; 94
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:145
        delay(100);
     7e6:	64 e6       	ldi	r22, 0x64	; 100
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:147
      }
      if (d > 250) {
     7f2:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <d>
     7f6:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <d+0x1>
     7fa:	8b 3f       	cpi	r24, 0xFB	; 251
     7fc:	91 05       	cpc	r25, r1
     7fe:	0c f4       	brge	.+2      	; 0x802 <loop+0x1de>
     800:	25 cf       	rjmp	.-438    	; 0x64c <loop+0x28>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:148
        motor1.setMode(BRAKE);
     802:	63 e0       	ldi	r22, 0x03	; 3
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	8e e7       	ldi	r24, 0x7E	; 126
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:149
        motor2.setMode(BRAKE);
     80e:	63 e0       	ldi	r22, 0x03	; 3
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	8e e5       	ldi	r24, 0x5E	; 94
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:150
        delay(200);
     81a:	68 ec       	ldi	r22, 0xC8	; 200
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:151
        motor1.setSpeed(-120);
     826:	68 e8       	ldi	r22, 0x88	; 136
     828:	7f ef       	ldi	r23, 0xFF	; 255
     82a:	8e e7       	ldi	r24, 0x7E	; 126
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:152
        motor2.setSpeed(120);
     832:	68 e7       	ldi	r22, 0x78	; 120
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	8e e5       	ldi	r24, 0x5E	; 94
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:153
        delay(100);
     83e:	64 e6       	ldi	r22, 0x64	; 100
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:154
        tone(31, 2000, 200);
     84a:	28 ec       	ldi	r18, 0xC8	; 200
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 ed       	ldi	r22, 0xD0	; 208
     854:	77 e0       	ldi	r23, 0x07	; 7
     856:	8f e1       	ldi	r24, 0x1F	; 31
     858:	0e 94 4c 14 	call	0x2898	; 0x2898 <tone(unsigned char, unsigned int, unsigned long)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:155
        motor1.setMode(BRAKE);
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	8e e7       	ldi	r24, 0x7E	; 126
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:156
        motor2.setMode(BRAKE);
     868:	63 e0       	ldi	r22, 0x03	; 3
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	8e e5       	ldi	r24, 0x5E	; 94
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:157
        delay(200);
     874:	68 ec       	ldi	r22, 0xC8	; 200
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:158
        motor1.setMode(AUTO);
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	8e e7       	ldi	r24, 0x7E	; 126
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:159
        motor2.setMode(AUTO);
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8e e5       	ldi	r24, 0x5E	; 94
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:160
        motor1.setSpeed(-200);
     898:	68 e3       	ldi	r22, 0x38	; 56
     89a:	7f ef       	ldi	r23, 0xFF	; 255
     89c:	8e e7       	ldi	r24, 0x7E	; 126
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:161
        motor2.setSpeed(-200);
     8a4:	68 e3       	ldi	r22, 0x38	; 56
     8a6:	7f ef       	ldi	r23, 0xFF	; 255
     8a8:	8e e5       	ldi	r24, 0x5E	; 94
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:162
        delay(140);
     8b0:	6c e8       	ldi	r22, 0x8C	; 140
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:163
        motor1.setSpeed(-120);
     8bc:	68 e8       	ldi	r22, 0x88	; 136
     8be:	7f ef       	ldi	r23, 0xFF	; 255
     8c0:	8e e7       	ldi	r24, 0x7E	; 126
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:164
        motor2.setSpeed(120);
     8c8:	68 e7       	ldi	r22, 0x78	; 120
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	8e e5       	ldi	r24, 0x5E	; 94
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <GMotor::setSpeed(int)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:165
        delay(150);
     8d4:	66 e9       	ldi	r22, 0x96	; 150
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     8e0:	b5 ce       	rjmp	.-662    	; 0x64c <loop+0x28>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:169
      }
    }
  }
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <_GLOBAL__sub_I_sensor>:
_GLOBAL__sub_I_sensor():
     8ec:	ef 92       	push	r14
     8ee:	0f 93       	push	r16
__static_initialization_and_destruction_0():
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:5
#include <GyverMotor.h>
#include <Wire.h>
#include <VL53L0X.h>  // подключаем библиотеку для экрана

VL53L0X sensor;
     8f0:	8c ed       	ldi	r24, 0xDC	; 220
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X::VL53L0X()>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:6
VL53L0X sensor2;
     8f8:	8e ec       	ldi	r24, 0xCE	; 206
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X::VL53L0X()>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:7
VL53L0X sensor3;
     900:	80 ec       	ldi	r24, 0xC0	; 192
     902:	92 e0       	ldi	r25, 0x02	; 2
     904:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X::VL53L0X()>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:8
VL53L0X sensor4;
     908:	82 eb       	ldi	r24, 0xB2	; 178
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X::VL53L0X()>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:9
VL53L0X sensor5;
     910:	84 ea       	ldi	r24, 0xA4	; 164
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X::VL53L0X()>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:18
int c;
int d;
int e;
int s;

GMotor motor1(DRIVER2WIRE, 2, 3, HIGH);
     918:	ee 24       	eor	r14, r14
     91a:	ea 94       	dec	r14
     91c:	01 e0       	ldi	r16, 0x01	; 1
     91e:	23 e0       	ldi	r18, 0x03	; 3
     920:	42 e0       	ldi	r20, 0x02	; 2
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	8e e7       	ldi	r24, 0x7E	; 126
     928:	92 e0       	ldi	r25, 0x02	; 2
     92a:	0e 94 06 06 	call	0xc0c	; 0xc0c <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)>
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:19
GMotor motor2(DRIVER2WIRE, 4, 5, HIGH);
     92e:	25 e0       	ldi	r18, 0x05	; 5
     930:	44 e0       	ldi	r20, 0x04	; 4
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	8e e5       	ldi	r24, 0x5E	; 94
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 06 06 	call	0xc0c	; 0xc0c <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)>
_GLOBAL__sub_I_sensor():
C:\Users\artem\Desktop\Micromouse/Micromouse.ino:169
        motor2.setSpeed(120);
        delay(150);
      }
    }
  }
}
     93e:	0f 91       	pop	r16
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <GMotor::setPins(bool, bool, int)>:
_ZN6GMotor7setPinsEbbi():
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:95
    return _state;
}

void GMotor::setResolution(byte bit) {
    _maxDuty = (1 << bit) - 1;	// -1 для смещения
    setMinDuty(_minDuty);		// пересчитаем k
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
     950:	f4 2e       	mov	r15, r20
     952:	89 01       	movw	r16, r18
     954:	88 85       	ldd	r24, Y+8	; 0x08
     956:	8f 3f       	cpi	r24, 0xFF	; 255
     958:	11 f0       	breq	.+4      	; 0x95e <GMotor::setPins(bool, bool, int)+0x1a>
     95a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	19 f0       	breq	.+6      	; 0x96a <GMotor::setPins(bool, bool, int)+0x26>
     964:	6f 2d       	mov	r22, r15
     966:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
     96a:	8a 85       	ldd	r24, Y+10	; 0x0a
     96c:	8f 3f       	cpi	r24, 0xFF	; 255
     96e:	41 f0       	breq	.+16     	; 0x980 <GMotor::setPins(bool, bool, int)+0x3c>
     970:	b8 01       	movw	r22, r16
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <analogWrite>
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	08 95       	ret

0000098c <GMotor::run(GM_workMode, int)>:
_ZN6GMotor3runE11GM_workModei():
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	8b 01       	movw	r16, r22
     99c:	7a 01       	movw	r14, r20
     99e:	8d 89       	ldd	r24, Y+21	; 0x15
     9a0:	9e 89       	ldd	r25, Y+22	; 0x16
     9a2:	89 2b       	or	r24, r25
     9a4:	b1 f0       	breq	.+44     	; 0x9d2 <GMotor::run(GM_workMode, int)+0x46>
     9a6:	89 89       	ldd	r24, Y+17	; 0x11
     9a8:	9a 89       	ldd	r25, Y+18	; 0x12
     9aa:	86 17       	cp	r24, r22
     9ac:	97 07       	cpc	r25, r23
     9ae:	89 f0       	breq	.+34     	; 0x9d2 <GMotor::run(GM_workMode, int)+0x46>
     9b0:	7a 8b       	std	Y+18, r23	; 0x12
     9b2:	69 8b       	std	Y+17, r22	; 0x11
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	8c 85       	ldd	r24, Y+12	; 0x0c
     9b8:	81 11       	cpse	r24, r1
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <GMotor::run(GM_workMode, int)+0x32>
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	46 2f       	mov	r20, r22
     9c4:	ce 01       	movw	r24, r28
     9c6:	0e 94 a2 04 	call	0x944	; 0x944 <GMotor::setPins(bool, bool, int)>
     9ca:	8d 89       	ldd	r24, Y+21	; 0x15
     9cc:	9e 89       	ldd	r25, Y+22	; 0x16
     9ce:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
     9d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d4:	88 23       	and	r24, r24
     9d6:	31 f0       	breq	.+12     	; 0x9e4 <GMotor::run(GM_workMode, int)+0x58>
     9d8:	01 15       	cp	r16, r1
     9da:	11 05       	cpc	r17, r1
     9dc:	31 f1       	breq	.+76     	; 0xa2a <GMotor::run(GM_workMode, int)+0x9e>
     9de:	01 30       	cpi	r16, 0x01	; 1
     9e0:	11 05       	cpc	r17, r1
     9e2:	91 f0       	breq	.+36     	; 0xa08 <GMotor::run(GM_workMode, int)+0x7c>
     9e4:	01 30       	cpi	r16, 0x01	; 1
     9e6:	11 05       	cpc	r17, r1
     9e8:	01 f1       	breq	.+64     	; 0xa2a <GMotor::run(GM_workMode, int)+0x9e>
     9ea:	70 f0       	brcs	.+28     	; 0xa08 <GMotor::run(GM_workMode, int)+0x7c>
     9ec:	02 30       	cpi	r16, 0x02	; 2
     9ee:	11 05       	cpc	r17, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <GMotor::run(GM_workMode, int)+0x68>
     9f2:	45 c0       	rjmp	.+138    	; 0xa7e <GMotor::run(GM_workMode, int)+0xf2>
     9f4:	03 30       	cpi	r16, 0x03	; 3
     9f6:	11 05       	cpc	r17, r1
     9f8:	89 f1       	breq	.+98     	; 0xa5c <GMotor::run(GM_workMode, int)+0xd0>
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	08 95       	ret
     a08:	8c 85       	ldd	r24, Y+12	; 0x0c
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	81 11       	cpse	r24, r1
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	81 11       	cpse	r24, r1
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <GMotor::run(GM_workMode, int)+0x8c>
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	97 01       	movw	r18, r14
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 a2 04 	call	0x944	; 0x944 <GMotor::setPins(bool, bool, int)>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	9f 83       	std	Y+7, r25	; 0x07
     a26:	8e 83       	std	Y+6, r24	; 0x06
     a28:	e8 cf       	rjmp	.-48     	; 0x9fa <GMotor::run(GM_workMode, int)+0x6e>
     a2a:	8b 89       	ldd	r24, Y+19	; 0x13
     a2c:	9c 89       	ldd	r25, Y+20	; 0x14
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	31 f4       	brne	.+12     	; 0xa3e <GMotor::run(GM_workMode, int)+0xb2>
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	9c 01       	movw	r18, r24
     a38:	2e 19       	sub	r18, r14
     a3a:	3f 09       	sbc	r19, r15
     a3c:	79 01       	movw	r14, r18
     a3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	81 11       	cpse	r24, r1
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <GMotor::run(GM_workMode, int)+0xbc>
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	81 11       	cpse	r24, r1
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	97 01       	movw	r18, r14
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 a2 04 	call	0x944	; 0x944 <GMotor::setPins(bool, bool, int)>
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	9f ef       	ldi	r25, 0xFF	; 255
     a5a:	e4 cf       	rjmp	.-56     	; 0xa24 <GMotor::run(GM_workMode, int)+0x98>
     a5c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	81 11       	cpse	r24, r1
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <GMotor::run(GM_workMode, int)+0xde>
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	81 11       	cpse	r24, r1
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	46 2f       	mov	r20, r22
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 a2 04 	call	0x944	; 0x944 <GMotor::setPins(bool, bool, int)>
     a78:	1f 82       	std	Y+7, r1	; 0x07
     a7a:	1e 82       	std	Y+6, r1	; 0x06
     a7c:	be cf       	rjmp	.-132    	; 0x9fa <GMotor::run(GM_workMode, int)+0x6e>
     a7e:	2c 85       	ldd	r18, Y+12	; 0x0c
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	21 11       	cpse	r18, r1
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <GMotor::run(GM_workMode, int)+0xfc>
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	4f ef       	ldi	r20, 0xFF	; 255
     a8a:	24 03       	mulsu	r18, r20
     a8c:	90 01       	movw	r18, r0
     a8e:	11 24       	eor	r1, r1
     a90:	46 2f       	mov	r20, r22
     a92:	ce 01       	movw	r24, r28
     a94:	0e 94 a2 04 	call	0x944	; 0x944 <GMotor::setPins(bool, bool, int)>
     a98:	1b 82       	std	Y+3, r1	; 0x03
     a9a:	1a 82       	std	Y+2, r1	; 0x02
     a9c:	19 82       	std	Y+1, r1	; 0x01
     a9e:	18 82       	st	Y, r1
     aa0:	eb cf       	rjmp	.-42     	; 0xa78 <GMotor::run(GM_workMode, int)+0xec>

00000aa2 <GMotor::setSpeed(int)>:
_ZN6GMotor8setSpeedEi():
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
     ab8:	0f 85       	ldd	r16, Y+15	; 0x0f
     aba:	18 89       	ldd	r17, Y+16	; 0x10
     abc:	02 30       	cpi	r16, 0x02	; 2
     abe:	11 05       	cpc	r17, r1
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <GMotor::setSpeed(int)+0x22>
     ac2:	8c c0       	rjmp	.+280    	; 0xbdc <GMotor::setSpeed(int)+0x13a>
     ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ac8:	22 27       	eor	r18, r18
     aca:	33 27       	eor	r19, r19
     acc:	28 1b       	sub	r18, r24
     ace:	39 0b       	sbc	r19, r25
_Z9constrainIiiiEDTqultfp_fp0_fp0_qugtfp_fp1_fp1_fp_ERKT_RKT0_RKT1_():
     ad0:	62 17       	cp	r22, r18
     ad2:	73 07       	cpc	r23, r19
     ad4:	2c f0       	brlt	.+10     	; 0xae0 <GMotor::setSpeed(int)+0x3e>
     ad6:	9c 01       	movw	r18, r24
     ad8:	68 17       	cp	r22, r24
     ada:	79 07       	cpc	r23, r25
     adc:	0c f4       	brge	.+2      	; 0xae0 <GMotor::setSpeed(int)+0x3e>
     ade:	9b 01       	movw	r18, r22
_ZN6GMotor8setSpeedEi():
     ae0:	39 83       	std	Y+1, r19	; 0x01
     ae2:	28 83       	st	Y, r18
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	91 05       	cpc	r25, r1
     ae8:	79 f0       	breq	.+30     	; 0xb08 <GMotor::setSpeed(int)+0x66>
     aea:	74 f0       	brlt	.+28     	; 0xb08 <GMotor::setSpeed(int)+0x66>
     aec:	c9 01       	movw	r24, r18
     aee:	37 ff       	sbrs	r19, 7
     af0:	04 c0       	rjmp	.+8      	; 0xafa <GMotor::setSpeed(int)+0x58>
     af2:	88 27       	eor	r24, r24
     af4:	99 27       	eor	r25, r25
     af6:	82 1b       	sub	r24, r18
     af8:	93 0b       	sbc	r25, r19
     afa:	8f 3f       	cpi	r24, 0xFF	; 255
     afc:	91 05       	cpc	r25, r1
     afe:	21 f4       	brne	.+8      	; 0xb08 <GMotor::setSpeed(int)+0x66>
     b00:	2f 5f       	subi	r18, 0xFF	; 255
     b02:	3f 4f       	sbci	r19, 0xFF	; 255
     b04:	39 83       	std	Y+1, r19	; 0x01
     b06:	28 83       	st	Y, r18
     b08:	61 15       	cp	r22, r1
     b0a:	71 05       	cpc	r23, r1
     b0c:	89 f4       	brne	.+34     	; 0xb30 <GMotor::setSpeed(int)+0x8e>
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	ce 01       	movw	r24, r28
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	bf 90       	pop	r11
     b26:	af 90       	pop	r10
     b28:	9f 90       	pop	r9
     b2a:	8f 90       	pop	r8
     b2c:	0c 94 c6 04 	jmp	0x98c	; 0x98c <GMotor::run(GM_workMode, int)>
     b30:	9b 01       	movw	r18, r22
     b32:	ec 80       	ldd	r14, Y+4	; 0x04
     b34:	fd 80       	ldd	r15, Y+5	; 0x05
     b36:	68 81       	ld	r22, Y
     b38:	79 81       	ldd	r23, Y+1	; 0x01
     b3a:	12 16       	cp	r1, r18
     b3c:	13 06       	cpc	r1, r19
     b3e:	2c f5       	brge	.+74     	; 0xb8a <GMotor::setSpeed(int)+0xe8>
     b40:	e1 14       	cp	r14, r1
     b42:	f1 04       	cpc	r15, r1
     b44:	f1 f0       	breq	.+60     	; 0xb82 <GMotor::setSpeed(int)+0xe0>
     b46:	07 2e       	mov	r0, r23
     b48:	00 0c       	add	r0, r0
     b4a:	88 0b       	sbc	r24, r24
     b4c:	99 0b       	sbc	r25, r25
     b4e:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__floatsisf>
     b52:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b54:	3d 8d       	ldd	r19, Y+29	; 0x1d
     b56:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b58:	5f 8d       	ldd	r21, Y+31	; 0x1f
     b5a:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <__mulsf3>
     b5e:	4b 01       	movw	r8, r22
     b60:	5c 01       	movw	r10, r24
     b62:	b7 01       	movw	r22, r14
     b64:	ff 0c       	add	r15, r15
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__floatsisf>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	c5 01       	movw	r24, r10
     b74:	b4 01       	movw	r22, r8
     b76:	0e 94 39 1b 	call	0x3672	; 0x3672 <__addsf3>
     b7a:	0e 94 a5 1b 	call	0x374a	; 0x374a <__fixsfsi>
     b7e:	79 83       	std	Y+1, r23	; 0x01
     b80:	68 83       	st	Y, r22
     b82:	48 81       	ld	r20, Y
     b84:	59 81       	ldd	r21, Y+1	; 0x01
     b86:	b8 01       	movw	r22, r16
     b88:	c6 cf       	rjmp	.-116    	; 0xb16 <GMotor::setSpeed(int)+0x74>
     b8a:	e1 14       	cp	r14, r1
     b8c:	f1 04       	cpc	r15, r1
     b8e:	f1 f0       	breq	.+60     	; 0xbcc <GMotor::setSpeed(int)+0x12a>
     b90:	07 2e       	mov	r0, r23
     b92:	00 0c       	add	r0, r0
     b94:	88 0b       	sbc	r24, r24
     b96:	99 0b       	sbc	r25, r25
     b98:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__floatsisf>
     b9c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     b9e:	3d 8d       	ldd	r19, Y+29	; 0x1d
     ba0:	4e 8d       	ldd	r20, Y+30	; 0x1e
     ba2:	5f 8d       	ldd	r21, Y+31	; 0x1f
     ba4:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <__mulsf3>
     ba8:	4b 01       	movw	r8, r22
     baa:	5c 01       	movw	r10, r24
     bac:	b7 01       	movw	r22, r14
     bae:	ff 0c       	add	r15, r15
     bb0:	88 0b       	sbc	r24, r24
     bb2:	99 0b       	sbc	r25, r25
     bb4:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__floatsisf>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 38 1b 	call	0x3670	; 0x3670 <__subsf3>
     bc4:	0e 94 a5 1b 	call	0x374a	; 0x374a <__fixsfsi>
     bc8:	79 83       	std	Y+1, r23	; 0x01
     bca:	68 83       	st	Y, r22
     bcc:	48 81       	ld	r20, Y
     bce:	59 81       	ldd	r21, Y+1	; 0x01
     bd0:	51 95       	neg	r21
     bd2:	41 95       	neg	r20
     bd4:	51 09       	sbc	r21, r1
     bd6:	61 e0       	ldi	r22, 0x01	; 1
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	9d cf       	rjmp	.-198    	; 0xb16 <GMotor::setSpeed(int)+0x74>
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	08 95       	ret

00000bf2 <GMotor::setMode(GM_workMode)>:
_ZN6GMotor7setModeE11GM_workMode():
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:104
    _minDuty = duty;
    _k = 1.0 - (float)_minDuty / _maxDuty;
}

void GMotor::setMode(GM_workMode mode) {
    if (_mode == mode) return;
     bf2:	fc 01       	movw	r30, r24
     bf4:	27 85       	ldd	r18, Z+15	; 0x0f
     bf6:	30 89       	ldd	r19, Z+16	; 0x10
     bf8:	26 17       	cp	r18, r22
     bfa:	37 07       	cpc	r19, r23
     bfc:	31 f0       	breq	.+12     	; 0xc0a <GMotor::setMode(GM_workMode)+0x18>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:105
    _mode = mode;
     bfe:	70 8b       	std	Z+16, r23	; 0x10
     c00:	67 87       	std	Z+15, r22	; 0x0f
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:106
    run(mode, _duty);
     c02:	40 81       	ld	r20, Z
     c04:	51 81       	ldd	r21, Z+1	; 0x01
     c06:	0c 94 c6 04 	jmp	0x98c	; 0x98c <GMotor::run(GM_workMode, int)>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:107
}
     c0a:	08 95       	ret

00000c0c <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)>:
_ZN6GMotorC2E13GM_driverTypeaaaa():
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:3
#include "GyverMotor.h"

GMotor::GMotor(GM_driverType type, int8_t param1, int8_t param2, int8_t param3, int8_t param4) {
     c0c:	ef 92       	push	r14
     c0e:	0f 93       	push	r16
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	19 82       	std	Y+1, r1	; 0x01
     c18:	18 82       	st	Y, r1
     c1a:	1b 82       	std	Y+3, r1	; 0x03
     c1c:	1a 82       	std	Y+2, r1	; 0x02
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	1c 82       	std	Y+4, r1	; 0x04
     c22:	1f 82       	std	Y+7, r1	; 0x07
     c24:	1e 82       	std	Y+6, r1	; 0x06
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	88 87       	std	Y+8, r24	; 0x08
     c2a:	89 87       	std	Y+9, r24	; 0x09
     c2c:	8a 87       	std	Y+10, r24	; 0x0a
     c2e:	1b 86       	std	Y+11, r1	; 0x0b
     c30:	1c 86       	std	Y+12, r1	; 0x0c
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9e 87       	std	Y+14, r25	; 0x0e
     c38:	8d 87       	std	Y+13, r24	; 0x0d
     c3a:	18 8a       	std	Y+16, r1	; 0x10
     c3c:	1f 86       	std	Y+15, r1	; 0x0f
     c3e:	1a 8a       	std	Y+18, r1	; 0x12
     c40:	19 8a       	std	Y+17, r1	; 0x11
     c42:	1e 8a       	std	Y+22, r1	; 0x16
     c44:	1d 8a       	std	Y+21, r1	; 0x15
     c46:	84 e1       	ldi	r24, 0x14	; 20
     c48:	8f 8b       	std	Y+23, r24	; 0x17
     c4a:	18 8e       	std	Y+24, r1	; 0x18
     c4c:	19 8e       	std	Y+25, r1	; 0x19
     c4e:	1a 8e       	std	Y+26, r1	; 0x1a
     c50:	1b 8e       	std	Y+27, r1	; 0x1b
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:4
    _type = type;
     c52:	7c 8b       	std	Y+20, r23	; 0x14
     c54:	6b 8b       	std	Y+19, r22	; 0x13
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:5
    switch (_type) {
     c56:	62 30       	cpi	r22, 0x02	; 2
     c58:	71 05       	cpc	r23, r1
     c5a:	41 f1       	breq	.+80     	; 0xcac <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0xa0>
     c5c:	f0 f0       	brcs	.+60     	; 0xc9a <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x8e>
     c5e:	63 30       	cpi	r22, 0x03	; 3
     c60:	71 05       	cpc	r23, r1
     c62:	79 f1       	breq	.+94     	; 0xcc2 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0xb6>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:25
        _digB = param2;
        if (param3 != _GM_NC) _level = !param3;
        break;		
    }

    if (_digA != _GM_NC) pinMode(_digA, OUTPUT);
     c64:	88 85       	ldd	r24, Y+8	; 0x08
     c66:	8f 3f       	cpi	r24, 0xFF	; 255
     c68:	19 f0       	breq	.+6      	; 0xc70 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x64>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:25 (discriminator 1)
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:26
    if (_digB != _GM_NC) pinMode(_digB, OUTPUT);
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	19 f0       	breq	.+6      	; 0xc7c <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x70>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:26 (discriminator 1)
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:27
    if (_pwmC != _GM_NC) pinMode(_pwmC, OUTPUT);
     c7c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7e:	8f 3f       	cpi	r24, 0xFF	; 255
     c80:	19 f0       	breq	.+6      	; 0xc88 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x7c>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:27 (discriminator 1)
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:29
    
    setMode(STOP);
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	ce 01       	movw	r24, r28
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:30
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	0f 91       	pop	r16
     c94:	ef 90       	pop	r14
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:29

    if (_digA != _GM_NC) pinMode(_digA, OUTPUT);
    if (_digB != _GM_NC) pinMode(_digB, OUTPUT);
    if (_pwmC != _GM_NC) pinMode(_pwmC, OUTPUT);
    
    setMode(STOP);
     c96:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <GMotor::setMode(GM_workMode)>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:8
GMotor::GMotor(GM_driverType type, int8_t param1, int8_t param2, int8_t param3, int8_t param4) {
    _type = type;
    switch (_type) {
    case DRIVER2WIRE_NO_INVERT:	
    case DRIVER2WIRE:
        _digA = param1;
     c9a:	48 87       	std	Y+8, r20	; 0x08
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:9
        _pwmC = param2;
     c9c:	2a 87       	std	Y+10, r18	; 0x0a
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:10
        if (param3 != _GM_NC) _level = !param3;
     c9e:	0f 3f       	cpi	r16, 0xFF	; 255
     ca0:	09 f3       	breq	.-62     	; 0xc64 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x58>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:10 (discriminator 1)
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	00 23       	and	r16, r16
     ca6:	59 f0       	breq	.+22     	; 0xcbe <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0xb2>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:16 (discriminator 1)
        break;
    case DRIVER3WIRE:
        _digA = param1;
        _digB = param2;
        _pwmC = param3;	
        if (param4 != _GM_NC) _level = !param4;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0xb2>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:13
        _digA = param1;
        _pwmC = param2;
        if (param3 != _GM_NC) _level = !param3;
        break;
    case DRIVER3WIRE:
        _digA = param1;
     cac:	48 87       	std	Y+8, r20	; 0x08
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:14
        _digB = param2;
     cae:	29 87       	std	Y+9, r18	; 0x09
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:15
        _pwmC = param3;	
     cb0:	0a 87       	std	Y+10, r16	; 0x0a
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:16
        if (param4 != _GM_NC) _level = !param4;
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	e8 16       	cp	r14, r24
     cb6:	b1 f2       	breq	.-84     	; 0xc64 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x58>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:16 (discriminator 1)
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	e1 10       	cpse	r14, r1
     cbc:	f5 cf       	rjmp	.-22     	; 0xca8 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x9c>
     cbe:	8c 87       	std	Y+12, r24	; 0x0c
     cc0:	d1 cf       	rjmp	.-94     	; 0xc64 <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x58>
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:19
        break;	
    case RELAY2WIRE:
        _digA = param1;
     cc2:	48 87       	std	Y+8, r20	; 0x08
c:\Users\artem\Documents\Arduino\libraries\GyverMotor\src/GyverMotor.cpp:20
        _digB = param2;
     cc4:	29 87       	std	Y+9, r18	; 0x09
     cc6:	eb cf       	rjmp	.-42     	; 0xc9e <GMotor::GMotor(GM_driverType, signed char, signed char, signed char, signed char)+0x92>

00000cc8 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire/TwoWire.cpp:380

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <TwoWire::available()>:
_ZN7TwoWire9availableEv():
     cce:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <TwoWire::rxBufferLength>
     cd2:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <TwoWire::rxBufferIndex>
     cd6:	89 1b       	sub	r24, r25
     cd8:	99 0b       	sbc	r25, r25
     cda:	08 95       	ret

00000cdc <TwoWire::read()>:
_ZN7TwoWire4readEv():
     cdc:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <TwoWire::rxBufferIndex>
     ce0:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <TwoWire::rxBufferLength>
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	3f ef       	ldi	r19, 0xFF	; 255
     ce8:	98 17       	cp	r25, r24
     cea:	48 f4       	brcc	.+18     	; 0xcfe <TwoWire::read()+0x22>
     cec:	e9 2f       	mov	r30, r25
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	e0 5e       	subi	r30, 0xE0	; 224
     cf2:	fc 4f       	sbci	r31, 0xFC	; 252
     cf4:	20 81       	ld	r18, Z
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <TwoWire::rxBufferIndex>
     cfe:	c9 01       	movw	r24, r18
     d00:	08 95       	ret

00000d02 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
     d02:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <TwoWire::rxBufferIndex>
     d06:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <TwoWire::rxBufferLength>
     d0a:	e8 17       	cp	r30, r24
     d0c:	30 f4       	brcc	.+12     	; 0xd1a <TwoWire::peek()+0x18>
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	e0 5e       	subi	r30, 0xE0	; 224
     d12:	fc 4f       	sbci	r31, 0xFC	; 252
     d14:	80 81       	ld	r24, Z
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	08 95       	ret
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	08 95       	ret

00000d20 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
     d20:	08 95       	ret

00000d22 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
     d28:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <TwoWire::user_onReceive>
     d2c:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <TwoWire::user_onReceive+0x1>
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	f1 f0       	breq	.+60     	; 0xd70 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
     d34:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <TwoWire::rxBufferIndex>
     d38:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <TwoWire::rxBufferLength>
     d3c:	98 17       	cp	r25, r24
     d3e:	c0 f0       	brcs	.+48     	; 0xd70 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	29 2f       	mov	r18, r25
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	26 17       	cp	r18, r22
     d48:	37 07       	cpc	r19, r23
     d4a:	54 f4       	brge	.+20     	; 0xd60 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
     d4c:	de 01       	movw	r26, r28
     d4e:	a2 0f       	add	r26, r18
     d50:	b3 1f       	adc	r27, r19
     d52:	4c 91       	ld	r20, X
     d54:	20 5e       	subi	r18, 0xE0	; 224
     d56:	3c 4f       	sbci	r19, 0xFC	; 252
     d58:	d9 01       	movw	r26, r18
     d5a:	4c 93       	st	X, r20
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	f1 cf       	rjmp	.-30     	; 0xd42 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
     d60:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <TwoWire::rxBufferIndex>
     d64:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <TwoWire::rxBufferLength>
     d68:	cb 01       	movw	r24, r22
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	19 94       	eijmp
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
     d76:	e0 91 f8 02 	lds	r30, 0x02F8	; 0x8002f8 <TwoWire::user_onRequest>
     d7a:	f0 91 f9 02 	lds	r31, 0x02F9	; 0x8002f9 <TwoWire::user_onRequest+0x1>
     d7e:	30 97       	sbiw	r30, 0x00	; 0
     d80:	29 f0       	breq	.+10     	; 0xd8c <TwoWire::onRequestService()+0x16>
     d82:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <TwoWire::txBufferIndex>
     d86:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <TwoWire::txBufferLength>
     d8a:	19 94       	eijmp
     d8c:	08 95       	ret

00000d8e <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	1f 92       	push	r1
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	69 83       	std	Y+1, r22	; 0x01
     d9a:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <TwoWire::transmitting>
     d9e:	22 23       	and	r18, r18
     da0:	f9 f0       	breq	.+62     	; 0xde0 <TwoWire::write(unsigned char)+0x52>
     da2:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <TwoWire::txBufferLength>
     da6:	20 32       	cpi	r18, 0x20	; 32
     da8:	58 f0       	brcs	.+22     	; 0xdc0 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	fc 01       	movw	r30, r24
     db0:	33 83       	std	Z+3, r19	; 0x03
     db2:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0f 90       	pop	r0
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret
     dc0:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <TwoWire::txBufferIndex>
     dc4:	e8 2f       	mov	r30, r24
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	e3 50       	subi	r30, 0x03	; 3
     dca:	fd 4f       	sbci	r31, 0xFD	; 253
     dcc:	99 81       	ldd	r25, Y+1	; 0x01
     dce:	90 83       	st	Z, r25
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <TwoWire::txBufferIndex>
     dd6:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <TwoWire::txBufferLength>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	ec cf       	rjmp	.-40     	; 0xdb8 <TwoWire::write(unsigned char)+0x2a>
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	ce 01       	movw	r24, r28
     de4:	01 96       	adiw	r24, 0x01	; 1
     de6:	0e 94 77 08 	call	0x10ee	; 0x10ee <twi_transmit>
     dea:	f7 cf       	rjmp	.-18     	; 0xdda <TwoWire::write(unsigned char)+0x4c>

00000dec <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	7c 01       	movw	r14, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	8a 01       	movw	r16, r20
     e02:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <TwoWire::transmitting>
     e06:	22 23       	and	r18, r18
     e08:	89 f0       	breq	.+34     	; 0xe2c <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     e0a:	eb 01       	movw	r28, r22
     e0c:	6b 01       	movw	r12, r22
     e0e:	c4 0e       	add	r12, r20
     e10:	d5 1e       	adc	r13, r21
     e12:	cc 15       	cp	r28, r12
     e14:	dd 05       	cpc	r29, r13
     e16:	69 f0       	breq	.+26     	; 0xe32 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     e18:	69 91       	ld	r22, Y+
     e1a:	d7 01       	movw	r26, r14
     e1c:	ed 91       	ld	r30, X+
     e1e:	fc 91       	ld	r31, X
     e20:	01 90       	ld	r0, Z+
     e22:	f0 81       	ld	r31, Z
     e24:	e0 2d       	mov	r30, r0
     e26:	c7 01       	movw	r24, r14
     e28:	19 95       	eicall
     e2a:	f3 cf       	rjmp	.-26     	; 0xe12 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
     e2c:	64 2f       	mov	r22, r20
     e2e:	0e 94 77 08 	call	0x10ee	; 0x10ee <twi_transmit>
     e32:	c8 01       	movw	r24, r16
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret

00000e46 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
     e46:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <TwoWire::rxBufferIndex>
     e4a:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <TwoWire::rxBufferLength>
     e4e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <TwoWire::txBufferIndex>
     e52:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <TwoWire::txBufferLength>
     e56:	0e 94 cc 07 	call	0xf98	; 0xf98 <twi_init>
     e5a:	8b eb       	ldi	r24, 0xBB	; 187
     e5c:	96 e0       	ldi	r25, 0x06	; 6
     e5e:	0e 94 a3 08 	call	0x1146	; 0x1146 <twi_attachSlaveTxEvent>
     e62:	81 e9       	ldi	r24, 0x91	; 145
     e64:	96 e0       	ldi	r25, 0x06	; 6
     e66:	0c 94 9e 08 	jmp	0x113c	; 0x113c <twi_attachSlaveRxEvent>

00000e6a <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <TwoWire::transmitting>
     e70:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <TwoWire::txAddress>
     e74:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <TwoWire::txBufferIndex>
     e78:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <TwoWire::txBufferLength>
     e7c:	08 95       	ret

00000e7e <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
     e7e:	0f 93       	push	r16
     e80:	06 2f       	mov	r16, r22
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	40 91 fb 02 	lds	r20, 0x02FB	; 0x8002fb <TwoWire::txBufferLength>
     e88:	6d ef       	ldi	r22, 0xFD	; 253
     e8a:	72 e0       	ldi	r23, 0x02	; 2
     e8c:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <TwoWire::txAddress>
     e90:	0e 94 27 08 	call	0x104e	; 0x104e <twi_writeTo>
     e94:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <TwoWire::txBufferIndex>
     e98:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <TwoWire::txBufferLength>
     e9c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <TwoWire::transmitting>
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
     ea4:	4f 92       	push	r4
     ea6:	5f 92       	push	r5
     ea8:	6f 92       	push	r6
     eaa:	7f 92       	push	r7
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	5c 01       	movw	r10, r24
     ec0:	f6 2e       	mov	r15, r22
     ec2:	d4 2f       	mov	r29, r20
     ec4:	28 01       	movw	r4, r16
     ec6:	39 01       	movw	r6, r18
     ec8:	ee 20       	and	r14, r14
     eca:	19 f1       	breq	.+70     	; 0xf12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
     ecc:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
     ed0:	ce 2d       	mov	r28, r14
     ed2:	c4 30       	cpi	r28, 0x04	; 4
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     ed6:	c3 e0       	ldi	r28, 0x03	; 3
     ed8:	c1 50       	subi	r28, 0x01	; 1
     eda:	b8 f0       	brcs	.+46     	; 0xf0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	c2 9f       	mul	r28, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	a3 01       	movw	r20, r6
     ee6:	92 01       	movw	r18, r4
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
     eea:	56 95       	lsr	r21
     eec:	47 95       	ror	r20
     eee:	37 95       	ror	r19
     ef0:	27 95       	ror	r18
     ef2:	8a 95       	dec	r24
     ef4:	d2 f7       	brpl	.-12     	; 0xeea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
     ef6:	b9 01       	movw	r22, r18
     ef8:	d5 01       	movw	r26, r10
     efa:	ed 91       	ld	r30, X+
     efc:	fc 91       	ld	r31, X
     efe:	01 90       	ld	r0, Z+
     f00:	f0 81       	ld	r31, Z
     f02:	e0 2d       	mov	r30, r0
     f04:	c5 01       	movw	r24, r10
     f06:	19 95       	eicall
     f08:	e7 cf       	rjmp	.-50     	; 0xed8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	c5 01       	movw	r24, r10
     f0e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TwoWire::endTransmission(unsigned char)>
     f12:	4d 2f       	mov	r20, r29
     f14:	d1 32       	cpi	r29, 0x21	; 33
     f16:	08 f0       	brcs	.+2      	; 0xf1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
     f18:	40 e2       	ldi	r20, 0x20	; 32
     f1a:	2c 2d       	mov	r18, r12
     f1c:	60 e2       	ldi	r22, 0x20	; 32
     f1e:	73 e0       	ldi	r23, 0x03	; 3
     f20:	8f 2d       	mov	r24, r15
     f22:	0e 94 e7 07 	call	0xfce	; 0xfce <twi_readFrom>
     f26:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <TwoWire::rxBufferIndex>
     f2a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <TwoWire::rxBufferLength>
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	08 95       	ret

00000f4a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
     f4a:	cf 92       	push	r12
     f4c:	ef 92       	push	r14
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	c2 2e       	mov	r12, r18
     f54:	e1 2c       	mov	r14, r1
     f56:	00 e0       	ldi	r16, 0x00	; 0
     f58:	10 e0       	ldi	r17, 0x00	; 0
     f5a:	98 01       	movw	r18, r16
     f5c:	0e 94 52 07 	call	0xea4	; 0xea4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ef 90       	pop	r14
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00000f70 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <TwoWire::endTransmission(unsigned char)>

00000f76 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f76:	ea ee       	ldi	r30, 0xEA	; 234
     f78:	f2 e0       	ldi	r31, 0x02	; 2
     f7a:	13 82       	std	Z+3, r1	; 0x03
     f7c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     f7e:	88 ee       	ldi	r24, 0xE8	; 232
     f80:	93 e0       	ldi	r25, 0x03	; 3
     f82:	a0 e0       	ldi	r26, 0x00	; 0
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	84 83       	std	Z+4, r24	; 0x04
     f88:	95 83       	std	Z+5, r25	; 0x05
     f8a:	a6 83       	std	Z+6, r26	; 0x06
     f8c:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire/TwoWire.cpp:55
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     f8e:	8a e3       	ldi	r24, 0x3A	; 58
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire/TwoWire.cpp:384
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     f96:	08 95       	ret

00000f98 <twi_init>:
twi_init():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:525
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     f98:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <twi_sendStop>
     fa2:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	84 e1       	ldi	r24, 0x14	; 20
     faa:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	85 e1       	ldi	r24, 0x15	; 21
     fb2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <digitalWrite>
     fb6:	e9 eb       	ldi	r30, 0xB9	; 185
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8c 7f       	andi	r24, 0xFC	; 252
     fbe:	80 83       	st	Z, r24
     fc0:	88 e4       	ldi	r24, 0x48	; 72
     fc2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
     fc6:	85 e4       	ldi	r24, 0x45	; 69
     fc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
     fcc:	08 95       	ret

00000fce <twi_readFrom>:
twi_readFrom():
     fce:	41 32       	cpi	r20, 0x21	; 33
     fd0:	e0 f5       	brcc	.+120    	; 0x104a <twi_readFrom+0x7c>
     fd2:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_state>
     fd6:	91 11       	cpse	r25, r1
     fd8:	fc cf       	rjmp	.-8      	; 0xfd2 <twi_readFrom+0x4>
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <twi_state>
     fe0:	20 93 8d 03 	sts	0x038D, r18	; 0x80038d <twi_sendStop>
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	20 93 40 03 	sts	0x0340, r18	; 0x800340 <twi_error>
     fea:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <twi_masterBuffer+0x1>
     fee:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <twi_masterBuffer>
     ff2:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_masterBufferIndex>
     ff6:	24 0f       	add	r18, r20
     ff8:	20 93 84 03 	sts	0x0384, r18	; 0x800384 <twi_masterBufferLength>
     ffc:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <twi_slarw>
    1000:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <twi_slarw>
    1004:	88 0f       	add	r24, r24
    1006:	89 2b       	or	r24, r25
    1008:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_slarw>
    100c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	c9 f4       	brne	.+50     	; 0x1046 <twi_readFrom+0x78>
    1014:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    1018:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    101c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1020:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1024:	83 fd       	sbrc	r24, 3
    1026:	f8 cf       	rjmp	.-16     	; 0x1018 <twi_readFrom+0x4a>
    1028:	85 ec       	ldi	r24, 0xC5	; 197
    102a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    102e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_state>
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	e1 f3       	breq	.-8      	; 0x102e <twi_readFrom+0x60>
    1036:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <twi_masterBufferIndex>
    103a:	84 17       	cp	r24, r20
    103c:	10 f4       	brcc	.+4      	; 0x1042 <twi_readFrom+0x74>
    103e:	40 91 85 03 	lds	r20, 0x0385	; 0x800385 <twi_masterBufferIndex>
    1042:	84 2f       	mov	r24, r20
    1044:	08 95       	ret
    1046:	85 ee       	ldi	r24, 0xE5	; 229
    1048:	f0 cf       	rjmp	.-32     	; 0x102a <twi_readFrom+0x5c>
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	fa cf       	rjmp	.-12     	; 0x1042 <twi_readFrom+0x74>

0000104e <twi_writeTo>:
twi_writeTo():
    104e:	0f 93       	push	r16
    1050:	41 32       	cpi	r20, 0x21	; 33
    1052:	08 f0       	brcs	.+2      	; 0x1056 <twi_writeTo+0x8>
    1054:	44 c0       	rjmp	.+136    	; 0x10de <twi_writeTo+0x90>
    1056:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <twi_state>
    105a:	91 11       	cpse	r25, r1
    105c:	fc cf       	rjmp	.-8      	; 0x1056 <twi_writeTo+0x8>
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <twi_state>
    1064:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <twi_sendStop>
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <twi_error>
    106e:	70 93 87 03 	sts	0x0387, r23	; 0x800387 <twi_masterBuffer+0x1>
    1072:	60 93 86 03 	sts	0x0386, r22	; 0x800386 <twi_masterBuffer>
    1076:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <twi_masterBufferIndex>
    107a:	40 93 84 03 	sts	0x0384, r20	; 0x800384 <twi_masterBufferLength>
    107e:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_slarw>
    1082:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <twi_slarw>
    1086:	88 0f       	add	r24, r24
    1088:	89 2b       	or	r24, r25
    108a:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_slarw>
    108e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <twi_inRepStart>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	11 f5       	brne	.+68     	; 0x10da <twi_writeTo+0x8c>
    1096:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <twi_inRepStart>
    109a:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
    109e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    10a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    10a6:	83 fd       	sbrc	r24, 3
    10a8:	f8 cf       	rjmp	.-16     	; 0x109a <twi_writeTo+0x4c>
    10aa:	85 ec       	ldi	r24, 0xC5	; 197
    10ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    10b0:	22 23       	and	r18, r18
    10b2:	21 f0       	breq	.+8      	; 0x10bc <twi_writeTo+0x6e>
    10b4:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_state>
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	d1 f3       	breq	.-12     	; 0x10b0 <twi_writeTo+0x62>
    10bc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_error>
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	79 f0       	breq	.+30     	; 0x10e2 <twi_writeTo+0x94>
    10c4:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_error>
    10c8:	80 32       	cpi	r24, 0x20	; 32
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <twi_writeTo+0x98>
    10cc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <twi_error>
    10d0:	80 33       	cpi	r24, 0x30	; 48
    10d2:	59 f0       	breq	.+22     	; 0x10ea <twi_writeTo+0x9c>
    10d4:	84 e0       	ldi	r24, 0x04	; 4
    10d6:	0f 91       	pop	r16
    10d8:	08 95       	ret
    10da:	85 ee       	ldi	r24, 0xE5	; 229
    10dc:	e7 cf       	rjmp	.-50     	; 0x10ac <twi_writeTo+0x5e>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	fa cf       	rjmp	.-12     	; 0x10d6 <twi_writeTo+0x88>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	f8 cf       	rjmp	.-16     	; 0x10d6 <twi_writeTo+0x88>
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	f6 cf       	rjmp	.-20     	; 0x10d6 <twi_writeTo+0x88>
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	f4 cf       	rjmp	.-24     	; 0x10d6 <twi_writeTo+0x88>

000010ee <twi_transmit>:
twi_transmit():
    10ee:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <twi_txBufferLength>
    10f2:	26 0f       	add	r18, r22
    10f4:	33 27       	eor	r19, r19
    10f6:	33 1f       	adc	r19, r19
    10f8:	21 32       	cpi	r18, 0x21	; 33
    10fa:	31 05       	cpc	r19, r1
    10fc:	ec f4       	brge	.+58     	; 0x1138 <twi_transmit+0x4a>
    10fe:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <twi_state>
    1102:	fc 01       	movw	r30, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	24 30       	cpi	r18, 0x04	; 4
    110a:	69 f0       	breq	.+26     	; 0x1126 <twi_transmit+0x38>
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	08 95       	ret
    1110:	a0 91 62 03 	lds	r26, 0x0362	; 0x800362 <twi_txBufferLength>
    1114:	21 91       	ld	r18, Z+
    1116:	ac 01       	movw	r20, r24
    1118:	4c 59       	subi	r20, 0x9C	; 156
    111a:	5c 4f       	sbci	r21, 0xFC	; 252
    111c:	a4 0f       	add	r26, r20
    111e:	b5 2f       	mov	r27, r21
    1120:	b1 1d       	adc	r27, r1
    1122:	2c 93       	st	X, r18
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	86 17       	cp	r24, r22
    1128:	98 f3       	brcs	.-26     	; 0x1110 <twi_transmit+0x22>
    112a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_txBufferLength>
    112e:	68 0f       	add	r22, r24
    1130:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <twi_txBufferLength>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret

0000113c <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    113c:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <twi_onSlaveReceive+0x1>
    1140:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <twi_onSlaveReceive>
    1144:	08 95       	ret

00001146 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    1146:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <twi_onSlaveTransmit+0x1>
    114a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <twi_onSlaveTransmit>
    114e:	08 95       	ret

00001150 <twi_stop>:
twi_stop():
    1150:	85 ed       	ldi	r24, 0xD5	; 213
    1152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    1156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    115a:	84 fd       	sbrc	r24, 4
    115c:	fc cf       	rjmp	.-8      	; 0x1156 <twi_stop+0x6>
    115e:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    1162:	08 95       	ret

00001164 <twi_releaseBus>:
twi_releaseBus():
    1164:	85 ec       	ldi	r24, 0xC5	; 197
    1166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    116a:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
    116e:	08 95       	ret

00001170 <__vector_39>:
__vector_39():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:528

ISR(TWI_vect)
{
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	0b b6       	in	r0, 0x3b	; 59
    117c:	0f 92       	push	r0
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  switch(TW_STATUS){
    1196:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    119a:	88 7f       	andi	r24, 0xF8	; 248
    119c:	80 36       	cpi	r24, 0x60	; 96
    119e:	09 f4       	brne	.+2      	; 0x11a2 <__vector_39+0x32>
    11a0:	4e c0       	rjmp	.+156    	; 0x123e <__vector_39+0xce>
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <__vector_39+0x36>
    11a4:	41 c0       	rjmp	.+130    	; 0x1228 <__vector_39+0xb8>
    11a6:	88 32       	cpi	r24, 0x28	; 40
    11a8:	09 f4       	brne	.+2      	; 0x11ac <__vector_39+0x3c>
    11aa:	aa c0       	rjmp	.+340    	; 0x1300 <__vector_39+0x190>
    11ac:	28 f5       	brcc	.+74     	; 0x11f8 <__vector_39+0x88>
    11ae:	80 31       	cpi	r24, 0x10	; 16
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <__vector_39+0x44>
    11b2:	9e c0       	rjmp	.+316    	; 0x12f0 <__vector_39+0x180>
    11b4:	c8 f4       	brcc	.+50     	; 0x11e8 <__vector_39+0x78>
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__vector_39+0x4c>
    11ba:	07 c1       	rjmp	.+526    	; 0x13ca <__vector_39+0x25a>
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	09 f4       	brne	.+2      	; 0x11c2 <__vector_39+0x52>
    11c0:	97 c0       	rjmp	.+302    	; 0x12f0 <__vector_39+0x180>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:690
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	bf 91       	pop	r27
    11c8:	af 91       	pop	r26
    11ca:	9f 91       	pop	r25
    11cc:	8f 91       	pop	r24
    11ce:	7f 91       	pop	r23
    11d0:	6f 91       	pop	r22
    11d2:	5f 91       	pop	r21
    11d4:	4f 91       	pop	r20
    11d6:	3f 91       	pop	r19
    11d8:	2f 91       	pop	r18
    11da:	0f 90       	pop	r0
    11dc:	0b be       	out	0x3b, r0	; 59
    11de:	0f 90       	pop	r0
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	0f 90       	pop	r0
    11e4:	1f 90       	pop	r1
    11e6:	18 95       	reti
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    11e8:	88 31       	cpi	r24, 0x18	; 24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <__vector_39+0x7e>
    11ec:	89 c0       	rjmp	.+274    	; 0x1300 <__vector_39+0x190>
    11ee:	80 32       	cpi	r24, 0x20	; 32
    11f0:	41 f7       	brne	.-48     	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:564
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    11f2:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_error>
    11f6:	15 c0       	rjmp	.+42     	; 0x1222 <__vector_39+0xb2>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    11f8:	80 34       	cpi	r24, 0x40	; 64
    11fa:	09 f4       	brne	.+2      	; 0x11fe <__vector_39+0x8e>
    11fc:	a6 c0       	rjmp	.+332    	; 0x134a <__vector_39+0x1da>
    11fe:	48 f4       	brcc	.+18     	; 0x1212 <__vector_39+0xa2>
    1200:	80 33       	cpi	r24, 0x30	; 48
    1202:	b9 f3       	breq	.-18     	; 0x11f2 <__vector_39+0x82>
    1204:	88 33       	cpi	r24, 0x38	; 56
    1206:	e9 f6       	brne	.-70     	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:568
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1208:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <twi_error>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:569
      twi_releaseBus();
    120c:	0e 94 b2 08 	call	0x1164	; 0x1164 <twi_releaseBus>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:570
      break;
    1210:	d8 cf       	rjmp	.-80     	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1212:	80 35       	cpi	r24, 0x50	; 80
    1214:	09 f4       	brne	.+2      	; 0x1218 <__vector_39+0xa8>
    1216:	89 c0       	rjmp	.+274    	; 0x132a <__vector_39+0x1ba>
    1218:	88 35       	cpi	r24, 0x58	; 88
    121a:	09 f4       	brne	.+2      	; 0x121e <__vector_39+0xae>
    121c:	9e c0       	rjmp	.+316    	; 0x135a <__vector_39+0x1ea>
    121e:	88 34       	cpi	r24, 0x48	; 72
    1220:	81 f6       	brne	.-96     	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:687
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1222:	0e 94 a8 08 	call	0x1150	; 0x1150 <twi_stop>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:690
      break;
  }
}
    1226:	cd cf       	rjmp	.-102    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1228:	88 39       	cpi	r24, 0x98	; 152
    122a:	09 f4       	brne	.+2      	; 0x122e <__vector_39+0xbe>
    122c:	94 c0       	rjmp	.+296    	; 0x1356 <__vector_39+0x1e6>
    122e:	38 f5       	brcc	.+78     	; 0x127e <__vector_39+0x10e>
    1230:	88 37       	cpi	r24, 0x78	; 120
    1232:	29 f0       	breq	.+10     	; 0x123e <__vector_39+0xce>
    1234:	50 f4       	brcc	.+20     	; 0x124a <__vector_39+0xda>
    1236:	88 36       	cpi	r24, 0x68	; 104
    1238:	11 f0       	breq	.+4      	; 0x123e <__vector_39+0xce>
    123a:	80 37       	cpi	r24, 0x70	; 112
    123c:	11 f6       	brne	.-124    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:610
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:612
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1244:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <twi_rxBufferIndex>
    1248:	57 c0       	rjmp	.+174    	; 0x12f8 <__vector_39+0x188>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    124a:	88 38       	cpi	r24, 0x88	; 136
    124c:	09 f4       	brne	.+2      	; 0x1250 <__vector_39+0xe0>
    124e:	83 c0       	rjmp	.+262    	; 0x1356 <__vector_39+0x1e6>
    1250:	80 39       	cpi	r24, 0x90	; 144
    1252:	19 f0       	breq	.+6      	; 0x125a <__vector_39+0xea>
    1254:	80 38       	cpi	r24, 0x80	; 128
    1256:	09 f0       	breq	.+2      	; 0x125a <__vector_39+0xea>
    1258:	b4 cf       	rjmp	.-152    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:618
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    125a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_rxBufferIndex>
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__vector_39+0xf4>
    1262:	79 c0       	rjmp	.+242    	; 0x1356 <__vector_39+0x1e6>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:620
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1264:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <twi_rxBufferIndex>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	8e 0f       	add	r24, r30
    126c:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <twi_rxBufferIndex>
    1270:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	ee 5b       	subi	r30, 0xBE	; 190
    1278:	fc 4f       	sbci	r31, 0xFC	; 252
    127a:	80 83       	st	Z, r24
    127c:	3d c0       	rjmp	.+122    	; 0x12f8 <__vector_39+0x188>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    127e:	80 3b       	cpi	r24, 0xB0	; 176
    1280:	39 f0       	breq	.+14     	; 0x1290 <__vector_39+0x120>
    1282:	e0 f4       	brcc	.+56     	; 0x12bc <__vector_39+0x14c>
    1284:	80 3a       	cpi	r24, 0xA0	; 160
    1286:	09 f4       	brne	.+2      	; 0x128a <__vector_39+0x11a>
    1288:	85 c0       	rjmp	.+266    	; 0x1394 <__vector_39+0x224>
    128a:	88 3a       	cpi	r24, 0xA8	; 168
    128c:	09 f0       	breq	.+2      	; 0x1290 <__vector_39+0x120>
    128e:	99 cf       	rjmp	.-206    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:649

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1290:	84 e0       	ldi	r24, 0x04	; 4
    1292:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_state>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:651
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1296:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <twi_txBufferIndex>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:653
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    129a:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <twi_txBufferLength>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:656
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    129e:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <twi_onSlaveTransmit>
    12a2:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <twi_onSlaveTransmit+0x1>
    12a6:	19 95       	eicall
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:658
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    12a8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_txBufferLength>
    12ac:	81 11       	cpse	r24, r1
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <__vector_39+0x15e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:659
        twi_txBufferLength = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <twi_txBufferLength>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:660
        twi_txBuffer[0] = 0x00;
    12b6:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <twi_txBuffer>
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <__vector_39+0x15e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:529
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    12bc:	80 3c       	cpi	r24, 0xC0	; 192
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__vector_39+0x152>
    12c0:	82 c0       	rjmp	.+260    	; 0x13c6 <__vector_39+0x256>
    12c2:	88 3c       	cpi	r24, 0xC8	; 200
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <__vector_39+0x158>
    12c6:	7f c0       	rjmp	.+254    	; 0x13c6 <__vector_39+0x256>
    12c8:	88 3b       	cpi	r24, 0xB8	; 184
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__vector_39+0x15e>
    12cc:	7a cf       	rjmp	.-268    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:666
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    12ce:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <twi_txBufferIndex>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	8e 0f       	add	r24, r30
    12d6:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <twi_txBufferIndex>
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	ec 59       	subi	r30, 0x9C	; 156
    12de:	fc 4f       	sbci	r31, 0xFC	; 252
    12e0:	80 81       	ld	r24, Z
    12e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:668
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    12e6:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <twi_txBufferIndex>
    12ea:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <twi_txBufferLength>
    12ee:	31 c0       	rjmp	.+98     	; 0x1352 <__vector_39+0x1e2>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:534
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    12f0:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_slarw>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:544
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    12f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
twi_reply():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    12f8:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:417
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    12fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    12fe:	61 cf       	rjmp	.-318    	; 0x11c2 <__vector_39+0x52>
__vector_39():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:542

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1300:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <twi_masterBufferIndex>
    1304:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <twi_masterBufferLength>
    1308:	98 17       	cp	r25, r24
    130a:	b8 f5       	brcc	.+110    	; 0x137a <__vector_39+0x20a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:544
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    130c:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <twi_masterBuffer>
    1310:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <twi_masterBuffer+0x1>
    1314:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <twi_masterBufferIndex>
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	2e 0f       	add	r18, r30
    131c:	20 93 85 03 	sts	0x0385, r18	; 0x800385 <twi_masterBufferIndex>
    1320:	e8 0f       	add	r30, r24
    1322:	f9 2f       	mov	r31, r25
    1324:	f1 1d       	adc	r31, r1
    1326:	80 81       	ld	r24, Z
    1328:	e5 cf       	rjmp	.-54     	; 0x12f4 <__vector_39+0x184>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:575
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    132a:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <twi_masterBuffer>
    132e:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <twi_masterBuffer+0x1>
    1332:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <twi_masterBufferIndex>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	8e 0f       	add	r24, r30
    133a:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_masterBufferIndex>
    133e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1342:	e2 0f       	add	r30, r18
    1344:	f3 2f       	mov	r31, r19
    1346:	f1 1d       	adc	r31, r1
    1348:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:579
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    134a:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <twi_masterBufferIndex>
    134e:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <twi_masterBufferLength>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:668
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1352:	98 17       	cp	r25, r24
    1354:	88 f2       	brcs	.-94     	; 0x12f8 <__vector_39+0x188>
twi_reply():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:417
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1356:	85 e8       	ldi	r24, 0x85	; 133
    1358:	d0 cf       	rjmp	.-96     	; 0x12fa <__vector_39+0x18a>
__vector_39():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:587
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    135a:	20 91 86 03 	lds	r18, 0x0386	; 0x800386 <twi_masterBuffer>
    135e:	30 91 87 03 	lds	r19, 0x0387	; 0x800387 <twi_masterBuffer+0x1>
    1362:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <twi_masterBufferIndex>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8e 0f       	add	r24, r30
    136a:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <twi_masterBufferIndex>
    136e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    1372:	e2 0f       	add	r30, r18
    1374:	f3 2f       	mov	r31, r19
    1376:	f1 1d       	adc	r31, r1
    1378:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:588
  if (twi_sendStop)
    137a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <twi_sendStop>
    137e:	81 11       	cpse	r24, r1
    1380:	50 cf       	rjmp	.-352    	; 0x1222 <__vector_39+0xb2>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:591
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <twi_inRepStart>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:595
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1388:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    138a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
__vector_39():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:679
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    138e:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_state>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:680
      break;
    1392:	17 cf       	rjmp	.-466    	; 0x11c2 <__vector_39+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:629
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1394:	0e 94 b2 08 	call	0x1164	; 0x1164 <twi_releaseBus>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:631
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1398:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <twi_rxBufferIndex>
    139c:	80 32       	cpi	r24, 0x20	; 32
    139e:	30 f4       	brcc	.+12     	; 0x13ac <__vector_39+0x23c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:632
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    13a0:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <twi_rxBufferIndex>
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	ee 5b       	subi	r30, 0xBE	; 190
    13a8:	fc 4f       	sbci	r31, 0xFC	; 252
    13aa:	10 82       	st	Z, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:635
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    13ac:	60 91 41 03 	lds	r22, 0x0341	; 0x800341 <twi_rxBufferIndex>
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <twi_onSlaveReceive>
    13b6:	f0 91 89 03 	lds	r31, 0x0389	; 0x800389 <twi_onSlaveReceive+0x1>
    13ba:	82 e4       	ldi	r24, 0x42	; 66
    13bc:	93 e0       	ldi	r25, 0x03	; 3
    13be:	19 95       	eicall
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:637
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    13c0:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <twi_rxBufferIndex>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:638
      break;
    13c4:	fe ce       	rjmp	.-516    	; 0x11c2 <__vector_39+0x52>
twi_reply():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:415
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    13c6:	85 ec       	ldi	r24, 0xC5	; 197
    13c8:	e0 cf       	rjmp	.-64     	; 0x138a <__vector_39+0x21a>
__vector_39():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\libraries\Wire\src\TwoWire\utility/twi.c:686

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    13ca:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <twi_error>
    13ce:	29 cf       	rjmp	.-430    	; 0x1222 <__vector_39+0xb2>

000013d0 <VL53L0X::VL53L0X()>:
_ZN7VL53L0XC2Ev():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:870
bool VL53L0X::timeoutOccurred()
{
  bool tmp = did_timeout;
  did_timeout = false;
  return tmp;
}
    13d0:	fc 01       	movw	r30, r24
    13d2:	8a ee       	ldi	r24, 0xEA	; 234
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	92 83       	std	Z+2, r25	; 0x02
    13d8:	81 83       	std	Z+1, r24	; 0x01
    13da:	89 e2       	ldi	r24, 0x29	; 41
    13dc:	83 83       	std	Z+3, r24	; 0x03
    13de:	15 82       	std	Z+5, r1	; 0x05
    13e0:	14 82       	std	Z+4, r1	; 0x04
    13e2:	16 82       	std	Z+6, r1	; 0x06
    13e4:	08 95       	ret

000013e6 <VL53L0X::writeReg(unsigned char, unsigned char)>:
_ZN7VL53L0X8writeRegEhh():
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
    13f0:	06 2f       	mov	r16, r22
    13f2:	14 2f       	mov	r17, r20
    13f4:	6b 81       	ldd	r22, Y+3	; 0x03
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	dc 01       	movw	r26, r24
    1404:	ed 91       	ld	r30, X+
    1406:	fc 91       	ld	r31, X
    1408:	01 90       	ld	r0, Z+
    140a:	f0 81       	ld	r31, Z
    140c:	e0 2d       	mov	r30, r0
    140e:	60 2f       	mov	r22, r16
    1410:	19 95       	eicall
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	dc 01       	movw	r26, r24
    1418:	ed 91       	ld	r30, X+
    141a:	fc 91       	ld	r31, X
    141c:	01 90       	ld	r0, Z+
    141e:	f0 81       	ld	r31, Z
    1420:	e0 2d       	mov	r30, r0
    1422:	61 2f       	mov	r22, r17
    1424:	19 95       	eicall
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    142e:	88 83       	st	Y, r24
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <VL53L0X::setAddress(unsigned char)>:
_ZN7VL53L0X10setAddressEh():
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	ec 01       	movw	r28, r24
    1442:	16 2f       	mov	r17, r22
    1444:	46 2f       	mov	r20, r22
    1446:	4f 77       	andi	r20, 0x7F	; 127
    1448:	6a e8       	ldi	r22, 0x8A	; 138
    144a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    144e:	1b 83       	std	Y+3, r17	; 0x03
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	08 95       	ret

00001458 <VL53L0X::writeReg16Bit(unsigned char, unsigned int)>:
_ZN7VL53L0X13writeReg16BitEhj():
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	f6 2e       	mov	r15, r22
    1466:	14 2f       	mov	r17, r20
    1468:	05 2f       	mov	r16, r21
    146a:	6b 81       	ldd	r22, Y+3	; 0x03
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	9a 81       	ldd	r25, Y+2	; 0x02
    1470:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	dc 01       	movw	r26, r24
    147a:	ed 91       	ld	r30, X+
    147c:	fc 91       	ld	r31, X
    147e:	01 90       	ld	r0, Z+
    1480:	f0 81       	ld	r31, Z
    1482:	e0 2d       	mov	r30, r0
    1484:	6f 2d       	mov	r22, r15
    1486:	19 95       	eicall
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	dc 01       	movw	r26, r24
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	01 90       	ld	r0, Z+
    1494:	f0 81       	ld	r31, Z
    1496:	e0 2d       	mov	r30, r0
    1498:	60 2f       	mov	r22, r16
    149a:	19 95       	eicall
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	dc 01       	movw	r26, r24
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	61 2f       	mov	r22, r17
    14ae:	19 95       	eicall
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    14b8:	88 83       	st	Y, r24
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	08 95       	ret

000014c6 <VL53L0X::writeReg32Bit(unsigned char, unsigned long)>:
_ZN7VL53L0X13writeReg32BitEhm():
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	16 2f       	mov	r17, r22
    14d8:	69 01       	movw	r12, r18
    14da:	7a 01       	movw	r14, r20
    14dc:	6b 81       	ldd	r22, Y+3	; 0x03
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	9a 81       	ldd	r25, Y+2	; 0x02
    14e2:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	dc 01       	movw	r26, r24
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	01 90       	ld	r0, Z+
    14f2:	f0 81       	ld	r31, Z
    14f4:	e0 2d       	mov	r30, r0
    14f6:	61 2f       	mov	r22, r17
    14f8:	19 95       	eicall
    14fa:	a9 81       	ldd	r26, Y+1	; 0x01
    14fc:	ba 81       	ldd	r27, Y+2	; 0x02
    14fe:	6f 2d       	mov	r22, r15
    1500:	77 27       	eor	r23, r23
    1502:	88 27       	eor	r24, r24
    1504:	99 27       	eor	r25, r25
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	11 97       	sbiw	r26, 0x01	; 1
    150c:	01 90       	ld	r0, Z+
    150e:	f0 81       	ld	r31, Z
    1510:	e0 2d       	mov	r30, r0
    1512:	cd 01       	movw	r24, r26
    1514:	19 95       	eicall
    1516:	a9 81       	ldd	r26, Y+1	; 0x01
    1518:	ba 81       	ldd	r27, Y+2	; 0x02
    151a:	b7 01       	movw	r22, r14
    151c:	88 27       	eor	r24, r24
    151e:	99 27       	eor	r25, r25
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	11 97       	sbiw	r26, 0x01	; 1
    1526:	01 90       	ld	r0, Z+
    1528:	f0 81       	ld	r31, Z
    152a:	e0 2d       	mov	r30, r0
    152c:	cd 01       	movw	r24, r26
    152e:	19 95       	eicall
    1530:	a9 81       	ldd	r26, Y+1	; 0x01
    1532:	ba 81       	ldd	r27, Y+2	; 0x02
    1534:	99 27       	eor	r25, r25
    1536:	8f 2d       	mov	r24, r15
    1538:	7e 2d       	mov	r23, r14
    153a:	6d 2d       	mov	r22, r13
    153c:	ed 91       	ld	r30, X+
    153e:	fc 91       	ld	r31, X
    1540:	11 97       	sbiw	r26, 0x01	; 1
    1542:	01 90       	ld	r0, Z+
    1544:	f0 81       	ld	r31, Z
    1546:	e0 2d       	mov	r30, r0
    1548:	cd 01       	movw	r24, r26
    154a:	19 95       	eicall
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	9a 81       	ldd	r25, Y+2	; 0x02
    1550:	dc 01       	movw	r26, r24
    1552:	ed 91       	ld	r30, X+
    1554:	fc 91       	ld	r31, X
    1556:	01 90       	ld	r0, Z+
    1558:	f0 81       	ld	r31, Z
    155a:	e0 2d       	mov	r30, r0
    155c:	6c 2d       	mov	r22, r12
    155e:	19 95       	eicall
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    1568:	88 83       	st	Y, r24
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	08 95       	ret

0000157a <VL53L0X::readReg(unsigned char)>:
_ZN7VL53L0X7readRegEh():
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    1582:	16 2f       	mov	r17, r22
    1584:	6b 81       	ldd	r22, Y+3	; 0x03
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	dc 01       	movw	r26, r24
    1594:	ed 91       	ld	r30, X+
    1596:	fc 91       	ld	r31, X
    1598:	01 90       	ld	r0, Z+
    159a:	f0 81       	ld	r31, Z
    159c:	e0 2d       	mov	r30, r0
    159e:	61 2f       	mov	r22, r17
    15a0:	19 95       	eicall
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    15aa:	88 83       	st	Y, r24
    15ac:	41 e0       	ldi	r20, 0x01	; 1
    15ae:	6b 81       	ldd	r22, Y+3	; 0x03
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TwoWire::requestFrom(unsigned char, unsigned char)>
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	dc 01       	movw	r26, r24
    15be:	ed 91       	ld	r30, X+
    15c0:	fc 91       	ld	r31, X
    15c2:	02 84       	ldd	r0, Z+10	; 0x0a
    15c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    15c6:	e0 2d       	mov	r30, r0
    15c8:	19 95       	eicall
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	08 95       	ret

000015d2 <VL53L0X::readReg16Bit(unsigned char)>:
_ZN7VL53L0X12readReg16BitEh():
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	ec 01       	movw	r28, r24
    15dc:	16 2f       	mov	r17, r22
    15de:	6b 81       	ldd	r22, Y+3	; 0x03
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	dc 01       	movw	r26, r24
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	01 90       	ld	r0, Z+
    15f4:	f0 81       	ld	r31, Z
    15f6:	e0 2d       	mov	r30, r0
    15f8:	61 2f       	mov	r22, r17
    15fa:	19 95       	eicall
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    1604:	88 83       	st	Y, r24
    1606:	42 e0       	ldi	r20, 0x02	; 2
    1608:	6b 81       	ldd	r22, Y+3	; 0x03
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TwoWire::requestFrom(unsigned char, unsigned char)>
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	dc 01       	movw	r26, r24
    1618:	ed 91       	ld	r30, X+
    161a:	fc 91       	ld	r31, X
    161c:	02 84       	ldd	r0, Z+10	; 0x0a
    161e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1620:	e0 2d       	mov	r30, r0
    1622:	19 95       	eicall
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	18 2f       	mov	r17, r24
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	dc 01       	movw	r26, r24
    162e:	ed 91       	ld	r30, X+
    1630:	fc 91       	ld	r31, X
    1632:	02 84       	ldd	r0, Z+10	; 0x0a
    1634:	f3 85       	ldd	r31, Z+11	; 0x0b
    1636:	e0 2d       	mov	r30, r0
    1638:	19 95       	eicall
    163a:	80 2b       	or	r24, r16
    163c:	91 2b       	or	r25, r17
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <VL53L0X::writeMulti(unsigned char, unsigned char const*, unsigned char)>:
_ZN7VL53L0X10writeMultiEhPKhh():
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	16 2f       	mov	r17, r22
    165a:	d4 2e       	mov	r13, r20
    165c:	e5 2e       	mov	r14, r21
    165e:	f2 2e       	mov	r15, r18
    1660:	6b 81       	ldd	r22, Y+3	; 0x03
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	dc 01       	movw	r26, r24
    1670:	ed 91       	ld	r30, X+
    1672:	fc 91       	ld	r31, X
    1674:	01 90       	ld	r0, Z+
    1676:	f0 81       	ld	r31, Z
    1678:	e0 2d       	mov	r30, r0
    167a:	61 2f       	mov	r22, r17
    167c:	19 95       	eicall
    167e:	0d 2d       	mov	r16, r13
    1680:	1e 2d       	mov	r17, r14
    1682:	fa 94       	dec	r15
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	bf ef       	ldi	r27, 0xFF	; 255
    168a:	fb 16       	cp	r15, r27
    168c:	59 f0       	breq	.+22     	; 0x16a4 <VL53L0X::writeMulti(unsigned char, unsigned char const*, unsigned char)+0x5c>
    168e:	f8 01       	movw	r30, r16
    1690:	61 91       	ld	r22, Z+
    1692:	8f 01       	movw	r16, r30
    1694:	dc 01       	movw	r26, r24
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	01 90       	ld	r0, Z+
    169c:	f0 81       	ld	r31, Z
    169e:	e0 2d       	mov	r30, r0
    16a0:	19 95       	eicall
    16a2:	ef cf       	rjmp	.-34     	; 0x1682 <VL53L0X::writeMulti(unsigned char, unsigned char const*, unsigned char)+0x3a>
    16a4:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    16a8:	88 83       	st	Y, r24
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	08 95       	ret

000016ba <VL53L0X::readMulti(unsigned char, unsigned char*, unsigned char)>:
_ZN7VL53L0X9readMultiEhPhh():
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ec 01       	movw	r28, r24
    16ca:	16 2f       	mov	r17, r22
    16cc:	d4 2e       	mov	r13, r20
    16ce:	e5 2e       	mov	r14, r21
    16d0:	f2 2e       	mov	r15, r18
    16d2:	6b 81       	ldd	r22, Y+3	; 0x03
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	0e 94 35 07 	call	0xe6a	; 0xe6a <TwoWire::beginTransmission(unsigned char)>
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	dc 01       	movw	r26, r24
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	01 90       	ld	r0, Z+
    16e8:	f0 81       	ld	r31, Z
    16ea:	e0 2d       	mov	r30, r0
    16ec:	61 2f       	mov	r22, r17
    16ee:	19 95       	eicall
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	0e 94 b8 07 	call	0xf70	; 0xf70 <TwoWire::endTransmission()>
    16f8:	88 83       	st	Y, r24
    16fa:	4f 2d       	mov	r20, r15
    16fc:	6b 81       	ldd	r22, Y+3	; 0x03
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TwoWire::requestFrom(unsigned char, unsigned char)>
    1706:	0d 2d       	mov	r16, r13
    1708:	1e 2d       	mov	r17, r14
    170a:	fa 94       	dec	r15
    170c:	bf ef       	ldi	r27, 0xFF	; 255
    170e:	fb 16       	cp	r15, r27
    1710:	69 f0       	breq	.+26     	; 0x172c <VL53L0X::readMulti(unsigned char, unsigned char*, unsigned char)+0x72>
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	dc 01       	movw	r26, r24
    1718:	ed 91       	ld	r30, X+
    171a:	fc 91       	ld	r31, X
    171c:	02 84       	ldd	r0, Z+10	; 0x0a
    171e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1720:	e0 2d       	mov	r30, r0
    1722:	19 95       	eicall
    1724:	f8 01       	movw	r30, r16
    1726:	81 93       	st	Z+, r24
    1728:	8f 01       	movw	r16, r30
    172a:	ef cf       	rjmp	.-34     	; 0x170a <VL53L0X::readMulti(unsigned char, unsigned char*, unsigned char)+0x50>
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	08 95       	ret

0000173c <VL53L0X::getVcselPulsePeriod(VL53L0X::vcselPeriodType)>:
_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE():
    173c:	61 15       	cp	r22, r1
    173e:	71 05       	cpc	r23, r1
    1740:	31 f4       	brne	.+12     	; 0x174e <VL53L0X::getVcselPulsePeriod(VL53L0X::vcselPeriodType)+0x12>
    1742:	60 e5       	ldi	r22, 0x50	; 80
    1744:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	88 0f       	add	r24, r24
    174c:	08 95       	ret
    174e:	61 30       	cpi	r22, 0x01	; 1
    1750:	71 05       	cpc	r23, r1
    1752:	11 f4       	brne	.+4      	; 0x1758 <VL53L0X::getVcselPulsePeriod(VL53L0X::vcselPeriodType)+0x1c>
    1754:	60 e7       	ldi	r22, 0x70	; 112
    1756:	f6 cf       	rjmp	.-20     	; 0x1744 <VL53L0X::getVcselPulsePeriod(VL53L0X::vcselPeriodType)+0x8>
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	08 95       	ret

0000175c <VL53L0X::startContinuous(unsigned long)>:
_ZN7VL53L0X15startContinuousEm():
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	6a 01       	movw	r12, r20
    176c:	7b 01       	movw	r14, r22
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	60 e8       	ldi	r22, 0x80	; 128
    1772:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	6f ef       	ldi	r22, 0xFF	; 255
    177a:	ce 01       	movw	r24, r28
    177c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	ce 01       	movw	r24, r28
    1786:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    178a:	49 85       	ldd	r20, Y+9	; 0x09
    178c:	61 e9       	ldi	r22, 0x91	; 145
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	60 e8       	ldi	r22, 0x80	; 128
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    17b2:	42 e0       	ldi	r20, 0x02	; 2
    17b4:	c1 14       	cp	r12, r1
    17b6:	d1 04       	cpc	r13, r1
    17b8:	e1 04       	cpc	r14, r1
    17ba:	f1 04       	cpc	r15, r1
    17bc:	a1 f0       	breq	.+40     	; 0x17e6 <VL53L0X::startContinuous(unsigned long)+0x8a>
    17be:	68 ef       	ldi	r22, 0xF8	; 248
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <VL53L0X::readReg16Bit(unsigned char)>
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	39 f0       	breq	.+14     	; 0x17d8 <VL53L0X::startContinuous(unsigned long)+0x7c>
    17ca:	dc 01       	movw	r26, r24
    17cc:	a7 01       	movw	r20, r14
    17ce:	96 01       	movw	r18, r12
    17d0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    17d4:	6b 01       	movw	r12, r22
    17d6:	7c 01       	movw	r14, r24
    17d8:	a7 01       	movw	r20, r14
    17da:	96 01       	movw	r18, r12
    17dc:	64 e0       	ldi	r22, 0x04	; 4
    17de:	ce 01       	movw	r24, r28
    17e0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <VL53L0X::writeReg32Bit(unsigned char, unsigned long)>
    17e4:	44 e0       	ldi	r20, 0x04	; 4
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>

000017fa <VL53L0X::readRangeContinuousMillimeters()>:
_ZN7VL53L0X30readRangeContinuousMillimetersEv():
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    1808:	78 87       	std	Y+8, r23	; 0x08
    180a:	6f 83       	std	Y+7, r22	; 0x07
    180c:	63 e1       	ldi	r22, 0x13	; 19
    180e:	ce 01       	movw	r24, r28
    1810:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1814:	87 70       	andi	r24, 0x07	; 7
    1816:	c9 f4       	brne	.+50     	; 0x184a <VL53L0X::readRangeContinuousMillimeters()+0x50>
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9d 81       	ldd	r25, Y+5	; 0x05
    181c:	89 2b       	or	r24, r25
    181e:	b1 f3       	breq	.-20     	; 0x180c <VL53L0X::readRangeContinuousMillimeters()+0x12>
    1820:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    1824:	2f 81       	ldd	r18, Y+7	; 0x07
    1826:	38 85       	ldd	r19, Y+8	; 0x08
    1828:	62 1b       	sub	r22, r18
    182a:	73 0b       	sbc	r23, r19
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	86 17       	cp	r24, r22
    1832:	97 07       	cpc	r25, r23
    1834:	58 f7       	brcc	.-42     	; 0x180c <VL53L0X::readRangeContinuousMillimeters()+0x12>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	8e 83       	std	Y+6, r24	; 0x06
    183a:	0f ef       	ldi	r16, 0xFF	; 255
    183c:	1f ef       	ldi	r17, 0xFF	; 255
    183e:	c8 01       	movw	r24, r16
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret
    184a:	6e e1       	ldi	r22, 0x1E	; 30
    184c:	ce 01       	movw	r24, r28
    184e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <VL53L0X::readReg16Bit(unsigned char)>
    1852:	8c 01       	movw	r16, r24
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	6b e0       	ldi	r22, 0x0B	; 11
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
    185e:	ef cf       	rjmp	.-34     	; 0x183e <VL53L0X::readRangeContinuousMillimeters()+0x44>

00001860 <VL53L0X::getSpadInfo(unsigned char*, bool*)>:
_ZN7VL53L0X11getSpadInfoEPhPb():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:878

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    186e:	7b 01       	movw	r14, r22
    1870:	8a 01       	movw	r16, r20
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:881
  uint8_t tmp;

  writeReg(0x80, 0x01);
    1872:	41 e0       	ldi	r20, 0x01	; 1
    1874:	60 e8       	ldi	r22, 0x80	; 128
    1876:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:882
  writeReg(0xFF, 0x01);
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	6f ef       	ldi	r22, 0xFF	; 255
    187e:	ce 01       	movw	r24, r28
    1880:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:883
  writeReg(0x00, 0x00);
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:885

  writeReg(0xFF, 0x06);
    188e:	46 e0       	ldi	r20, 0x06	; 6
    1890:	6f ef       	ldi	r22, 0xFF	; 255
    1892:	ce 01       	movw	r24, r28
    1894:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:886
  writeReg(0x83, readReg(0x83) | 0x04);
    1898:	63 e8       	ldi	r22, 0x83	; 131
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    18a0:	48 2f       	mov	r20, r24
    18a2:	44 60       	ori	r20, 0x04	; 4
    18a4:	63 e8       	ldi	r22, 0x83	; 131
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:887
  writeReg(0xFF, 0x07);
    18ac:	47 e0       	ldi	r20, 0x07	; 7
    18ae:	6f ef       	ldi	r22, 0xFF	; 255
    18b0:	ce 01       	movw	r24, r28
    18b2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:888
  writeReg(0x81, 0x01);
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	61 e8       	ldi	r22, 0x81	; 129
    18ba:	ce 01       	movw	r24, r28
    18bc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:890

  writeReg(0x80, 0x01);
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	60 e8       	ldi	r22, 0x80	; 128
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:892

  writeReg(0x94, 0x6b);
    18ca:	4b e6       	ldi	r20, 0x6B	; 107
    18cc:	64 e9       	ldi	r22, 0x94	; 148
    18ce:	ce 01       	movw	r24, r28
    18d0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:893
  writeReg(0x83, 0x00);
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	63 e8       	ldi	r22, 0x83	; 131
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:894
  startTimeout();
    18de:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    18e2:	78 87       	std	Y+8, r23	; 0x08
    18e4:	6f 83       	std	Y+7, r22	; 0x07
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:895
  while (readReg(0x83) == 0x00)
    18e6:	63 e8       	ldi	r22, 0x83	; 131
    18e8:	ce 01       	movw	r24, r28
    18ea:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    18ee:	81 11       	cpse	r24, r1
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <VL53L0X::getSpadInfo(unsigned char*, bool*)+0xb4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:897
  {
    if (checkTimeoutExpired()) { return false; }
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	9d 81       	ldd	r25, Y+5	; 0x05
    18f6:	89 2b       	or	r24, r25
    18f8:	b1 f3       	breq	.-20     	; 0x18e6 <VL53L0X::getSpadInfo(unsigned char*, bool*)+0x86>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:897 (discriminator 1)
    18fa:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    18fe:	2f 81       	ldd	r18, Y+7	; 0x07
    1900:	38 85       	ldd	r19, Y+8	; 0x08
    1902:	62 1b       	sub	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	86 17       	cp	r24, r22
    190c:	97 07       	cpc	r25, r23
    190e:	58 f7       	brcc	.-42     	; 0x18e6 <VL53L0X::getSpadInfo(unsigned char*, bool*)+0x86>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:897
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	3b c0       	rjmp	.+118    	; 0x198a <VL53L0X::getSpadInfo(unsigned char*, bool*)+0x12a>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:899
  }
  writeReg(0x83, 0x01);
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	63 e8       	ldi	r22, 0x83	; 131
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:900
  tmp = readReg(0x92);
    191e:	62 e9       	ldi	r22, 0x92	; 146
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:902

  *count = tmp & 0x7f;
    1926:	98 2f       	mov	r25, r24
    1928:	9f 77       	andi	r25, 0x7F	; 127
    192a:	f7 01       	movw	r30, r14
    192c:	90 83       	st	Z, r25
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:903
  *type_is_aperture = (tmp >> 7) & 0x01;
    192e:	88 1f       	adc	r24, r24
    1930:	88 27       	eor	r24, r24
    1932:	88 1f       	adc	r24, r24
    1934:	f8 01       	movw	r30, r16
    1936:	80 83       	st	Z, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:905

  writeReg(0x81, 0x00);
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	61 e8       	ldi	r22, 0x81	; 129
    193c:	ce 01       	movw	r24, r28
    193e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:906
  writeReg(0xFF, 0x06);
    1942:	46 e0       	ldi	r20, 0x06	; 6
    1944:	6f ef       	ldi	r22, 0xFF	; 255
    1946:	ce 01       	movw	r24, r28
    1948:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:907
  writeReg(0x83, readReg(0x83)  & ~0x04);
    194c:	63 e8       	ldi	r22, 0x83	; 131
    194e:	ce 01       	movw	r24, r28
    1950:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1954:	48 2f       	mov	r20, r24
    1956:	4b 7f       	andi	r20, 0xFB	; 251
    1958:	63 e8       	ldi	r22, 0x83	; 131
    195a:	ce 01       	movw	r24, r28
    195c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:908
  writeReg(0xFF, 0x01);
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	6f ef       	ldi	r22, 0xFF	; 255
    1964:	ce 01       	movw	r24, r28
    1966:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:909
  writeReg(0x00, 0x01);
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	ce 01       	movw	r24, r28
    1970:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:911

  writeReg(0xFF, 0x00);
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:912
  writeReg(0x80, 0x00);
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	60 e8       	ldi	r22, 0x80	; 128
    1982:	ce 01       	movw	r24, r28
    1984:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:914

  return true;
    1988:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:915
}
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	08 95       	ret

00001998 <VL53L0X::getSequenceStepEnables(VL53L0X::SequenceStepEnables*)>:
_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:920

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	eb 01       	movw	r28, r22
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:921
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:923

  enables->tcc          = (sequence_config >> 4) & 0x1;
    19a4:	84 fb       	bst	r24, 4
    19a6:	99 27       	eor	r25, r25
    19a8:	90 f9       	bld	r25, 0
    19aa:	98 83       	st	Y, r25
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:924
  enables->dss          = (sequence_config >> 3) & 0x1;
    19ac:	83 fb       	bst	r24, 3
    19ae:	99 27       	eor	r25, r25
    19b0:	90 f9       	bld	r25, 0
    19b2:	9a 83       	std	Y+2, r25	; 0x02
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:925
  enables->msrc         = (sequence_config >> 2) & 0x1;
    19b4:	82 fb       	bst	r24, 2
    19b6:	99 27       	eor	r25, r25
    19b8:	90 f9       	bld	r25, 0
    19ba:	99 83       	std	Y+1, r25	; 0x01
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:926
  enables->pre_range    = (sequence_config >> 6) & 0x1;
    19bc:	86 fb       	bst	r24, 6
    19be:	99 27       	eor	r25, r25
    19c0:	90 f9       	bld	r25, 0
    19c2:	9b 83       	std	Y+3, r25	; 0x03
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:927
  enables->final_range  = (sequence_config >> 7) & 0x1;
    19c4:	88 1f       	adc	r24, r24
    19c6:	88 27       	eor	r24, r24
    19c8:	88 1f       	adc	r24, r24
    19ca:	8c 83       	std	Y+4, r24	; 0x04
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:928
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	08 95       	ret

000019d2 <VL53L0X::decodeTimeout(unsigned int)>:
_ZN7VL53L0X13decodeTimeoutEj():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:971
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint16_t reg_val)
{
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
    19d2:	9c 01       	movw	r18, r24
    19d4:	33 27       	eor	r19, r19
    19d6:	a9 01       	movw	r20, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <VL53L0X::decodeTimeout(unsigned int)+0xc>
    19da:	44 0f       	add	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	9a 95       	dec	r25
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <VL53L0X::decodeTimeout(unsigned int)+0x8>
    19e2:	ca 01       	movw	r24, r20
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:973
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
}
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	08 95       	ret

000019e8 <VL53L0X::encodeTimeout(unsigned long)>:
_ZN7VL53L0X13encodeTimeoutEm():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:978

// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:984
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
    19f0:	61 15       	cp	r22, r1
    19f2:	71 05       	cpc	r23, r1
    19f4:	81 05       	cpc	r24, r1
    19f6:	91 05       	cpc	r25, r1
    19f8:	f1 f0       	breq	.+60     	; 0x1a36 <VL53L0X::encodeTimeout(unsigned long)+0x4e>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:986
  {
    ls_byte = timeout_mclks - 1;
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	a1 09       	sbc	r26, r1
    1a02:	b1 09       	sbc	r27, r1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:982
uint16_t VL53L0X::encodeTimeout(uint32_t timeout_mclks)
{
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	20 e0       	ldi	r18, 0x00	; 0
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:988

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
    1a08:	6c 01       	movw	r12, r24
    1a0a:	7d 01       	movw	r14, r26
    1a0c:	cc 24       	eor	r12, r12
    1a0e:	cd 28       	or	r12, r13
    1a10:	ce 28       	or	r12, r14
    1a12:	cf 28       	or	r12, r15
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <VL53L0X::encodeTimeout(unsigned long)+0x3c>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:990
    {
      ls_byte >>= 1;
    1a16:	b6 95       	lsr	r27
    1a18:	a7 95       	ror	r26
    1a1a:	97 95       	ror	r25
    1a1c:	87 95       	ror	r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:991
      ms_byte++;
    1a1e:	2f 5f       	subi	r18, 0xFF	; 255
    1a20:	3f 4f       	sbci	r19, 0xFF	; 255
    1a22:	f2 cf       	rjmp	.-28     	; 0x1a08 <VL53L0X::encodeTimeout(unsigned long)+0x20>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:994
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
    1a24:	32 2f       	mov	r19, r18
    1a26:	22 27       	eor	r18, r18
    1a28:	82 2b       	or	r24, r18
    1a2a:	93 2b       	or	r25, r19
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:997
  }
  else { return 0; }
}
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	08 95       	ret
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:996
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
  }
  else { return 0; }
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	f8 cf       	rjmp	.-16     	; 0x1a2c <VL53L0X::encodeTimeout(unsigned long)+0x44>

00001a3c <VL53L0X::timeoutMclksToMicroseconds(unsigned int, unsigned char)>:
_ZN7VL53L0X26timeoutMclksToMicrosecondsEjh():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1002
}

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	ec 01       	movw	r28, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1003
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
    1a4a:	a6 2f       	mov	r26, r22
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f e2       	ldi	r19, 0x2F	; 47
    1a52:	4a e3       	ldi	r20, 0x3A	; 58
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    1a5a:	6c 50       	subi	r22, 0x0C	; 12
    1a5c:	7e 4f       	sbci	r23, 0xFE	; 254
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	28 ee       	ldi	r18, 0xE8	; 232
    1a64:	c2 2e       	mov	r12, r18
    1a66:	23 e0       	ldi	r18, 0x03	; 3
    1a68:	d2 2e       	mov	r13, r18
    1a6a:	e1 2c       	mov	r14, r1
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	a7 01       	movw	r20, r14
    1a70:	96 01       	movw	r18, r12
    1a72:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1005

  return ((timeout_period_mclks * macro_period_ns) + 500) / 1000;
    1a76:	de 01       	movw	r26, r28
    1a78:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    1a7c:	6c 50       	subi	r22, 0x0C	; 12
    1a7e:	7e 4f       	sbci	r23, 0xFE	; 254
    1a80:	8f 4f       	sbci	r24, 0xFF	; 255
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	a7 01       	movw	r20, r14
    1a86:	96 01       	movw	r18, r12
    1a88:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1006
}
    1a8c:	ca 01       	movw	r24, r20
    1a8e:	b9 01       	movw	r22, r18
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	cf 90       	pop	r12
    1a9c:	08 95       	ret

00001a9e <VL53L0X::getSequenceStepTimeouts(VL53L0X::SequenceStepEnables const*, VL53L0X::SequenceStepTimeouts*)>:
_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:935
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	8c 01       	movw	r16, r24
    1aac:	7b 01       	movw	r14, r22
    1aae:	ea 01       	movw	r28, r20
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:936
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	0e 94 9e 0b 	call	0x173c	; 0x173c <VL53L0X::getVcselPulsePeriod(VL53L0X::vcselPeriodType)>
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	99 83       	std	Y+1, r25	; 0x01
    1abc:	88 83       	st	Y, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:938

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
    1abe:	66 e4       	ldi	r22, 0x46	; 70
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	9d 83       	std	Y+5, r25	; 0x05
    1acc:	8c 83       	std	Y+4, r24	; 0x04
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:940
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
    1ace:	68 81       	ld	r22, Y
    1ad0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <VL53L0X::timeoutMclksToMicroseconds(unsigned int, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:939
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    1ad4:	6a 87       	std	Y+10, r22	; 0x0a
    1ad6:	7b 87       	std	Y+11, r23	; 0x0b
    1ad8:	8c 87       	std	Y+12, r24	; 0x0c
    1ada:	9d 87       	std	Y+13, r25	; 0x0d
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:944
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    1adc:	61 e5       	ldi	r22, 0x51	; 81
    1ade:	c8 01       	movw	r24, r16
    1ae0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <VL53L0X::readReg16Bit(unsigned char)>
    1ae4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <VL53L0X::decodeTimeout(unsigned int)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:943
  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    1ae8:	9f 83       	std	Y+7, r25	; 0x07
    1aea:	8e 83       	std	Y+6, r24	; 0x06
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:946
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
    1aec:	68 81       	ld	r22, Y
    1aee:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <VL53L0X::timeoutMclksToMicroseconds(unsigned int, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:945
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    1af2:	6e 87       	std	Y+14, r22	; 0x0e
    1af4:	7f 87       	std	Y+15, r23	; 0x0f
    1af6:	88 8b       	std	Y+16, r24	; 0x10
    1af8:	99 8b       	std	Y+17, r25	; 0x11
_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:750
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
  }
  else if (type == VcselPeriodFinalRange)
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
    1afa:	60 e7       	ldi	r22, 0x70	; 112
    1afc:	c8 01       	movw	r24, r16
    1afe:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	88 0f       	add	r24, r24
_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:949
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9b 83       	std	Y+3, r25	; 0x03
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:952

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    1b0c:	61 e7       	ldi	r22, 0x71	; 113
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <VL53L0X::readReg16Bit(unsigned char)>
    1b14:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <VL53L0X::decodeTimeout(unsigned int)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:951
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);

  timeouts->final_range_mclks =
    1b18:	99 87       	std	Y+9, r25	; 0x09
    1b1a:	88 87       	std	Y+8, r24	; 0x08
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:954
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));

  if (enables->pre_range)
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	23 81       	ldd	r18, Z+3	; 0x03
    1b20:	22 23       	and	r18, r18
    1b22:	31 f0       	breq	.+12     	; 0x1b30 <VL53L0X::getSequenceStepTimeouts(VL53L0X::SequenceStepEnables const*, VL53L0X::SequenceStepTimeouts*)+0x92>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:956
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	82 1b       	sub	r24, r18
    1b2a:	93 0b       	sbc	r25, r19
    1b2c:	99 87       	std	Y+9, r25	; 0x09
    1b2e:	88 87       	std	Y+8, r24	; 0x08
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:960
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
    1b30:	6a 81       	ldd	r22, Y+2	; 0x02
    1b32:	88 85       	ldd	r24, Y+8	; 0x08
    1b34:	99 85       	ldd	r25, Y+9	; 0x09
    1b36:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <VL53L0X::timeoutMclksToMicroseconds(unsigned int, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:959
  if (enables->pre_range)
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
  }

  timeouts->final_range_us =
    1b3a:	6a 8b       	std	Y+18, r22	; 0x12
    1b3c:	7b 8b       	std	Y+19, r23	; 0x13
    1b3e:	8c 8b       	std	Y+20, r24	; 0x14
    1b40:	9d 8b       	std	Y+21, r25	; 0x15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:962
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
                               timeouts->final_range_vcsel_period_pclks);
}
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	08 95       	ret

00001b50 <VL53L0X::getMeasurementTimingBudget()>:
_ZN7VL53L0X26getMeasurementTimingBudgetEv():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:512

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget()
{
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	6b 97       	sbiw	r28, 0x1b	; 27
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	8c 01       	movw	r16, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:527
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
    1b72:	be 01       	movw	r22, r28
    1b74:	69 5e       	subi	r22, 0xE9	; 233
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	0e 94 cc 0c 	call	0x1998	; 0x1998 <VL53L0X::getSequenceStepEnables(VL53L0X::SequenceStepEnables*)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:528
  getSequenceStepTimeouts(&enables, &timeouts);
    1b7c:	ae 01       	movw	r20, r28
    1b7e:	4f 5f       	subi	r20, 0xFF	; 255
    1b80:	5f 4f       	sbci	r21, 0xFF	; 255
    1b82:	be 01       	movw	r22, r28
    1b84:	69 5e       	subi	r22, 0xE9	; 233
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	c8 01       	movw	r24, r16
    1b8a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <VL53L0X::getSequenceStepTimeouts(VL53L0X::SequenceStepEnables const*, VL53L0X::SequenceStepTimeouts*)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:530

  if (enables.tcc)
    1b8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b90:	88 23       	and	r24, r24
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <VL53L0X::getMeasurementTimingBudget()+0x46>
    1b94:	54 c0       	rjmp	.+168    	; 0x1c3e <VL53L0X::getMeasurementTimingBudget()+0xee>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:532
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	6c 57       	subi	r22, 0x7C	; 124
    1ba0:	72 4f       	sbci	r23, 0xF2	; 242
    1ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba4:	9f 4f       	sbci	r25, 0xFF	; 255
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:535
  }

  if (enables.dss)
    1ba6:	29 8d       	ldd	r18, Y+25	; 0x19
    1ba8:	22 23       	and	r18, r18
    1baa:	09 f4       	brne	.+2      	; 0x1bae <VL53L0X::getMeasurementTimingBudget()+0x5e>
    1bac:	4d c0       	rjmp	.+154    	; 0x1c48 <VL53L0X::getMeasurementTimingBudget()+0xf8>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:537
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    1bae:	cb 84       	ldd	r12, Y+11	; 0x0b
    1bb0:	dc 84       	ldd	r13, Y+12	; 0x0c
    1bb2:	ed 84       	ldd	r14, Y+13	; 0x0d
    1bb4:	fe 84       	ldd	r15, Y+14	; 0x0e
    1bb6:	22 eb       	ldi	r18, 0xB2	; 178
    1bb8:	c2 0e       	add	r12, r18
    1bba:	22 e0       	ldi	r18, 0x02	; 2
    1bbc:	d2 1e       	adc	r13, r18
    1bbe:	e1 1c       	adc	r14, r1
    1bc0:	f1 1c       	adc	r15, r1
    1bc2:	cc 0c       	add	r12, r12
    1bc4:	dd 1c       	adc	r13, r13
    1bc6:	ee 1c       	adc	r14, r14
    1bc8:	ff 1c       	adc	r15, r15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:541
  }
  else if (enables.msrc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1bca:	6c 0d       	add	r22, r12
    1bcc:	7d 1d       	adc	r23, r13
    1bce:	8e 1d       	adc	r24, r14
    1bd0:	9f 1d       	adc	r25, r15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:544
  }

  if (enables.pre_range)
    1bd2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1bd4:	22 23       	and	r18, r18
    1bd6:	71 f0       	breq	.+28     	; 0x1bf4 <VL53L0X::getMeasurementTimingBudget()+0xa4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:546
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    1bd8:	cf 84       	ldd	r12, Y+15	; 0x0f
    1bda:	d8 88       	ldd	r13, Y+16	; 0x10
    1bdc:	e9 88       	ldd	r14, Y+17	; 0x11
    1bde:	fa 88       	ldd	r15, Y+18	; 0x12
    1be0:	f4 e9       	ldi	r31, 0x94	; 148
    1be2:	cf 0e       	add	r12, r31
    1be4:	f2 e0       	ldi	r31, 0x02	; 2
    1be6:	df 1e       	adc	r13, r31
    1be8:	e1 1c       	adc	r14, r1
    1bea:	f1 1c       	adc	r15, r1
    1bec:	6c 0d       	add	r22, r12
    1bee:	7d 1d       	adc	r23, r13
    1bf0:	8e 1d       	adc	r24, r14
    1bf2:	9f 1d       	adc	r25, r15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:549
  }

  if (enables.final_range)
    1bf4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1bf6:	22 23       	and	r18, r18
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <VL53L0X::getMeasurementTimingBudget()+0xc6>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:551
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
    1bfa:	cb 88       	ldd	r12, Y+19	; 0x13
    1bfc:	dc 88       	ldd	r13, Y+20	; 0x14
    1bfe:	ed 88       	ldd	r14, Y+21	; 0x15
    1c00:	fe 88       	ldd	r15, Y+22	; 0x16
    1c02:	26 e2       	ldi	r18, 0x26	; 38
    1c04:	c2 0e       	add	r12, r18
    1c06:	22 e0       	ldi	r18, 0x02	; 2
    1c08:	d2 1e       	adc	r13, r18
    1c0a:	e1 1c       	adc	r14, r1
    1c0c:	f1 1c       	adc	r15, r1
    1c0e:	6c 0d       	add	r22, r12
    1c10:	7d 1d       	adc	r23, r13
    1c12:	8e 1d       	adc	r24, r14
    1c14:	9f 1d       	adc	r25, r15
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:554
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
    1c16:	f8 01       	movw	r30, r16
    1c18:	62 87       	std	Z+10, r22	; 0x0a
    1c1a:	73 87       	std	Z+11, r23	; 0x0b
    1c1c:	84 87       	std	Z+12, r24	; 0x0c
    1c1e:	95 87       	std	Z+13, r25	; 0x0d
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:556
  return budget_us;
}
    1c20:	6b 96       	adiw	r28, 0x1b	; 27
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	de bf       	out	0x3e, r29	; 62
    1c28:	0f be       	out	0x3f, r0	; 63
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	df 90       	pop	r13
    1c3a:	cf 90       	pop	r12
    1c3c:	08 95       	ret
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:525
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
    1c3e:	66 e3       	ldi	r22, 0x36	; 54
    1c40:	7b e0       	ldi	r23, 0x0B	; 11
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	af cf       	rjmp	.-162    	; 0x1ba6 <VL53L0X::getMeasurementTimingBudget()+0x56>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:539

  if (enables.dss)
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
  }
  else if (enables.msrc)
    1c48:	28 8d       	ldd	r18, Y+24	; 0x18
    1c4a:	22 23       	and	r18, r18
    1c4c:	11 f2       	breq	.-124    	; 0x1bd2 <VL53L0X::getMeasurementTimingBudget()+0x82>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:541
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1c4e:	cb 84       	ldd	r12, Y+11	; 0x0b
    1c50:	dc 84       	ldd	r13, Y+12	; 0x0c
    1c52:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c54:	fe 84       	ldd	r15, Y+14	; 0x0e
    1c56:	e4 e9       	ldi	r30, 0x94	; 148
    1c58:	ce 0e       	add	r12, r30
    1c5a:	e2 e0       	ldi	r30, 0x02	; 2
    1c5c:	de 1e       	adc	r13, r30
    1c5e:	e1 1c       	adc	r14, r1
    1c60:	f1 1c       	adc	r15, r1
    1c62:	b3 cf       	rjmp	.-154    	; 0x1bca <VL53L0X::getMeasurementTimingBudget()+0x7a>

00001c64 <VL53L0X::timeoutMicrosecondsToMclks(unsigned long, unsigned char)>:
_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1011
}

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	4b 01       	movw	r8, r22
    1c76:	5c 01       	movw	r10, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1012
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
    1c78:	a4 2f       	mov	r26, r20
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f e2       	ldi	r19, 0x2F	; 47
    1c80:	4a e3       	ldi	r20, 0x3A	; 58
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    1c88:	6b 01       	movw	r12, r22
    1c8a:	7c 01       	movw	r14, r24
    1c8c:	24 ef       	ldi	r18, 0xF4	; 244
    1c8e:	c2 0e       	add	r12, r18
    1c90:	21 e0       	ldi	r18, 0x01	; 1
    1c92:	d2 1e       	adc	r13, r18
    1c94:	e1 1c       	adc	r14, r1
    1c96:	f1 1c       	adc	r15, r1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1014

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
    1c98:	a8 ee       	ldi	r26, 0xE8	; 232
    1c9a:	b3 e0       	ldi	r27, 0x03	; 3
    1c9c:	a5 01       	movw	r20, r10
    1c9e:	94 01       	movw	r18, r8
    1ca0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    1ca4:	4b 01       	movw	r8, r22
    1ca6:	5c 01       	movw	r10, r24
    1ca8:	c7 01       	movw	r24, r14
    1caa:	b6 01       	movw	r22, r12
    1cac:	20 ed       	ldi	r18, 0xD0	; 208
    1cae:	37 e0       	ldi	r19, 0x07	; 7
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
    1cb8:	82 0e       	add	r8, r18
    1cba:	93 1e       	adc	r9, r19
    1cbc:	a4 1e       	adc	r10, r20
    1cbe:	b5 1e       	adc	r11, r21
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1012

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
    1cc0:	c7 01       	movw	r24, r14
    1cc2:	b6 01       	movw	r22, r12
    1cc4:	28 ee       	ldi	r18, 0xE8	; 232
    1cc6:	33 e0       	ldi	r19, 0x03	; 3
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1014

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
    1cd0:	c5 01       	movw	r24, r10
    1cd2:	b4 01       	movw	r22, r8
    1cd4:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1015
}
    1cd8:	ca 01       	movw	r24, r20
    1cda:	b9 01       	movw	r22, r18
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	bf 90       	pop	r11
    1ce6:	af 90       	pop	r10
    1ce8:	9f 90       	pop	r9
    1cea:	8f 90       	pop	r8
    1cec:	08 95       	ret

00001cee <VL53L0X::setMeasurementTimingBudget(unsigned long)>:
_ZN7VL53L0X26setMeasurementTimingBudgetEm():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:427
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
    1cee:	af 92       	push	r10
    1cf0:	bf 92       	push	r11
    1cf2:	cf 92       	push	r12
    1cf4:	df 92       	push	r13
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	6b 97       	sbiw	r28, 0x1b	; 27
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	8c 01       	movw	r16, r24
    1d14:	6a 01       	movw	r12, r20
    1d16:	7b 01       	movw	r14, r22
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:441
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
    1d18:	be 01       	movw	r22, r28
    1d1a:	69 5e       	subi	r22, 0xE9	; 233
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <VL53L0X::getSequenceStepEnables(VL53L0X::SequenceStepEnables*)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:442
  getSequenceStepTimeouts(&enables, &timeouts);
    1d22:	ae 01       	movw	r20, r28
    1d24:	4f 5f       	subi	r20, 0xFF	; 255
    1d26:	5f 4f       	sbci	r21, 0xFF	; 255
    1d28:	be 01       	movw	r22, r28
    1d2a:	69 5e       	subi	r22, 0xE9	; 233
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	c8 01       	movw	r24, r16
    1d30:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <VL53L0X::getSequenceStepTimeouts(VL53L0X::SequenceStepEnables const*, VL53L0X::SequenceStepTimeouts*)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:444

  if (enables.tcc)
    1d34:	8f 89       	ldd	r24, Y+23	; 0x17
    1d36:	88 23       	and	r24, r24
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x4e>
    1d3a:	6a c0       	rjmp	.+212    	; 0x1e10 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x122>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:446
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    1d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d40:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d42:	be 85       	ldd	r27, Y+14	; 0x0e
    1d44:	8c 57       	subi	r24, 0x7C	; 124
    1d46:	92 4f       	sbci	r25, 0xF2	; 242
    1d48:	af 4f       	sbci	r26, 0xFF	; 255
    1d4a:	bf 4f       	sbci	r27, 0xFF	; 255
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:449
  }

  if (enables.dss)
    1d4c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d4e:	22 23       	and	r18, r18
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x66>
    1d52:	63 c0       	rjmp	.+198    	; 0x1e1a <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x12c>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:451
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    1d54:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d56:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d58:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d5a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d5c:	4e 54       	subi	r20, 0x4E	; 78
    1d5e:	5d 4f       	sbci	r21, 0xFD	; 253
    1d60:	6f 4f       	sbci	r22, 0xFF	; 255
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	44 0f       	add	r20, r20
    1d66:	55 1f       	adc	r21, r21
    1d68:	66 1f       	adc	r22, r22
    1d6a:	77 1f       	adc	r23, r23
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:455
  }
  else if (enables.msrc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1d6c:	84 0f       	add	r24, r20
    1d6e:	95 1f       	adc	r25, r21
    1d70:	a6 1f       	adc	r26, r22
    1d72:	b7 1f       	adc	r27, r23
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:458
  }

  if (enables.pre_range)
    1d74:	aa 8c       	ldd	r10, Y+26	; 0x1a
    1d76:	aa 20       	and	r10, r10
    1d78:	61 f0       	breq	.+24     	; 0x1d92 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xa4>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:460
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    1d7a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1d7c:	58 89       	ldd	r21, Y+16	; 0x10
    1d7e:	69 89       	ldd	r22, Y+17	; 0x11
    1d80:	7a 89       	ldd	r23, Y+18	; 0x12
    1d82:	4c 56       	subi	r20, 0x6C	; 108
    1d84:	5d 4f       	sbci	r21, 0xFD	; 253
    1d86:	6f 4f       	sbci	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	84 0f       	add	r24, r20
    1d8c:	95 1f       	adc	r25, r21
    1d8e:	a6 1f       	adc	r26, r22
    1d90:	b7 1f       	adc	r27, r23
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:463
  }

  if (enables.final_range)
    1d92:	bb 8c       	ldd	r11, Y+27	; 0x1b
    1d94:	bb 20       	and	r11, r11
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xac>
    1d98:	4d c0       	rjmp	.+154    	; 0x1e34 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x146>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:465
  {
    used_budget_us += FinalRangeOverhead;
    1d9a:	8a 5d       	subi	r24, 0xDA	; 218
    1d9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1d9e:	af 4f       	sbci	r26, 0xFF	; 255
    1da0:	bf 4f       	sbci	r27, 0xFF	; 255
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:473
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
    1da2:	c8 16       	cp	r12, r24
    1da4:	d9 06       	cpc	r13, r25
    1da6:	ea 06       	cpc	r14, r26
    1da8:	fb 06       	cpc	r15, r27
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xc0>
    1dac:	46 c0       	rjmp	.+140    	; 0x1e3a <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x14c>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:479
    {
      // "Requested timeout too big."
      return false;
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
    1dae:	a7 01       	movw	r20, r14
    1db0:	96 01       	movw	r18, r12
    1db2:	28 1b       	sub	r18, r24
    1db4:	39 0b       	sbc	r19, r25
    1db6:	4a 0b       	sbc	r20, r26
    1db8:	5b 0b       	sbc	r21, r27
    1dba:	ca 01       	movw	r24, r20
    1dbc:	b9 01       	movw	r22, r18
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:491
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint32_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
    1dbe:	4b 81       	ldd	r20, Y+3	; 0x03
    1dc0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <VL53L0X::timeoutMicrosecondsToMclks(unsigned long, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:493

    if (enables.pre_range)
    1dc4:	aa 20       	and	r10, r10
    1dc6:	31 f0       	breq	.+12     	; 0x1dd4 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xe6>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:495
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
    1dc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1dca:	38 85       	ldd	r19, Y+8	; 0x08
    1dcc:	62 0f       	add	r22, r18
    1dce:	73 1f       	adc	r23, r19
    1dd0:	81 1d       	adc	r24, r1
    1dd2:	91 1d       	adc	r25, r1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:498
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
    1dd4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <VL53L0X::encodeTimeout(unsigned long)>
    1dd8:	ac 01       	movw	r20, r24
    1dda:	61 e7       	ldi	r22, 0x71	; 113
    1ddc:	c8 01       	movw	r24, r16
    1dde:	0e 94 2c 0a 	call	0x1458	; 0x1458 <VL53L0X::writeReg16Bit(unsigned char, unsigned int)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:503
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
    1de2:	f8 01       	movw	r30, r16
    1de4:	c2 86       	std	Z+10, r12	; 0x0a
    1de6:	d3 86       	std	Z+11, r13	; 0x0b
    1de8:	e4 86       	std	Z+12, r14	; 0x0c
    1dea:	f5 86       	std	Z+13, r15	; 0x0d
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:506
  }
  return true;
}
    1dec:	8b 2d       	mov	r24, r11
    1dee:	6b 96       	adiw	r28, 0x1b	; 27
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	df 90       	pop	r13
    1e08:	cf 90       	pop	r12
    1e0a:	bf 90       	pop	r11
    1e0c:	af 90       	pop	r10
    1e0e:	08 95       	ret
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:439
  uint16_t const TccOverhead        = 590;
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t used_budget_us = StartOverhead + EndOverhead;
    1e10:	86 e3       	ldi	r24, 0x36	; 54
    1e12:	9b e0       	ldi	r25, 0x0B	; 11
    1e14:	a0 e0       	ldi	r26, 0x00	; 0
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	99 cf       	rjmp	.-206    	; 0x1d4c <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x5e>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:453

  if (enables.dss)
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
  }
  else if (enables.msrc)
    1e1a:	28 8d       	ldd	r18, Y+24	; 0x18
    1e1c:	22 23       	and	r18, r18
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x134>
    1e20:	a9 cf       	rjmp	.-174    	; 0x1d74 <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x86>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:455
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1e22:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e24:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e26:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e28:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e2a:	4c 56       	subi	r20, 0x6C	; 108
    1e2c:	5d 4f       	sbci	r21, 0xFD	; 253
    1e2e:	6f 4f       	sbci	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	9c cf       	rjmp	.-200    	; 0x1d6c <VL53L0X::setMeasurementTimingBudget(unsigned long)+0x7e>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:505

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
    1e34:	bb 24       	eor	r11, r11
    1e36:	b3 94       	inc	r11
    1e38:	d9 cf       	rjmp	.-78     	; 0x1dec <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xfe>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:476
    // the final range."

    if (used_budget_us > budget_us)
    {
      // "Requested timeout too big."
      return false;
    1e3a:	b1 2c       	mov	r11, r1
    1e3c:	d7 cf       	rjmp	.-82     	; 0x1dec <VL53L0X::setMeasurementTimingBudget(unsigned long)+0xfe>

00001e3e <VL53L0X::performSingleRefCalibration(unsigned char)>:
_ZN7VL53L0X27performSingleRefCalibrationEh():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1020
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	ec 01       	movw	r28, r24
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1021
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
    1e44:	46 2f       	mov	r20, r22
    1e46:	41 60       	ori	r20, 0x01	; 1
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1023

  startTimeout();
    1e4e:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    1e52:	78 87       	std	Y+8, r23	; 0x08
    1e54:	6f 83       	std	Y+7, r22	; 0x07
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1024
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    1e56:	63 e1       	ldi	r22, 0x13	; 19
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1e5e:	87 70       	andi	r24, 0x07	; 7
    1e60:	89 f4       	brne	.+34     	; 0x1e84 <VL53L0X::performSingleRefCalibration(unsigned char)+0x46>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1026
  {
    if (checkTimeoutExpired()) { return false; }
    1e62:	8c 81       	ldd	r24, Y+4	; 0x04
    1e64:	9d 81       	ldd	r25, Y+5	; 0x05
    1e66:	89 2b       	or	r24, r25
    1e68:	b1 f3       	breq	.-20     	; 0x1e56 <VL53L0X::performSingleRefCalibration(unsigned char)+0x18>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1026 (discriminator 1)
    1e6a:	0e 94 ab 18 	call	0x3156	; 0x3156 <millis>
    1e6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e70:	38 85       	ldd	r19, Y+8	; 0x08
    1e72:	62 1b       	sub	r22, r18
    1e74:	73 0b       	sbc	r23, r19
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	86 17       	cp	r24, r22
    1e7c:	97 07       	cpc	r25, r23
    1e7e:	58 f7       	brcc	.-42     	; 0x1e56 <VL53L0X::performSingleRefCalibration(unsigned char)+0x18>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1026
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	0b c0       	rjmp	.+22     	; 0x1e9a <VL53L0X::performSingleRefCalibration(unsigned char)+0x5c>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1029
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	6b e0       	ldi	r22, 0x0B	; 11
    1e88:	ce 01       	movw	r24, r28
    1e8a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1031

  writeReg(SYSRANGE_START, 0x00);
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	ce 01       	movw	r24, r28
    1e94:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1033

  return true;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:1034
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <VL53L0X::init(bool)>:
_ZN7VL53L0X4initEb():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:62
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <VL53L0X::init(bool)+0xe>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <VL53L0X::init(bool)+0x10>
    1eb0:	1f 92       	push	r1
    1eb2:	1f 92       	push	r1
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	8c 01       	movw	r16, r24
    1eba:	f6 2e       	mov	r15, r22
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:64
  // check model ID register (value specified in datasheet)
  if (readReg(IDENTIFICATION_MODEL_ID) != 0xEE) { return false; }
    1ebc:	60 ec       	ldi	r22, 0xC0	; 192
    1ebe:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1ec2:	8e 3e       	cpi	r24, 0xEE	; 238
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <VL53L0X::init(bool)+0x44>
    1ec6:	f1 2c       	mov	r15, r1
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:283
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);

  // VL53L0X_PerformRefCalibration() end

  return true;
}
    1ec8:	8f 2d       	mov	r24, r15
    1eca:	28 96       	adiw	r28, 0x08	; 8
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	08 95       	ret
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:69
  if (readReg(IDENTIFICATION_MODEL_ID) != 0xEE) { return false; }

  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
    1ee4:	ff 20       	and	r15, r15
    1ee6:	51 f0       	breq	.+20     	; 0x1efc <VL53L0X::init(bool)+0x5c>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:72
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
    1ee8:	69 e8       	ldi	r22, 0x89	; 137
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:71
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	41 60       	ori	r20, 0x01	; 1
    1ef4:	69 e8       	ldi	r22, 0x89	; 137
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:76
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	68 e8       	ldi	r22, 0x88	; 136
    1f00:	c8 01       	movw	r24, r16
    1f02:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:78

  writeReg(0x80, 0x01);
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	60 e8       	ldi	r22, 0x80	; 128
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:79
  writeReg(0xFF, 0x01);
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	6f ef       	ldi	r22, 0xFF	; 255
    1f14:	c8 01       	movw	r24, r16
    1f16:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:80
  writeReg(0x00, 0x00);
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	c8 01       	movw	r24, r16
    1f20:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:81
  stop_variable = readReg(0x91);
    1f24:	61 e9       	ldi	r22, 0x91	; 145
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	81 87       	std	Z+9, r24	; 0x09
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:82
  writeReg(0x00, 0x01);
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	c8 01       	movw	r24, r16
    1f36:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:83
  writeReg(0xFF, 0x00);
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	6f ef       	ldi	r22, 0xFF	; 255
    1f3e:	c8 01       	movw	r24, r16
    1f40:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:84
  writeReg(0x80, 0x00);
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	60 e8       	ldi	r22, 0x80	; 128
    1f48:	c8 01       	movw	r24, r16
    1f4a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:87

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
    1f4e:	60 e6       	ldi	r22, 0x60	; 96
    1f50:	c8 01       	movw	r24, r16
    1f52:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    1f56:	48 2f       	mov	r20, r24
    1f58:	42 61       	ori	r20, 0x12	; 18
    1f5a:	60 e6       	ldi	r22, 0x60	; 96
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
_ZN7VL53L0X18setSignalRateLimitEf():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:409
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	64 e4       	ldi	r22, 0x44	; 68
    1f68:	c8 01       	movw	r24, r16
    1f6a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <VL53L0X::writeReg16Bit(unsigned char, unsigned int)>
_ZN7VL53L0X4initEb():
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:92
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
    1f6e:	4f ef       	ldi	r20, 0xFF	; 255
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	c8 01       	movw	r24, r16
    1f74:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:100

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
    1f78:	ae 01       	movw	r20, r28
    1f7a:	49 5f       	subi	r20, 0xF9	; 249
    1f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7e:	be 01       	movw	r22, r28
    1f80:	68 5f       	subi	r22, 0xF8	; 248
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	c8 01       	movw	r24, r16
    1f86:	0e 94 30 0c 	call	0x1860	; 0x1860 <VL53L0X::getSpadInfo(unsigned char*, bool*)>
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <VL53L0X::init(bool)+0xf0>
    1f8e:	9b cf       	rjmp	.-202    	; 0x1ec6 <VL53L0X::init(bool)+0x26>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:106

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    1f90:	26 e0       	ldi	r18, 0x06	; 6
    1f92:	ae 01       	movw	r20, r28
    1f94:	4f 5f       	subi	r20, 0xFF	; 255
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	60 eb       	ldi	r22, 0xB0	; 176
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <VL53L0X::readMulti(unsigned char, unsigned char*, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:110

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	6f ef       	ldi	r22, 0xFF	; 255
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:111
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	6f e4       	ldi	r22, 0x4F	; 79
    1fae:	c8 01       	movw	r24, r16
    1fb0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:112
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
    1fb4:	4c e2       	ldi	r20, 0x2C	; 44
    1fb6:	6e e4       	ldi	r22, 0x4E	; 78
    1fb8:	c8 01       	movw	r24, r16
    1fba:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:113
  writeReg(0xFF, 0x00);
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	6f ef       	ldi	r22, 0xFF	; 255
    1fc2:	c8 01       	movw	r24, r16
    1fc4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:114
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
    1fc8:	44 eb       	ldi	r20, 0xB4	; 180
    1fca:	66 eb       	ldi	r22, 0xB6	; 182
    1fcc:	c8 01       	movw	r24, r16
    1fce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:116

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
    1fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd4:	ac e0       	ldi	r26, 0x0C	; 12
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <VL53L0X::init(bool)+0x13c>
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:121 (discriminator 4)
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    1fdc:	b8 85       	ldd	r27, Y+8	; 0x08
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:119 (discriminator 4)
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
    1fde:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:117 (discriminator 4)
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:125 (discriminator 4)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
    1fe2:	ee 24       	eor	r14, r14
    1fe4:	e3 94       	inc	r14
    1fe6:	f1 2c       	mov	r15, r1
    1fe8:	48 2f       	mov	r20, r24
    1fea:	46 95       	lsr	r20
    1fec:	46 95       	lsr	r20
    1fee:	46 95       	lsr	r20
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	2c 0f       	add	r18, r28
    1ff8:	3d 1f       	adc	r19, r29
    1ffa:	24 0f       	add	r18, r20
    1ffc:	35 1f       	adc	r19, r21
    1ffe:	f9 01       	movw	r30, r18
    2000:	20 81       	ld	r18, Z
    2002:	68 2f       	mov	r22, r24
    2004:	67 70       	andi	r22, 0x07	; 7
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:121
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    2006:	8a 17       	cp	r24, r26
    2008:	10 f0       	brcs	.+4      	; 0x200e <VL53L0X::init(bool)+0x16e>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:121 (discriminator 1)
    200a:	b9 13       	cpse	r27, r25
    200c:	f4 c1       	rjmp	.+1000   	; 0x23f6 <__stack+0x1f7>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:125
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
    200e:	e1 e0       	ldi	r30, 0x01	; 1
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	ec 0f       	add	r30, r28
    2014:	fd 1f       	adc	r31, r29
    2016:	4e 0f       	add	r20, r30
    2018:	5f 1f       	adc	r21, r31
    201a:	f7 01       	movw	r30, r14
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <VL53L0X::init(bool)+0x182>
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	6a 95       	dec	r22
    2024:	e2 f7       	brpl	.-8      	; 0x201e <VL53L0X::init(bool)+0x17e>
    2026:	bf 01       	movw	r22, r30
    2028:	60 95       	com	r22
    202a:	26 23       	and	r18, r22
    202c:	fa 01       	movw	r30, r20
    202e:	20 83       	st	Z, r18
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:119 (discriminator 2)
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	80 33       	cpi	r24, 0x30	; 48
    2034:	c9 f6       	brne	.-78     	; 0x1fe8 <VL53L0X::init(bool)+0x148>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:133
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    2036:	26 e0       	ldi	r18, 0x06	; 6
    2038:	ae 01       	movw	r20, r28
    203a:	4f 5f       	subi	r20, 0xFF	; 255
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	60 eb       	ldi	r22, 0xB0	; 176
    2040:	c8 01       	movw	r24, r16
    2042:	0e 94 24 0b 	call	0x1648	; 0x1648 <VL53L0X::writeMulti(unsigned char, unsigned char const*, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:140
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	6f ef       	ldi	r22, 0xFF	; 255
    204a:	c8 01       	movw	r24, r16
    204c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:141
  writeReg(0x00, 0x00);
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	c8 01       	movw	r24, r16
    2056:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:143

  writeReg(0xFF, 0x00);
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	6f ef       	ldi	r22, 0xFF	; 255
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:144
  writeReg(0x09, 0x00);
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	69 e0       	ldi	r22, 0x09	; 9
    2068:	c8 01       	movw	r24, r16
    206a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:145
  writeReg(0x10, 0x00);
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	60 e1       	ldi	r22, 0x10	; 16
    2072:	c8 01       	movw	r24, r16
    2074:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:146
  writeReg(0x11, 0x00);
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	61 e1       	ldi	r22, 0x11	; 17
    207c:	c8 01       	movw	r24, r16
    207e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:148

  writeReg(0x24, 0x01);
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	64 e2       	ldi	r22, 0x24	; 36
    2086:	c8 01       	movw	r24, r16
    2088:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:149
  writeReg(0x25, 0xFF);
    208c:	4f ef       	ldi	r20, 0xFF	; 255
    208e:	65 e2       	ldi	r22, 0x25	; 37
    2090:	c8 01       	movw	r24, r16
    2092:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:150
  writeReg(0x75, 0x00);
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	65 e7       	ldi	r22, 0x75	; 117
    209a:	c8 01       	movw	r24, r16
    209c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:152

  writeReg(0xFF, 0x01);
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	c8 01       	movw	r24, r16
    20a6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:153
  writeReg(0x4E, 0x2C);
    20aa:	4c e2       	ldi	r20, 0x2C	; 44
    20ac:	6e e4       	ldi	r22, 0x4E	; 78
    20ae:	c8 01       	movw	r24, r16
    20b0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:154
  writeReg(0x48, 0x00);
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	68 e4       	ldi	r22, 0x48	; 72
    20b8:	c8 01       	movw	r24, r16
    20ba:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:155
  writeReg(0x30, 0x20);
    20be:	40 e2       	ldi	r20, 0x20	; 32
    20c0:	60 e3       	ldi	r22, 0x30	; 48
    20c2:	c8 01       	movw	r24, r16
    20c4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:157

  writeReg(0xFF, 0x00);
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	6f ef       	ldi	r22, 0xFF	; 255
    20cc:	c8 01       	movw	r24, r16
    20ce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:158
  writeReg(0x30, 0x09);
    20d2:	49 e0       	ldi	r20, 0x09	; 9
    20d4:	60 e3       	ldi	r22, 0x30	; 48
    20d6:	c8 01       	movw	r24, r16
    20d8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:159
  writeReg(0x54, 0x00);
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	64 e5       	ldi	r22, 0x54	; 84
    20e0:	c8 01       	movw	r24, r16
    20e2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:160
  writeReg(0x31, 0x04);
    20e6:	44 e0       	ldi	r20, 0x04	; 4
    20e8:	61 e3       	ldi	r22, 0x31	; 49
    20ea:	c8 01       	movw	r24, r16
    20ec:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:161
  writeReg(0x32, 0x03);
    20f0:	43 e0       	ldi	r20, 0x03	; 3
    20f2:	62 e3       	ldi	r22, 0x32	; 50
    20f4:	c8 01       	movw	r24, r16
    20f6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:162
  writeReg(0x40, 0x83);
    20fa:	43 e8       	ldi	r20, 0x83	; 131
    20fc:	60 e4       	ldi	r22, 0x40	; 64
    20fe:	c8 01       	movw	r24, r16
    2100:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:163
  writeReg(0x46, 0x25);
    2104:	45 e2       	ldi	r20, 0x25	; 37
    2106:	66 e4       	ldi	r22, 0x46	; 70
    2108:	c8 01       	movw	r24, r16
    210a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:164
  writeReg(0x60, 0x00);
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	60 e6       	ldi	r22, 0x60	; 96
    2112:	c8 01       	movw	r24, r16
    2114:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:165
  writeReg(0x27, 0x00);
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	67 e2       	ldi	r22, 0x27	; 39
    211c:	c8 01       	movw	r24, r16
    211e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:166
  writeReg(0x50, 0x06);
    2122:	46 e0       	ldi	r20, 0x06	; 6
    2124:	60 e5       	ldi	r22, 0x50	; 80
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:167
  writeReg(0x51, 0x00);
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	61 e5       	ldi	r22, 0x51	; 81
    2130:	c8 01       	movw	r24, r16
    2132:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:168
  writeReg(0x52, 0x96);
    2136:	46 e9       	ldi	r20, 0x96	; 150
    2138:	62 e5       	ldi	r22, 0x52	; 82
    213a:	c8 01       	movw	r24, r16
    213c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:169
  writeReg(0x56, 0x08);
    2140:	48 e0       	ldi	r20, 0x08	; 8
    2142:	66 e5       	ldi	r22, 0x56	; 86
    2144:	c8 01       	movw	r24, r16
    2146:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:170
  writeReg(0x57, 0x30);
    214a:	40 e3       	ldi	r20, 0x30	; 48
    214c:	67 e5       	ldi	r22, 0x57	; 87
    214e:	c8 01       	movw	r24, r16
    2150:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:171
  writeReg(0x61, 0x00);
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	61 e6       	ldi	r22, 0x61	; 97
    2158:	c8 01       	movw	r24, r16
    215a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:172
  writeReg(0x62, 0x00);
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	62 e6       	ldi	r22, 0x62	; 98
    2162:	c8 01       	movw	r24, r16
    2164:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:173
  writeReg(0x64, 0x00);
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	64 e6       	ldi	r22, 0x64	; 100
    216c:	c8 01       	movw	r24, r16
    216e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:174
  writeReg(0x65, 0x00);
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	65 e6       	ldi	r22, 0x65	; 101
    2176:	c8 01       	movw	r24, r16
    2178:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:175
  writeReg(0x66, 0xA0);
    217c:	40 ea       	ldi	r20, 0xA0	; 160
    217e:	66 e6       	ldi	r22, 0x66	; 102
    2180:	c8 01       	movw	r24, r16
    2182:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:177

  writeReg(0xFF, 0x01);
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	6f ef       	ldi	r22, 0xFF	; 255
    218a:	c8 01       	movw	r24, r16
    218c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:178
  writeReg(0x22, 0x32);
    2190:	42 e3       	ldi	r20, 0x32	; 50
    2192:	62 e2       	ldi	r22, 0x22	; 34
    2194:	c8 01       	movw	r24, r16
    2196:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:179
  writeReg(0x47, 0x14);
    219a:	44 e1       	ldi	r20, 0x14	; 20
    219c:	67 e4       	ldi	r22, 0x47	; 71
    219e:	c8 01       	movw	r24, r16
    21a0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:180
  writeReg(0x49, 0xFF);
    21a4:	4f ef       	ldi	r20, 0xFF	; 255
    21a6:	69 e4       	ldi	r22, 0x49	; 73
    21a8:	c8 01       	movw	r24, r16
    21aa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:181
  writeReg(0x4A, 0x00);
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	6a e4       	ldi	r22, 0x4A	; 74
    21b2:	c8 01       	movw	r24, r16
    21b4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:183

  writeReg(0xFF, 0x00);
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	6f ef       	ldi	r22, 0xFF	; 255
    21bc:	c8 01       	movw	r24, r16
    21be:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:184
  writeReg(0x7A, 0x0A);
    21c2:	4a e0       	ldi	r20, 0x0A	; 10
    21c4:	6a e7       	ldi	r22, 0x7A	; 122
    21c6:	c8 01       	movw	r24, r16
    21c8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:185
  writeReg(0x7B, 0x00);
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	6b e7       	ldi	r22, 0x7B	; 123
    21d0:	c8 01       	movw	r24, r16
    21d2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:186
  writeReg(0x78, 0x21);
    21d6:	41 e2       	ldi	r20, 0x21	; 33
    21d8:	68 e7       	ldi	r22, 0x78	; 120
    21da:	c8 01       	movw	r24, r16
    21dc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:188

  writeReg(0xFF, 0x01);
    21e0:	41 e0       	ldi	r20, 0x01	; 1
    21e2:	6f ef       	ldi	r22, 0xFF	; 255
    21e4:	c8 01       	movw	r24, r16
    21e6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:189
  writeReg(0x23, 0x34);
    21ea:	44 e3       	ldi	r20, 0x34	; 52
    21ec:	63 e2       	ldi	r22, 0x23	; 35
    21ee:	c8 01       	movw	r24, r16
    21f0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:190
  writeReg(0x42, 0x00);
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	62 e4       	ldi	r22, 0x42	; 66
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:191
  writeReg(0x44, 0xFF);
    21fe:	4f ef       	ldi	r20, 0xFF	; 255
    2200:	64 e4       	ldi	r22, 0x44	; 68
    2202:	c8 01       	movw	r24, r16
    2204:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:192
  writeReg(0x45, 0x26);
    2208:	46 e2       	ldi	r20, 0x26	; 38
    220a:	65 e4       	ldi	r22, 0x45	; 69
    220c:	c8 01       	movw	r24, r16
    220e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:193
  writeReg(0x46, 0x05);
    2212:	45 e0       	ldi	r20, 0x05	; 5
    2214:	66 e4       	ldi	r22, 0x46	; 70
    2216:	c8 01       	movw	r24, r16
    2218:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:194
  writeReg(0x40, 0x40);
    221c:	40 e4       	ldi	r20, 0x40	; 64
    221e:	60 e4       	ldi	r22, 0x40	; 64
    2220:	c8 01       	movw	r24, r16
    2222:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:195
  writeReg(0x0E, 0x06);
    2226:	46 e0       	ldi	r20, 0x06	; 6
    2228:	6e e0       	ldi	r22, 0x0E	; 14
    222a:	c8 01       	movw	r24, r16
    222c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:196
  writeReg(0x20, 0x1A);
    2230:	4a e1       	ldi	r20, 0x1A	; 26
    2232:	60 e2       	ldi	r22, 0x20	; 32
    2234:	c8 01       	movw	r24, r16
    2236:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:197
  writeReg(0x43, 0x40);
    223a:	40 e4       	ldi	r20, 0x40	; 64
    223c:	63 e4       	ldi	r22, 0x43	; 67
    223e:	c8 01       	movw	r24, r16
    2240:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:199

  writeReg(0xFF, 0x00);
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	6f ef       	ldi	r22, 0xFF	; 255
    2248:	c8 01       	movw	r24, r16
    224a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:200
  writeReg(0x34, 0x03);
    224e:	43 e0       	ldi	r20, 0x03	; 3
    2250:	64 e3       	ldi	r22, 0x34	; 52
    2252:	c8 01       	movw	r24, r16
    2254:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:201
  writeReg(0x35, 0x44);
    2258:	44 e4       	ldi	r20, 0x44	; 68
    225a:	65 e3       	ldi	r22, 0x35	; 53
    225c:	c8 01       	movw	r24, r16
    225e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:203

  writeReg(0xFF, 0x01);
    2262:	41 e0       	ldi	r20, 0x01	; 1
    2264:	6f ef       	ldi	r22, 0xFF	; 255
    2266:	c8 01       	movw	r24, r16
    2268:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:204
  writeReg(0x31, 0x04);
    226c:	44 e0       	ldi	r20, 0x04	; 4
    226e:	61 e3       	ldi	r22, 0x31	; 49
    2270:	c8 01       	movw	r24, r16
    2272:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:205
  writeReg(0x4B, 0x09);
    2276:	49 e0       	ldi	r20, 0x09	; 9
    2278:	6b e4       	ldi	r22, 0x4B	; 75
    227a:	c8 01       	movw	r24, r16
    227c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:206
  writeReg(0x4C, 0x05);
    2280:	45 e0       	ldi	r20, 0x05	; 5
    2282:	6c e4       	ldi	r22, 0x4C	; 76
    2284:	c8 01       	movw	r24, r16
    2286:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:207
  writeReg(0x4D, 0x04);
    228a:	44 e0       	ldi	r20, 0x04	; 4
    228c:	6d e4       	ldi	r22, 0x4D	; 77
    228e:	c8 01       	movw	r24, r16
    2290:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:209

  writeReg(0xFF, 0x00);
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	6f ef       	ldi	r22, 0xFF	; 255
    2298:	c8 01       	movw	r24, r16
    229a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:210
  writeReg(0x44, 0x00);
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	64 e4       	ldi	r22, 0x44	; 68
    22a2:	c8 01       	movw	r24, r16
    22a4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:211
  writeReg(0x45, 0x20);
    22a8:	40 e2       	ldi	r20, 0x20	; 32
    22aa:	65 e4       	ldi	r22, 0x45	; 69
    22ac:	c8 01       	movw	r24, r16
    22ae:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:212
  writeReg(0x47, 0x08);
    22b2:	48 e0       	ldi	r20, 0x08	; 8
    22b4:	67 e4       	ldi	r22, 0x47	; 71
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:213
  writeReg(0x48, 0x28);
    22bc:	48 e2       	ldi	r20, 0x28	; 40
    22be:	68 e4       	ldi	r22, 0x48	; 72
    22c0:	c8 01       	movw	r24, r16
    22c2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:214
  writeReg(0x67, 0x00);
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	67 e6       	ldi	r22, 0x67	; 103
    22ca:	c8 01       	movw	r24, r16
    22cc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:215
  writeReg(0x70, 0x04);
    22d0:	44 e0       	ldi	r20, 0x04	; 4
    22d2:	60 e7       	ldi	r22, 0x70	; 112
    22d4:	c8 01       	movw	r24, r16
    22d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:216
  writeReg(0x71, 0x01);
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	61 e7       	ldi	r22, 0x71	; 113
    22de:	c8 01       	movw	r24, r16
    22e0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:217
  writeReg(0x72, 0xFE);
    22e4:	4e ef       	ldi	r20, 0xFE	; 254
    22e6:	62 e7       	ldi	r22, 0x72	; 114
    22e8:	c8 01       	movw	r24, r16
    22ea:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:218
  writeReg(0x76, 0x00);
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	66 e7       	ldi	r22, 0x76	; 118
    22f2:	c8 01       	movw	r24, r16
    22f4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:219
  writeReg(0x77, 0x00);
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	67 e7       	ldi	r22, 0x77	; 119
    22fc:	c8 01       	movw	r24, r16
    22fe:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:221

  writeReg(0xFF, 0x01);
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	6f ef       	ldi	r22, 0xFF	; 255
    2306:	c8 01       	movw	r24, r16
    2308:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:222
  writeReg(0x0D, 0x01);
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	6d e0       	ldi	r22, 0x0D	; 13
    2310:	c8 01       	movw	r24, r16
    2312:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:224

  writeReg(0xFF, 0x00);
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	6f ef       	ldi	r22, 0xFF	; 255
    231a:	c8 01       	movw	r24, r16
    231c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:225
  writeReg(0x80, 0x01);
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	60 e8       	ldi	r22, 0x80	; 128
    2324:	c8 01       	movw	r24, r16
    2326:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:226
  writeReg(0x01, 0xF8);
    232a:	48 ef       	ldi	r20, 0xF8	; 248
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	c8 01       	movw	r24, r16
    2330:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:228

  writeReg(0xFF, 0x01);
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	6f ef       	ldi	r22, 0xFF	; 255
    2338:	c8 01       	movw	r24, r16
    233a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:229
  writeReg(0x8E, 0x01);
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	6e e8       	ldi	r22, 0x8E	; 142
    2342:	c8 01       	movw	r24, r16
    2344:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:230
  writeReg(0x00, 0x01);
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	c8 01       	movw	r24, r16
    234e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:231
  writeReg(0xFF, 0x00);
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	c8 01       	movw	r24, r16
    2358:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:232
  writeReg(0x80, 0x00);
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	60 e8       	ldi	r22, 0x80	; 128
    2360:	c8 01       	movw	r24, r16
    2362:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:239
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
    2366:	44 e0       	ldi	r20, 0x04	; 4
    2368:	6a e0       	ldi	r22, 0x0A	; 10
    236a:	c8 01       	movw	r24, r16
    236c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:240
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
    2370:	64 e8       	ldi	r22, 0x84	; 132
    2372:	c8 01       	movw	r24, r16
    2374:	0e 94 bd 0a 	call	0x157a	; 0x157a <VL53L0X::readReg(unsigned char)>
    2378:	48 2f       	mov	r20, r24
    237a:	4f 7e       	andi	r20, 0xEF	; 239
    237c:	64 e8       	ldi	r22, 0x84	; 132
    237e:	c8 01       	movw	r24, r16
    2380:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:241
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	6b e0       	ldi	r22, 0x0B	; 11
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:245

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
    238e:	c8 01       	movw	r24, r16
    2390:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <VL53L0X::getMeasurementTimingBudget()>
    2394:	f8 01       	movw	r30, r16
    2396:	62 87       	std	Z+10, r22	; 0x0a
    2398:	73 87       	std	Z+11, r23	; 0x0b
    239a:	84 87       	std	Z+12, r24	; 0x0c
    239c:	95 87       	std	Z+13, r25	; 0x0d
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:252
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    239e:	48 ee       	ldi	r20, 0xE8	; 232
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	c8 01       	movw	r24, r16
    23a4:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:257

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
    23a8:	f8 01       	movw	r30, r16
    23aa:	42 85       	ldd	r20, Z+10	; 0x0a
    23ac:	53 85       	ldd	r21, Z+11	; 0x0b
    23ae:	64 85       	ldd	r22, Z+12	; 0x0c
    23b0:	75 85       	ldd	r23, Z+13	; 0x0d
    23b2:	c8 01       	movw	r24, r16
    23b4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <VL53L0X::setMeasurementTimingBudget(unsigned long)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:265

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	c8 01       	movw	r24, r16
    23be:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:266
  if (!performSingleRefCalibration(0x40)) { return false; }
    23c2:	60 e4       	ldi	r22, 0x40	; 64
    23c4:	c8 01       	movw	r24, r16
    23c6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <VL53L0X::performSingleRefCalibration(unsigned char)>
    23ca:	88 23       	and	r24, r24
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <__stack+0x1d1>
    23ce:	7b cd       	rjmp	.-1290   	; 0x1ec6 <VL53L0X::init(bool)+0x26>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:272

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
    23d0:	42 e0       	ldi	r20, 0x02	; 2
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	c8 01       	movw	r24, r16
    23d6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:273
  if (!performSingleRefCalibration(0x00)) { return false; }
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	c8 01       	movw	r24, r16
    23de:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <VL53L0X::performSingleRefCalibration(unsigned char)>
    23e2:	f8 2e       	mov	r15, r24
    23e4:	88 23       	and	r24, r24
    23e6:	09 f4       	brne	.+2      	; 0x23ea <__stack+0x1eb>
    23e8:	6e cd       	rjmp	.-1316   	; 0x1ec6 <VL53L0X::init(bool)+0x26>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:278

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    23ea:	48 ee       	ldi	r20, 0xE8	; 232
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	c8 01       	movw	r24, r16
    23f0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <VL53L0X::writeReg(unsigned char, unsigned char)>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:282

  // VL53L0X_PerformRefCalibration() end

  return true;
    23f4:	69 cd       	rjmp	.-1326   	; 0x1ec8 <VL53L0X::init(bool)+0x28>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:127
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <__stack+0x1ff>
    23fa:	35 95       	asr	r19
    23fc:	27 95       	ror	r18
    23fe:	6a 95       	dec	r22
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <__stack+0x1fb>
    2402:	20 ff       	sbrs	r18, 0
    2404:	15 ce       	rjmp	.-982    	; 0x2030 <VL53L0X::init(bool)+0x190>
c:\Users\artem\Documents\Arduino\libraries\VL53L0X/VL53L0X.cpp:129
    {
      spads_enabled++;
    2406:	9f 5f       	subi	r25, 0xFF	; 255
    2408:	13 ce       	rjmp	.-986    	; 0x2030 <VL53L0X::init(bool)+0x190>

0000240a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    240a:	fc 01       	movw	r30, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    240c:	91 8d       	ldd	r25, Z+25	; 0x19
    240e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2410:	89 2f       	mov	r24, r25
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	80 5c       	subi	r24, 0xC0	; 192
    2416:	9f 4f       	sbci	r25, 0xFF	; 255
    2418:	82 1b       	sub	r24, r18
    241a:	91 09       	sbc	r25, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
    241c:	8f 73       	andi	r24, 0x3F	; 63
    241e:	99 27       	eor	r25, r25
    2420:	08 95       	ret

00002422 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    2422:	fc 01       	movw	r30, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    2424:	91 8d       	ldd	r25, Z+25	; 0x19
    2426:	82 8d       	ldd	r24, Z+26	; 0x1a
    2428:	98 17       	cp	r25, r24
    242a:	31 f0       	breq	.+12     	; 0x2438 <HardwareSerial::peek()+0x16>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    242c:	82 8d       	ldd	r24, Z+26	; 0x1a
    242e:	e8 0f       	add	r30, r24
    2430:	f1 1d       	adc	r31, r1
    2432:	85 8d       	ldd	r24, Z+29	; 0x1d
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2438:	8f ef       	ldi	r24, 0xFF	; 255
    243a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    243c:	08 95       	ret

0000243e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    243e:	fc 01       	movw	r30, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2440:	91 8d       	ldd	r25, Z+25	; 0x19
    2442:	82 8d       	ldd	r24, Z+26	; 0x1a
    2444:	98 17       	cp	r25, r24
    2446:	61 f0       	breq	.+24     	; 0x2460 <HardwareSerial::read()+0x22>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2448:	a2 8d       	ldd	r26, Z+26	; 0x1a
    244a:	ae 0f       	add	r26, r30
    244c:	bf 2f       	mov	r27, r31
    244e:	b1 1d       	adc	r27, r1
    2450:	5d 96       	adiw	r26, 0x1d	; 29
    2452:	8c 91       	ld	r24, X
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2454:	92 8d       	ldd	r25, Z+26	; 0x1a
    2456:	9f 5f       	subi	r25, 0xFF	; 255
    2458:	9f 73       	andi	r25, 0x3F	; 63
    245a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2460:	8f ef       	ldi	r24, 0xFF	; 255
    2462:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2464:	08 95       	ret

00002466 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2466:	fc 01       	movw	r30, r24
    2468:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    246a:	44 8d       	ldd	r20, Z+28	; 0x1c
    246c:	25 2f       	mov	r18, r21
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	84 2f       	mov	r24, r20
    2472:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2474:	82 1b       	sub	r24, r18
    2476:	93 0b       	sbc	r25, r19
    2478:	54 17       	cp	r21, r20
    247a:	10 f0       	brcs	.+4      	; 0x2480 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    247c:	cf 96       	adiw	r24, 0x3f	; 63
    247e:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    2480:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
    2482:	08 95       	ret

00002484 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2484:	8e eb       	ldi	r24, 0xBE	; 190
    2486:	93 e1       	ldi	r25, 0x13	; 19
    2488:	89 2b       	or	r24, r25
    248a:	49 f0       	breq	.+18     	; 0x249e <serialEventRun()+0x1a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	89 2b       	or	r24, r25
    2492:	29 f0       	breq	.+10     	; 0x249e <serialEventRun()+0x1a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    2494:	0e 94 be 13 	call	0x277c	; 0x277c <Serial0_available()>
    2498:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:67
    249a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	89 2b       	or	r24, r25
    24a4:	49 f0       	breq	.+18     	; 0x24b8 <serialEventRun()+0x34>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	89 2b       	or	r24, r25
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <serialEventRun()+0x34>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    24ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    24b2:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:70
    24b4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	89 2b       	or	r24, r25
    24be:	49 f0       	breq	.+18     	; 0x24d2 <serialEventRun()+0x4e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 1)
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	89 2b       	or	r24, r25
    24c6:	29 f0       	breq	.+10     	; 0x24d2 <serialEventRun()+0x4e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73 (discriminator 3)
    24c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    24cc:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:73
    24ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	89 2b       	or	r24, r25
    24d8:	49 f0       	breq	.+18     	; 0x24ec <serialEventRun()+0x68>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 1)
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	89 2b       	or	r24, r25
    24e0:	29 f0       	breq	.+10     	; 0x24ec <serialEventRun()+0x68>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76 (discriminator 3)
    24e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    24e6:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:76
    24e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:78
#endif
}
    24ec:	08 95       	ret

000024ee <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    24ee:	fc 01       	movw	r30, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    24f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    24f2:	a8 0f       	add	r26, r24
    24f4:	b9 2f       	mov	r27, r25
    24f6:	b1 1d       	adc	r27, r1
    24f8:	a3 5a       	subi	r26, 0xA3	; 163
    24fa:	bf 4f       	sbci	r27, 0xFF	; 255
    24fc:	2c 91       	ld	r18, X
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    24fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	01 96       	adiw	r24, 0x01	; 1
    2504:	8f 73       	andi	r24, 0x3F	; 63
    2506:	99 27       	eor	r25, r25
    2508:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    250a:	a6 89       	ldd	r26, Z+22	; 0x16
    250c:	b7 89       	ldd	r27, Z+23	; 0x17
    250e:	2c 93       	st	X, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2510:	a0 89       	ldd	r26, Z+16	; 0x10
    2512:	b1 89       	ldd	r27, Z+17	; 0x11
    2514:	8c 91       	ld	r24, X
    2516:	83 70       	andi	r24, 0x03	; 3
    2518:	80 64       	ori	r24, 0x40	; 64
    251a:	8c 93       	st	X, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    251c:	93 8d       	ldd	r25, Z+27	; 0x1b
    251e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2520:	98 13       	cpse	r25, r24
    2522:	06 c0       	rjmp	.+12     	; 0x2530 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2524:	02 88       	ldd	r0, Z+18	; 0x12
    2526:	f3 89       	ldd	r31, Z+19	; 0x13
    2528:	e0 2d       	mov	r30, r0
    252a:	80 81       	ld	r24, Z
    252c:	8f 7d       	andi	r24, 0xDF	; 223
    252e:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    2530:	08 95       	ret

00002532 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	ec 01       	movw	r28, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2538:	88 8d       	ldd	r24, Y+24	; 0x18
    253a:	88 23       	and	r24, r24
    253c:	b9 f0       	breq	.+46     	; 0x256c <HardwareSerial::flush()+0x3a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    253e:	aa 89       	ldd	r26, Y+18	; 0x12
    2540:	bb 89       	ldd	r27, Y+19	; 0x13
    2542:	e8 89       	ldd	r30, Y+16	; 0x10
    2544:	f9 89       	ldd	r31, Y+17	; 0x11
    2546:	8c 91       	ld	r24, X
    2548:	85 fd       	sbrc	r24, 5
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <HardwareSerial::flush()+0x20>
    254c:	80 81       	ld	r24, Z
    254e:	86 fd       	sbrc	r24, 6
    2550:	0d c0       	rjmp	.+26     	; 0x256c <HardwareSerial::flush()+0x3a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	07 fc       	sbrc	r0, 7
    2556:	f7 cf       	rjmp	.-18     	; 0x2546 <HardwareSerial::flush()+0x14>
    2558:	8c 91       	ld	r24, X
    255a:	85 ff       	sbrs	r24, 5
    255c:	f2 cf       	rjmp	.-28     	; 0x2542 <HardwareSerial::flush()+0x10>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    255e:	80 81       	ld	r24, Z
    2560:	85 ff       	sbrs	r24, 5
    2562:	ed cf       	rjmp	.-38     	; 0x253e <HardwareSerial::flush()+0xc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    2564:	ce 01       	movw	r24, r28
    2566:	0e 94 77 12 	call	0x24ee	; 0x24ee <HardwareSerial::_tx_udr_empty_irq()>
    256a:	e9 cf       	rjmp	.-46     	; 0x253e <HardwareSerial::flush()+0xc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	ec 01       	movw	r28, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2584:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2586:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2588:	98 13       	cpse	r25, r24
    258a:	1a c0       	rjmp	.+52     	; 0x25c0 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    258c:	e8 89       	ldd	r30, Y+16	; 0x10
    258e:	f9 89       	ldd	r31, Y+17	; 0x11
    2590:	80 81       	ld	r24, Z
    2592:	85 ff       	sbrs	r24, 5
    2594:	15 c0       	rjmp	.+42     	; 0x25c0 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2596:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\artem\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2598:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    259a:	ee 89       	ldd	r30, Y+22	; 0x16
    259c:	ff 89       	ldd	r31, Y+23	; 0x17
    259e:	60 83       	st	Z, r22
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    25a0:	e8 89       	ldd	r30, Y+16	; 0x10
    25a2:	f9 89       	ldd	r31, Y+17	; 0x11
    25a4:	80 81       	ld	r24, Z
    25a6:	83 70       	andi	r24, 0x03	; 3
    25a8:	80 64       	ori	r24, 0x40	; 64
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    25aa:	80 83       	st	Z, r24
__iRestore():
c:\users\artem\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25ac:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	08 95       	ret
    25c0:	f6 2e       	mov	r15, r22
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    25c2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    25c4:	10 e0       	ldi	r17, 0x00	; 0
    25c6:	0f 5f       	subi	r16, 0xFF	; 255
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	0f 73       	andi	r16, 0x3F	; 63
    25cc:	11 27       	eor	r17, r17
    25ce:	e0 2e       	mov	r14, r16
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    25d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25d2:	8e 11       	cpse	r24, r14
    25d4:	0c c0       	rjmp	.+24     	; 0x25ee <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	07 fc       	sbrc	r0, 7
    25da:	fa cf       	rjmp	.-12     	; 0x25d0 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    25dc:	e8 89       	ldd	r30, Y+16	; 0x10
    25de:	f9 89       	ldd	r31, Y+17	; 0x11
    25e0:	80 81       	ld	r24, Z
    25e2:	85 ff       	sbrs	r24, 5
    25e4:	f5 cf       	rjmp	.-22     	; 0x25d0 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    25e6:	ce 01       	movw	r24, r28
    25e8:	0e 94 77 12 	call	0x24ee	; 0x24ee <HardwareSerial::_tx_udr_empty_irq()>
    25ec:	f1 cf       	rjmp	.-30     	; 0x25d0 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    25ee:	eb 8d       	ldd	r30, Y+27	; 0x1b
    25f0:	ec 0f       	add	r30, r28
    25f2:	fd 2f       	mov	r31, r29
    25f4:	f1 1d       	adc	r31, r1
    25f6:	e3 5a       	subi	r30, 0xA3	; 163
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	f0 82       	st	Z, r15
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    25fc:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\artem\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    25fe:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    2600:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    2602:	ea 89       	ldd	r30, Y+18	; 0x12
    2604:	fb 89       	ldd	r31, Y+19	; 0x13
    2606:	80 81       	ld	r24, Z
    2608:	80 62       	ori	r24, 0x20	; 32
    260a:	cf cf       	rjmp	.-98     	; 0x25aa <HardwareSerial::write(unsigned char)+0x38>

0000260c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ec 01       	movw	r28, r24
    261c:	6a 01       	movw	r12, r20
    261e:	7b 01       	movw	r14, r22
    2620:	12 2f       	mov	r17, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2622:	e8 89       	ldd	r30, Y+16	; 0x10
    2624:	f9 89       	ldd	r31, Y+17	; 0x11
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    262a:	c1 14       	cp	r12, r1
    262c:	81 ee       	ldi	r24, 0xE1	; 225
    262e:	d8 06       	cpc	r13, r24
    2630:	e1 04       	cpc	r14, r1
    2632:	f1 04       	cpc	r15, r1
    2634:	a1 f0       	breq	.+40     	; 0x265e <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	79 e0       	ldi	r23, 0x09	; 9
    263a:	8d e3       	ldi	r24, 0x3D	; 61
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a7 01       	movw	r20, r14
    2640:	96 01       	movw	r18, r12
    2642:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
    2646:	21 50       	subi	r18, 0x01	; 1
    2648:	31 09       	sbc	r19, r1
    264a:	41 09       	sbc	r20, r1
    264c:	51 09       	sbc	r21, r1
    264e:	56 95       	lsr	r21
    2650:	47 95       	ror	r20
    2652:	37 95       	ror	r19
    2654:	27 95       	ror	r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2656:	21 15       	cp	r18, r1
    2658:	80 e1       	ldi	r24, 0x10	; 16
    265a:	38 07       	cpc	r19, r24
    265c:	98 f0       	brcs	.+38     	; 0x2684 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    265e:	e8 89       	ldd	r30, Y+16	; 0x10
    2660:	f9 89       	ldd	r31, Y+17	; 0x11
    2662:	10 82       	st	Z, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2664:	60 e8       	ldi	r22, 0x80	; 128
    2666:	74 e8       	ldi	r23, 0x84	; 132
    2668:	8e e1       	ldi	r24, 0x1E	; 30
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	a7 01       	movw	r20, r14
    266e:	96 01       	movw	r18, r12
    2670:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
    2674:	21 50       	subi	r18, 0x01	; 1
    2676:	31 09       	sbc	r19, r1
    2678:	41 09       	sbc	r20, r1
    267a:	51 09       	sbc	r21, r1
    267c:	56 95       	lsr	r21
    267e:	47 95       	ror	r20
    2680:	37 95       	ror	r19
    2682:	27 95       	ror	r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2684:	ec 85       	ldd	r30, Y+12	; 0x0c
    2686:	fd 85       	ldd	r31, Y+13	; 0x0d
    2688:	30 83       	st	Z, r19
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    268a:	ee 85       	ldd	r30, Y+14	; 0x0e
    268c:	ff 85       	ldd	r31, Y+15	; 0x0f
    268e:	20 83       	st	Z, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2690:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2692:	ec 89       	ldd	r30, Y+20	; 0x14
    2694:	fd 89       	ldd	r31, Y+21	; 0x15
    2696:	10 83       	st	Z, r17
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2698:	ea 89       	ldd	r30, Y+18	; 0x12
    269a:	fb 89       	ldd	r31, Y+19	; 0x13
    269c:	80 81       	ld	r24, Z
    269e:	88 69       	ori	r24, 0x98	; 152
    26a0:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    26a2:	ea 89       	ldd	r30, Y+18	; 0x12
    26a4:	fb 89       	ldd	r31, Y+19	; 0x13
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7d       	andi	r24, 0xDF	; 223
    26aa:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
}
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	ff 90       	pop	r15
    26b4:	ef 90       	pop	r14
    26b6:	df 90       	pop	r13
    26b8:	cf 90       	pop	r12
    26ba:	08 95       	ret

000026bc <__vector_25>:
__vector_25():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    26bc:	1f 92       	push	r1
    26be:	0f 92       	push	r0
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	0f 92       	push	r0
    26c4:	11 24       	eor	r1, r1
    26c6:	0b b6       	in	r0, 0x3b	; 59
    26c8:	0f 92       	push	r0
    26ca:	2f 93       	push	r18
    26cc:	8f 93       	push	r24
    26ce:	9f 93       	push	r25
    26d0:	ef 93       	push	r30
    26d2:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    26d4:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <Serial+0x10>
    26d8:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <Serial+0x11>
    26dc:	80 81       	ld	r24, Z
    26de:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <Serial+0x16>
    26e2:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <Serial+0x17>
    26e6:	82 fd       	sbrc	r24, 2
    26e8:	1d c0       	rjmp	.+58     	; 0x2724 <__vector_25+0x68>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    26ea:	90 81       	ld	r25, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    26ec:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <Serial+0x19>
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    26f4:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <Serial+0x1a>
    26f8:	82 17       	cp	r24, r18
    26fa:	41 f0       	breq	.+16     	; 0x270c <__vector_25+0x50>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    26fc:	e0 91 a9 03 	lds	r30, 0x03A9	; 0x8003a9 <Serial+0x19>
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	e0 57       	subi	r30, 0x70	; 112
    2704:	fc 4f       	sbci	r31, 0xFC	; 252
    2706:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2708:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <Serial+0x19>
__vector_25():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    270c:	ff 91       	pop	r31
    270e:	ef 91       	pop	r30
    2710:	9f 91       	pop	r25
    2712:	8f 91       	pop	r24
    2714:	2f 91       	pop	r18
    2716:	0f 90       	pop	r0
    2718:	0b be       	out	0x3b, r0	; 59
    271a:	0f 90       	pop	r0
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	0f 90       	pop	r0
    2720:	1f 90       	pop	r1
    2722:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2724:	80 81       	ld	r24, Z
__vector_25():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    2726:	f2 cf       	rjmp	.-28     	; 0x270c <__vector_25+0x50>

00002728 <__vector_26>:
__vector_26():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2728:	1f 92       	push	r1
    272a:	0f 92       	push	r0
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	0f 92       	push	r0
    2730:	11 24       	eor	r1, r1
    2732:	0b b6       	in	r0, 0x3b	; 59
    2734:	0f 92       	push	r0
    2736:	2f 93       	push	r18
    2738:	3f 93       	push	r19
    273a:	4f 93       	push	r20
    273c:	5f 93       	push	r21
    273e:	6f 93       	push	r22
    2740:	7f 93       	push	r23
    2742:	8f 93       	push	r24
    2744:	9f 93       	push	r25
    2746:	af 93       	push	r26
    2748:	bf 93       	push	r27
    274a:	ef 93       	push	r30
    274c:	ff 93       	push	r31
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    274e:	80 e9       	ldi	r24, 0x90	; 144
    2750:	93 e0       	ldi	r25, 0x03	; 3
    2752:	0e 94 77 12 	call	0x24ee	; 0x24ee <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2756:	ff 91       	pop	r31
    2758:	ef 91       	pop	r30
    275a:	bf 91       	pop	r27
    275c:	af 91       	pop	r26
    275e:	9f 91       	pop	r25
    2760:	8f 91       	pop	r24
    2762:	7f 91       	pop	r23
    2764:	6f 91       	pop	r22
    2766:	5f 91       	pop	r21
    2768:	4f 91       	pop	r20
    276a:	3f 91       	pop	r19
    276c:	2f 91       	pop	r18
    276e:	0f 90       	pop	r0
    2770:	0b be       	out	0x3b, r0	; 59
    2772:	0f 90       	pop	r0
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	0f 90       	pop	r0
    2778:	1f 90       	pop	r1
    277a:	18 95       	reti

0000277c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    277c:	80 e9       	ldi	r24, 0x90	; 144
    277e:	93 e0       	ldi	r25, 0x03	; 3
    2780:	0e 94 05 12 	call	0x240a	; 0x240a <HardwareSerial::available()>
    2784:	21 e0       	ldi	r18, 0x01	; 1
    2786:	89 2b       	or	r24, r25
    2788:	09 f4       	brne	.+2      	; 0x278c <Serial0_available()+0x10>
    278a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    278c:	82 2f       	mov	r24, r18
    278e:	08 95       	ret

00002790 <_GLOBAL__sub_I___vector_25>:
_ZN5PrintC4Ev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:46
    2790:	e0 e9       	ldi	r30, 0x90	; 144
    2792:	f3 e0       	ldi	r31, 0x03	; 3
    2794:	13 82       	std	Z+3, r1	; 0x03
    2796:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Stream.h:63
    2798:	88 ee       	ldi	r24, 0xE8	; 232
    279a:	93 e0       	ldi	r25, 0x03	; 3
    279c:	a0 e0       	ldi	r26, 0x00	; 0
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	84 83       	std	Z+4, r24	; 0x04
    27a2:	95 83       	std	Z+5, r25	; 0x05
    27a4:	a6 83       	std	Z+6, r26	; 0x06
    27a6:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    27a8:	8c e4       	ldi	r24, 0x4C	; 76
    27aa:	92 e0       	ldi	r25, 0x02	; 2
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	80 83       	st	Z, r24
    27b0:	85 ec       	ldi	r24, 0xC5	; 197
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	95 87       	std	Z+13, r25	; 0x0d
    27b6:	84 87       	std	Z+12, r24	; 0x0c
    27b8:	84 ec       	ldi	r24, 0xC4	; 196
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	97 87       	std	Z+15, r25	; 0x0f
    27be:	86 87       	std	Z+14, r24	; 0x0e
    27c0:	80 ec       	ldi	r24, 0xC0	; 192
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	91 8b       	std	Z+17, r25	; 0x11
    27c6:	80 8b       	std	Z+16, r24	; 0x10
    27c8:	81 ec       	ldi	r24, 0xC1	; 193
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	93 8b       	std	Z+19, r25	; 0x13
    27ce:	82 8b       	std	Z+18, r24	; 0x12
    27d0:	82 ec       	ldi	r24, 0xC2	; 194
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	95 8b       	std	Z+21, r25	; 0x15
    27d6:	84 8b       	std	Z+20, r24	; 0x14
    27d8:	86 ec       	ldi	r24, 0xC6	; 198
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	97 8b       	std	Z+23, r25	; 0x17
    27de:	86 8b       	std	Z+22, r24	; 0x16
    27e0:	11 8e       	std	Z+25, r1	; 0x19
    27e2:	12 8e       	std	Z+26, r1	; 0x1a
    27e4:	13 8e       	std	Z+27, r1	; 0x1b
    27e6:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_25():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    27e8:	08 95       	ret

000027ea <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:136
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    27ea:	af 92       	push	r10
    27ec:	bf 92       	push	r11
    27ee:	cf 92       	push	r12
    27f0:	df 92       	push	r13
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	6c 01       	movw	r12, r24
    2800:	7b 01       	movw	r14, r22
    2802:	8b 01       	movw	r16, r22
    2804:	04 0f       	add	r16, r20
    2806:	15 1f       	adc	r17, r21
    2808:	eb 01       	movw	r28, r22
    280a:	5e 01       	movw	r10, r28
    280c:	ae 18       	sub	r10, r14
    280e:	bf 08       	sbc	r11, r15
    2810:	c0 17       	cp	r28, r16
    2812:	d1 07       	cpc	r29, r17
    2814:	59 f0       	breq	.+22     	; 0x282c <Print::write(unsigned char const*, unsigned int)+0x42>
    2816:	69 91       	ld	r22, Y+
    2818:	d6 01       	movw	r26, r12
    281a:	ed 91       	ld	r30, X+
    281c:	fc 91       	ld	r31, X
    281e:	01 90       	ld	r0, Z+
    2820:	f0 81       	ld	r31, Z
    2822:	e0 2d       	mov	r30, r0
    2824:	c6 01       	movw	r24, r12
    2826:	19 95       	eicall
    2828:	89 2b       	or	r24, r25
    282a:	79 f7       	brne	.-34     	; 0x280a <Print::write(unsigned char const*, unsigned int)+0x20>
    282c:	c5 01       	movw	r24, r10
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	ff 90       	pop	r15
    2838:	ef 90       	pop	r14
    283a:	df 90       	pop	r13
    283c:	cf 90       	pop	r12
    283e:	bf 90       	pop	r11
    2840:	af 90       	pop	r10
    2842:	08 95       	ret

00002844 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2844:	fb 01       	movw	r30, r22
    2846:	01 90       	ld	r0, Z+
    2848:	00 20       	and	r0, r0
    284a:	e9 f7       	brne	.-6      	; 0x2846 <Print::write(char const*) [clone .part.2]+0x2>
    284c:	31 97       	sbiw	r30, 0x01	; 1
    284e:	af 01       	movw	r20, r30
    2850:	46 1b       	sub	r20, r22
    2852:	57 0b       	sbc	r21, r23
    2854:	dc 01       	movw	r26, r24
    2856:	ed 91       	ld	r30, X+
    2858:	fc 91       	ld	r31, X
    285a:	02 80       	ldd	r0, Z+2	; 0x02
    285c:	f3 81       	ldd	r31, Z+3	; 0x03
    285e:	e0 2d       	mov	r30, r0
    2860:	19 94       	eijmp

00002862 <Print::println()>:
    2862:	6a e5       	ldi	r22, 0x5A	; 90
    2864:	72 e0       	ldi	r23, 0x02	; 2
    2866:	0c 94 22 14 	jmp	0x2844	; 0x2844 <Print::write(char const*) [clone .part.2]>

0000286a <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2874:	d0 e0       	ldi	r29, 0x00	; 0
    2876:	c0 e0       	ldi	r28, 0x00	; 0
    2878:	61 15       	cp	r22, r1
    287a:	71 05       	cpc	r23, r1
    287c:	19 f0       	breq	.+6      	; 0x2884 <Print::println(char const*)+0x1a>
    287e:	0e 94 22 14 	call	0x2844	; 0x2844 <Print::write(char const*) [clone .part.2]>
    2882:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    2884:	c8 01       	movw	r24, r16
    2886:	0e 94 31 14 	call	0x2862	; 0x2862 <Print::println()>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Print.cpp:143
  return n;
}
    288a:	8c 0f       	add	r24, r28
    288c:	9d 1f       	adc	r25, r29
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	08 95       	ret

00002898 <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:281


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    2898:	4f 92       	push	r4
    289a:	5f 92       	push	r5
    289c:	6f 92       	push	r6
    289e:	7f 92       	push	r7
    28a0:	8f 92       	push	r8
    28a2:	9f 92       	push	r9
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <tone(unsigned char, unsigned int, unsigned long)+0x22>
    28ba:	1f 92       	push	r1
    28bc:	1f 92       	push	r1
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	8b 01       	movw	r16, r22
    28c4:	29 01       	movw	r4, r18
    28c6:	3a 01       	movw	r6, r20
toneBegin():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    28c8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    28cc:	89 17       	cp	r24, r25
    28ce:	c9 f0       	breq	.+50     	; 0x2902 <tone(unsigned char, unsigned int, unsigned long)+0x6a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    28d0:	9f 3f       	cpi	r25, 0xFF	; 255
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
    28d4:	eb c0       	rjmp	.+470    	; 0x2aac <tone(unsigned char, unsigned int, unsigned long)+0x214>
_Z4tonehjm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	9f 90       	pop	r9
    28f6:	8f 90       	pop	r8
    28f8:	7f 90       	pop	r7
    28fa:	6f 90       	pop	r6
    28fc:	5f 90       	pop	r5
    28fe:	4f 90       	pop	r4
    2900:	08 95       	ret
toneBegin():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    2902:	e0 ec       	ldi	r30, 0xC0	; 192
    2904:	f1 e0       	ldi	r31, 0x01	; 1
    2906:	24 91       	lpm	r18, Z
    2908:	2d 83       	std	Y+5, r18	; 0x05
_Z4tonehjm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    290a:	27 fd       	sbrc	r18, 7
    290c:	e4 cf       	rjmp	.-56     	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    2914:	2d 81       	ldd	r18, Y+5	; 0x05
    2916:	22 23       	and	r18, r18
    2918:	21 f0       	breq	.+8      	; 0x2922 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:295 (discriminator 1)
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	82 30       	cpi	r24, 0x02	; 2
    291e:	09 f0       	breq	.+2      	; 0x2922 <tone(unsigned char, unsigned int, unsigned long)+0x8a>
    2920:	e5 c1       	rjmp	.+970    	; 0x2cec <tone(unsigned char, unsigned int, unsigned long)+0x454>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
    2922:	48 01       	movw	r8, r16
    2924:	b1 2c       	mov	r11, r1
    2926:	a1 2c       	mov	r10, r1
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	72 e1       	ldi	r23, 0x12	; 18
    292c:	8a e7       	ldi	r24, 0x7A	; 122
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	a5 01       	movw	r20, r10
    2932:	98 01       	movw	r18, r16
    2934:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2938:	29 83       	std	Y+1, r18	; 0x01
    293a:	3a 83       	std	Y+2, r19	; 0x02
    293c:	4b 83       	std	Y+3, r20	; 0x03
    293e:	5c 83       	std	Y+4, r21	; 0x04
    2940:	69 01       	movw	r12, r18
    2942:	7a 01       	movw	r14, r20
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	c9 1a       	sub	r12, r25
    2948:	d1 08       	sbc	r13, r1
    294a:	e1 08       	sbc	r14, r1
    294c:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:299
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
    294e:	2f ef       	ldi	r18, 0xFF	; 255
    2950:	c2 16       	cp	r12, r18
    2952:	d1 04       	cpc	r13, r1
    2954:	e1 04       	cpc	r14, r1
    2956:	f1 04       	cpc	r15, r1
    2958:	09 f0       	breq	.+2      	; 0x295c <tone(unsigned char, unsigned int, unsigned long)+0xc4>
    295a:	0c f4       	brge	.+2      	; 0x295e <tone(unsigned char, unsigned int, unsigned long)+0xc6>
    295c:	a8 c1       	rjmp	.+848    	; 0x2cae <tone(unsigned char, unsigned int, unsigned long)+0x416>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:301
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    295e:	60 e4       	ldi	r22, 0x40	; 64
    2960:	72 e4       	ldi	r23, 0x42	; 66
    2962:	8f e0       	ldi	r24, 0x0F	; 15
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a5 01       	movw	r20, r10
    2968:	98 01       	movw	r18, r16
    296a:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    296e:	69 01       	movw	r12, r18
    2970:	7a 01       	movw	r14, r20
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	c8 1a       	sub	r12, r24
    2976:	d1 08       	sbc	r13, r1
    2978:	e1 08       	sbc	r14, r1
    297a:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0x02;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    297c:	9d 81       	ldd	r25, Y+5	; 0x05
    297e:	92 30       	cpi	r25, 0x02	; 2
    2980:	09 f0       	breq	.+2      	; 0x2984 <tone(unsigned char, unsigned int, unsigned long)+0xec>
    2982:	d6 c2       	rjmp	.+1452   	; 0x2f30 <tone(unsigned char, unsigned int, unsigned long)+0x698>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:302 (discriminator 1)
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0x02;  // ck/8: same for both timers
    2984:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:304 (discriminator 1)

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    2986:	2f ef       	ldi	r18, 0xFF	; 255
    2988:	c2 16       	cp	r12, r18
    298a:	d1 04       	cpc	r13, r1
    298c:	e1 04       	cpc	r14, r1
    298e:	f1 04       	cpc	r15, r1
    2990:	09 f0       	breq	.+2      	; 0x2994 <tone(unsigned char, unsigned int, unsigned long)+0xfc>
    2992:	0c f4       	brge	.+2      	; 0x2996 <tone(unsigned char, unsigned int, unsigned long)+0xfe>
    2994:	6f c0       	rjmp	.+222    	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2996:	60 e9       	ldi	r22, 0x90	; 144
    2998:	70 ed       	ldi	r23, 0xD0	; 208
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a5 01       	movw	r20, r10
    29a0:	98 01       	movw	r18, r16
    29a2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    29a6:	69 01       	movw	r12, r18
    29a8:	7a 01       	movw	r14, r20
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	c8 1a       	sub	r12, r24
    29ae:	d1 08       	sbc	r13, r1
    29b0:	e1 08       	sbc	r14, r1
    29b2:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:307
          prescalarbits = 0x03;
    29b4:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:310
        }

        if (ocr > 255)
    29b6:	9f ef       	ldi	r25, 0xFF	; 255
    29b8:	c9 16       	cp	r12, r25
    29ba:	d1 04       	cpc	r13, r1
    29bc:	e1 04       	cpc	r14, r1
    29be:	f1 04       	cpc	r15, r1
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <tone(unsigned char, unsigned int, unsigned long)+0x12c>
    29c2:	0c f4       	brge	.+2      	; 0x29c6 <tone(unsigned char, unsigned int, unsigned long)+0x12e>
    29c4:	57 c0       	rjmp	.+174    	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    29c6:	68 e4       	ldi	r22, 0x48	; 72
    29c8:	78 ee       	ldi	r23, 0xE8	; 232
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a5 01       	movw	r20, r10
    29d0:	98 01       	movw	r18, r16
    29d2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    29d6:	69 01       	movw	r12, r18
    29d8:	7a 01       	movw	r14, r20
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	c8 1a       	sub	r12, r24
    29de:	d1 08       	sbc	r13, r1
    29e0:	e1 08       	sbc	r14, r1
    29e2:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:313
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x03 : 0x04;
    29e4:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:315

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    29e6:	9f ef       	ldi	r25, 0xFF	; 255
    29e8:	c9 16       	cp	r12, r25
    29ea:	d1 04       	cpc	r13, r1
    29ec:	e1 04       	cpc	r14, r1
    29ee:	f1 04       	cpc	r15, r1
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <tone(unsigned char, unsigned int, unsigned long)+0x15c>
    29f2:	0c f4       	brge	.+2      	; 0x29f6 <tone(unsigned char, unsigned int, unsigned long)+0x15e>
    29f4:	3f c0       	rjmp	.+126    	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:317
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    29f6:	64 e2       	ldi	r22, 0x24	; 36
    29f8:	74 ef       	ldi	r23, 0xF4	; 244
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a5 01       	movw	r20, r10
    2a00:	98 01       	movw	r18, r16
    2a02:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2a06:	69 01       	movw	r12, r18
    2a08:	7a 01       	movw	r14, r20
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	c8 1a       	sub	r12, r24
    2a0e:	d1 08       	sbc	r13, r1
    2a10:	e1 08       	sbc	r14, r1
    2a12:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:318
            prescalarbits = 0x05;
    2a14:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:321
          }

          if (ocr > 255)
    2a16:	9f ef       	ldi	r25, 0xFF	; 255
    2a18:	c9 16       	cp	r12, r25
    2a1a:	d1 04       	cpc	r13, r1
    2a1c:	e1 04       	cpc	r14, r1
    2a1e:	f1 04       	cpc	r15, r1
    2a20:	49 f1       	breq	.+82     	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
    2a22:	40 f1       	brcs	.+80     	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2a24:	62 e1       	ldi	r22, 0x12	; 18
    2a26:	7a e7       	ldi	r23, 0x7A	; 122
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a5 01       	movw	r20, r10
    2a2e:	98 01       	movw	r18, r16
    2a30:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2a34:	69 01       	movw	r12, r18
    2a36:	7a 01       	movw	r14, r20
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	c8 1a       	sub	r12, r24
    2a3c:	d1 08       	sbc	r13, r1
    2a3e:	e1 08       	sbc	r14, r1
    2a40:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:324
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x04 : 0x06;
    2a42:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:325
            if (ocr > 255)
    2a44:	9f ef       	ldi	r25, 0xFF	; 255
    2a46:	c9 16       	cp	r12, r25
    2a48:	d1 04       	cpc	r13, r1
    2a4a:	e1 04       	cpc	r14, r1
    2a4c:	f1 04       	cpc	r15, r1
    2a4e:	91 f0       	breq	.+36     	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
    2a50:	88 f0       	brcs	.+34     	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2a52:	c9 80       	ldd	r12, Y+1	; 0x01
    2a54:	da 80       	ldd	r13, Y+2	; 0x02
    2a56:	eb 80       	ldd	r14, Y+3	; 0x03
    2a58:	fc 80       	ldd	r15, Y+4	; 0x04
    2a5a:	8a e0       	ldi	r24, 0x0A	; 10
    2a5c:	f5 94       	asr	r15
    2a5e:	e7 94       	ror	r14
    2a60:	d7 94       	ror	r13
    2a62:	c7 94       	ror	r12
    2a64:	8a 95       	dec	r24
    2a66:	d1 f7       	brne	.-12     	; 0x2a5c <tone(unsigned char, unsigned int, unsigned long)+0x1c4>
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	c9 1a       	sub	r12, r25
    2a6c:	d1 08       	sbc	r13, r1
    2a6e:	e1 08       	sbc	r14, r1
    2a70:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x05 : 0x07;
    2a72:	87 e0       	ldi	r24, 0x07	; 7
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0xf8) | prescalarbits;
    2a74:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2a78:	98 7f       	andi	r25, 0xF8	; 248
    2a7a:	89 2b       	or	r24, r25
    2a7c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2a80:	2f ef       	ldi	r18, 0xFF	; 255
    2a82:	3f ef       	ldi	r19, 0xFF	; 255
    2a84:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2a86:	41 14       	cp	r4, r1
    2a88:	51 04       	cpc	r5, r1
    2a8a:	61 04       	cpc	r6, r1
    2a8c:	71 04       	cpc	r7, r1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <tone(unsigned char, unsigned int, unsigned long)+0x1fa>
    2a90:	1f c1       	rjmp	.+574    	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2a92:	9d 81       	ldd	r25, Y+5	; 0x05
    2a94:	92 30       	cpi	r25, 0x02	; 2
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <tone(unsigned char, unsigned int, unsigned long)+0x202>
    2a98:	f9 c1       	rjmp	.+1010   	; 0x2e8c <tone(unsigned char, unsigned int, unsigned long)+0x5f4>
    2a9a:	0c f0       	brlt	.+2      	; 0x2a9e <tone(unsigned char, unsigned int, unsigned long)+0x206>
    2a9c:	e0 c1       	rjmp	.+960    	; 0x2e5e <tone(unsigned char, unsigned int, unsigned long)+0x5c6>
    2a9e:	99 23       	and	r25, r25
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <tone(unsigned char, unsigned int, unsigned long)+0x20c>
    2aa2:	e5 c1       	rjmp	.+970    	; 0x2e6e <tone(unsigned char, unsigned int, unsigned long)+0x5d6>
    2aa4:	91 30       	cpi	r25, 0x01	; 1
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <tone(unsigned char, unsigned int, unsigned long)+0x212>
    2aa8:	4a c1       	rjmp	.+660    	; 0x2d3e <tone(unsigned char, unsigned int, unsigned long)+0x4a6>
    2aaa:	15 cf       	rjmp	.-470    	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
toneBegin():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    2aac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2ab0:	e0 ec       	ldi	r30, 0xC0	; 192
    2ab2:	f1 e0       	ldi	r31, 0x01	; 1
    2ab4:	94 91       	lpm	r25, Z
    2ab6:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
    2ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    2aba:	09 f4       	brne	.+2      	; 0x2abe <tone(unsigned char, unsigned int, unsigned long)+0x226>
    2abc:	0c cf       	rjmp	.-488    	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2abe:	92 30       	cpi	r25, 0x02	; 2
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <tone(unsigned char, unsigned int, unsigned long)+0x22c>
    2ac2:	81 c0       	rjmp	.+258    	; 0x2bc6 <tone(unsigned char, unsigned int, unsigned long)+0x32e>
    2ac4:	60 f4       	brcc	.+24     	; 0x2ade <tone(unsigned char, unsigned int, unsigned long)+0x246>
    2ac6:	99 23       	and	r25, r25
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <tone(unsigned char, unsigned int, unsigned long)+0x234>
    2aca:	37 c0       	rjmp	.+110    	; 0x2b3a <tone(unsigned char, unsigned int, unsigned long)+0x2a2>
    2acc:	91 30       	cpi	r25, 0x01	; 1
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <tone(unsigned char, unsigned int, unsigned long)+0x23a>
    2ad0:	54 c0       	rjmp	.+168    	; 0x2b7a <tone(unsigned char, unsigned int, unsigned long)+0x2e2>
_Z4tonehjm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    2ad2:	97 fd       	sbrc	r25, 7
    2ad4:	00 cf       	rjmp	.-512    	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:292
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
    2adc:	1e cf       	rjmp	.-452    	; 0x291a <tone(unsigned char, unsigned int, unsigned long)+0x82>
toneBegin():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    2ade:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae0:	24 30       	cpi	r18, 0x04	; 4
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <tone(unsigned char, unsigned int, unsigned long)+0x24e>
    2ae4:	be c0       	rjmp	.+380    	; 0x2c62 <tone(unsigned char, unsigned int, unsigned long)+0x3ca>
    2ae6:	08 f4       	brcc	.+2      	; 0x2aea <tone(unsigned char, unsigned int, unsigned long)+0x252>
    2ae8:	94 c0       	rjmp	.+296    	; 0x2c12 <tone(unsigned char, unsigned int, unsigned long)+0x37a>
    2aea:	25 30       	cpi	r18, 0x05	; 5
    2aec:	91 f7       	brne	.-28     	; 0x2ad2 <tone(unsigned char, unsigned int, unsigned long)+0x23a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:262
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
    2aee:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:263
        TCCR5B = 0;
    2af2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:264
        bitWrite(TCCR5B, WGM52, 1);
    2af6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2afa:	98 60       	ori	r25, 0x08	; 8
    2afc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:265
        bitWrite(TCCR5B, CS50, 1);
    2b00:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2b04:	91 60       	ori	r25, 0x01	; 1
    2b06:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:266
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	f9 01       	movw	r30, r18
    2b10:	e3 59       	subi	r30, 0x93	; 147
    2b12:	fd 4f       	sbci	r31, 0xFD	; 253
    2b14:	e4 91       	lpm	r30, Z
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	ee 0f       	add	r30, r30
    2b1a:	ff 1f       	adc	r31, r31
    2b1c:	e3 52       	subi	r30, 0x23	; 35
    2b1e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b20:	45 91       	lpm	r20, Z+
    2b22:	54 91       	lpm	r21, Z
    2b24:	50 93 2f 04 	sts	0x042F, r21	; 0x80042f <timer5_pin_port+0x1>
    2b28:	40 93 2e 04 	sts	0x042E, r20	; 0x80042e <timer5_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:267
        timer5_pin_mask = digitalPinToBitMask(_pin);
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	e9 5e       	subi	r30, 0xE9	; 233
    2b30:	fd 4f       	sbci	r31, 0xFD	; 253
    2b32:	e4 91       	lpm	r30, Z
    2b34:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <timer5_pin_mask>
    2b38:	ea ce       	rjmp	.-556    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:196
    switch (_timer)
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    2b3a:	14 bc       	out	0x24, r1	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:197
        TCCR0B = 0;
    2b3c:	15 bc       	out	0x25, r1	; 37
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:198
        bitWrite(TCCR0A, WGM01, 1);
    2b3e:	94 b5       	in	r25, 0x24	; 36
    2b40:	92 60       	ori	r25, 0x02	; 2
    2b42:	94 bd       	out	0x24, r25	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:199
        bitWrite(TCCR0B, CS00, 1);
    2b44:	95 b5       	in	r25, 0x25	; 37
    2b46:	91 60       	ori	r25, 0x01	; 1
    2b48:	95 bd       	out	0x25, r25	; 37
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:200
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	f9 01       	movw	r30, r18
    2b50:	e3 59       	subi	r30, 0x93	; 147
    2b52:	fd 4f       	sbci	r31, 0xFD	; 253
    2b54:	e4 91       	lpm	r30, Z
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	e3 52       	subi	r30, 0x23	; 35
    2b5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b60:	45 91       	lpm	r20, Z+
    2b62:	54 91       	lpm	r21, Z
    2b64:	50 93 52 04 	sts	0x0452, r21	; 0x800452 <timer0_pin_port+0x1>
    2b68:	40 93 51 04 	sts	0x0451, r20	; 0x800451 <timer0_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:201
        timer0_pin_mask = digitalPinToBitMask(_pin);
    2b6c:	f9 01       	movw	r30, r18
    2b6e:	e9 5e       	subi	r30, 0xE9	; 233
    2b70:	fd 4f       	sbci	r31, 0xFD	; 253
    2b72:	e4 91       	lpm	r30, Z
    2b74:	e0 93 50 04 	sts	0x0450, r30	; 0x800450 <timer0_pin_mask>
    2b78:	ca ce       	rjmp	.-620    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    2b7a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
    2b7e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
    2b82:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2b86:	98 60       	ori	r25, 0x08	; 8
    2b88:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
    2b8c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2b90:	91 60       	ori	r25, 0x01	; 1
    2b92:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	f9 01       	movw	r30, r18
    2b9c:	e3 59       	subi	r30, 0x93	; 147
    2b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba0:	e4 91       	lpm	r30, Z
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	e3 52       	subi	r30, 0x23	; 35
    2baa:	fd 4f       	sbci	r31, 0xFD	; 253
    2bac:	45 91       	lpm	r20, Z+
    2bae:	54 91       	lpm	r21, Z
    2bb0:	50 93 4b 04 	sts	0x044B, r21	; 0x80044b <timer1_pin_port+0x1>
    2bb4:	40 93 4a 04 	sts	0x044A, r20	; 0x80044a <timer1_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
    2bb8:	f9 01       	movw	r30, r18
    2bba:	e9 5e       	subi	r30, 0xE9	; 233
    2bbc:	fd 4f       	sbci	r31, 0xFD	; 253
    2bbe:	e4 91       	lpm	r30, Z
    2bc0:	e0 93 49 04 	sts	0x0449, r30	; 0x800449 <timer1_pin_mask>
    2bc4:	a4 ce       	rjmp	.-696    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    2bc6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
    2bca:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
    2bce:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2bd2:	92 60       	ori	r25, 0x02	; 2
    2bd4:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
    2bd8:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2bdc:	91 60       	ori	r25, 0x01	; 1
    2bde:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	f9 01       	movw	r30, r18
    2be8:	e3 59       	subi	r30, 0x93	; 147
    2bea:	fd 4f       	sbci	r31, 0xFD	; 253
    2bec:	e4 91       	lpm	r30, Z
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	ee 0f       	add	r30, r30
    2bf2:	ff 1f       	adc	r31, r31
    2bf4:	e3 52       	subi	r30, 0x23	; 35
    2bf6:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf8:	45 91       	lpm	r20, Z+
    2bfa:	54 91       	lpm	r21, Z
    2bfc:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <timer2_pin_port+0x1>
    2c00:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <timer2_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
    2c04:	f9 01       	movw	r30, r18
    2c06:	e9 5e       	subi	r30, 0xE9	; 233
    2c08:	fd 4f       	sbci	r31, 0xFD	; 253
    2c0a:	e4 91       	lpm	r30, Z
    2c0c:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <timer2_pin_mask>
    2c10:	7e ce       	rjmp	.-772    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:232
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
    2c12:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:233
        TCCR3B = 0;
    2c16:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:234
        bitWrite(TCCR3B, WGM32, 1);
    2c1a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2c1e:	98 60       	ori	r25, 0x08	; 8
    2c20:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:235
        bitWrite(TCCR3B, CS30, 1);
    2c24:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2c28:	91 60       	ori	r25, 0x01	; 1
    2c2a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:236
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	f9 01       	movw	r30, r18
    2c34:	e3 59       	subi	r30, 0x93	; 147
    2c36:	fd 4f       	sbci	r31, 0xFD	; 253
    2c38:	e4 91       	lpm	r30, Z
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	ee 0f       	add	r30, r30
    2c3e:	ff 1f       	adc	r31, r31
    2c40:	e3 52       	subi	r30, 0x23	; 35
    2c42:	fd 4f       	sbci	r31, 0xFD	; 253
    2c44:	45 91       	lpm	r20, Z+
    2c46:	54 91       	lpm	r21, Z
    2c48:	50 93 3d 04 	sts	0x043D, r21	; 0x80043d <timer3_pin_port+0x1>
    2c4c:	40 93 3c 04 	sts	0x043C, r20	; 0x80043c <timer3_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:237
        timer3_pin_mask = digitalPinToBitMask(_pin);
    2c50:	f9 01       	movw	r30, r18
    2c52:	e9 5e       	subi	r30, 0xE9	; 233
    2c54:	fd 4f       	sbci	r31, 0xFD	; 253
    2c56:	e4 91       	lpm	r30, Z
    2c58:	e0 93 3b 04 	sts	0x043B, r30	; 0x80043b <timer3_pin_mask>
    2c5c:	93 e0       	ldi	r25, 0x03	; 3
    2c5e:	9d 83       	std	Y+5, r25	; 0x05
    2c60:	56 ce       	rjmp	.-852    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:244
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
    2c62:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:245
        TCCR4B = 0;
    2c66:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:247
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
    2c6a:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2c6e:	98 60       	ori	r25, 0x08	; 8
    2c70:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:253
        #elif defined(CS43)
          // TODO this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
    2c74:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2c78:	91 60       	ori	r25, 0x01	; 1
    2c7a:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:254
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	f9 01       	movw	r30, r18
    2c84:	e3 59       	subi	r30, 0x93	; 147
    2c86:	fd 4f       	sbci	r31, 0xFD	; 253
    2c88:	e4 91       	lpm	r30, Z
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	e3 52       	subi	r30, 0x23	; 35
    2c92:	fd 4f       	sbci	r31, 0xFD	; 253
    2c94:	45 91       	lpm	r20, Z+
    2c96:	54 91       	lpm	r21, Z
    2c98:	50 93 36 04 	sts	0x0436, r21	; 0x800436 <timer4_pin_port+0x1>
    2c9c:	40 93 35 04 	sts	0x0435, r20	; 0x800435 <timer4_pin_port>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:255
        timer4_pin_mask = digitalPinToBitMask(_pin);
    2ca0:	f9 01       	movw	r30, r18
    2ca2:	e9 5e       	subi	r30, 0xE9	; 233
    2ca4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ca6:	e4 91       	lpm	r30, Z
    2ca8:	e0 93 34 04 	sts	0x0434, r30	; 0x800434 <timer4_pin_mask>
    2cac:	30 ce       	rjmp	.-928    	; 0x290e <tone(unsigned char, unsigned int, unsigned long)+0x76>
_Z4tonehjm():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:298

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0x01;  // ck/1: same for both timers
    2cae:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:336
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2cb0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cb2:	21 11       	cpse	r18, r1
    2cb4:	df ce       	rjmp	.-578    	; 0x2a74 <tone(unsigned char, unsigned int, unsigned long)+0x1dc>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:338
      {
        TCCR0B = (TCCR0B & 0xf8) | prescalarbits;
    2cb6:	95 b5       	in	r25, 0x25	; 37
    2cb8:	98 7f       	andi	r25, 0xF8	; 248
    2cba:	89 2b       	or	r24, r25
    2cbc:	85 bd       	out	0x25, r24	; 37
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2cbe:	2f ef       	ldi	r18, 0xFF	; 255
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2cc4:	41 14       	cp	r4, r1
    2cc6:	51 04       	cpc	r5, r1
    2cc8:	61 04       	cpc	r6, r1
    2cca:	71 04       	cpc	r7, r1
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
    2cce:	cf c0       	rjmp	.+414    	; 0x2e6e <tone(unsigned char, unsigned int, unsigned long)+0x5d6>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:389
    {
      toggle_count = 2 * frequency * duration / 1000;
    2cd0:	d8 01       	movw	r26, r16
    2cd2:	aa 0f       	add	r26, r26
    2cd4:	bb 1f       	adc	r27, r27
    2cd6:	a3 01       	movw	r20, r6
    2cd8:	92 01       	movw	r18, r4
    2cda:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__muluhisi3>
    2cde:	28 ee       	ldi	r18, 0xE8	; 232
    2ce0:	33 e0       	ldi	r19, 0x03	; 3
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
    2cea:	d3 ce       	rjmp	.-602    	; 0x2a92 <tone(unsigned char, unsigned int, unsigned long)+0x1fa>
    2cec:	b1 2c       	mov	r11, r1
    2cee:	a1 2c       	mov	r10, r1
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	72 e1       	ldi	r23, 0x12	; 18
    2cf4:	8a e7       	ldi	r24, 0x7A	; 122
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a5 01       	movw	r20, r10
    2cfa:	98 01       	movw	r18, r16
    2cfc:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2d00:	69 01       	movw	r12, r18
    2d02:	7a 01       	movw	r14, r20
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	c8 1a       	sub	r12, r24
    2d08:	d1 08       	sbc	r13, r1
    2d0a:	e1 08       	sbc	r14, r1
    2d0c:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:358
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0x01;
      if (ocr > 0xffff)
    2d0e:	c1 14       	cp	r12, r1
    2d10:	d1 04       	cpc	r13, r1
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	e9 06       	cpc	r14, r25
    2d16:	f1 04       	cpc	r15, r1
    2d18:	24 f5       	brge	.+72     	; 0x2d62 <tone(unsigned char, unsigned int, unsigned long)+0x4ca>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:357
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0x01;
    2d1a:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:364
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0x03;
      }

      if (_timer == 1)
    2d1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2d1e:	21 30       	cpi	r18, 0x01	; 1
    2d20:	89 f5       	brne	.+98     	; 0x2d84 <tone(unsigned char, unsigned int, unsigned long)+0x4ec>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0xf8) | prescalarbits;
    2d22:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    2d26:	88 7f       	andi	r24, 0xF8	; 248
    2d28:	89 2b       	or	r24, r25
    2d2a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2d2e:	2f ef       	ldi	r18, 0xFF	; 255
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2d34:	41 14       	cp	r4, r1
    2d36:	51 04       	cpc	r5, r1
    2d38:	61 04       	cpc	r6, r1
    2d3a:	71 04       	cpc	r7, r1
    2d3c:	49 f6       	brne	.-110    	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    2d3e:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    2d42:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
    2d46:	20 93 4c 04 	sts	0x044C, r18	; 0x80044c <timer1_toggle_count>
    2d4a:	30 93 4d 04 	sts	0x044D, r19	; 0x80044d <timer1_toggle_count+0x1>
    2d4e:	40 93 4e 04 	sts	0x044E, r20	; 0x80044e <timer1_toggle_count+0x2>
    2d52:	50 93 4f 04 	sts	0x044F, r21	; 0x80044f <timer1_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
    2d56:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:421
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    2d60:	ba cd       	rjmp	.-1164   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:360
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0x01;
      if (ocr > 0xffff)
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    2d62:	68 e4       	ldi	r22, 0x48	; 72
    2d64:	78 ee       	ldi	r23, 0xE8	; 232
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a5 01       	movw	r20, r10
    2d6c:	98 01       	movw	r18, r16
    2d6e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2d72:	69 01       	movw	r12, r18
    2d74:	7a 01       	movw	r14, r20
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	c8 1a       	sub	r12, r24
    2d7a:	d1 08       	sbc	r13, r1
    2d7c:	e1 08       	sbc	r14, r1
    2d7e:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0x03;
    2d80:	93 e0       	ldi	r25, 0x03	; 3
    2d82:	cc cf       	rjmp	.-104    	; 0x2d1c <tone(unsigned char, unsigned int, unsigned long)+0x484>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:371
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0xf8) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    2d84:	8d 81       	ldd	r24, Y+5	; 0x05
    2d86:	83 30       	cpi	r24, 0x03	; 3
    2d88:	09 f5       	brne	.+66     	; 0x2dcc <tone(unsigned char, unsigned int, unsigned long)+0x534>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:372
        TCCR3B = (TCCR3B & 0xf8) | prescalarbits;
    2d8a:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    2d8e:	88 7f       	andi	r24, 0xF8	; 248
    2d90:	89 2b       	or	r24, r25
    2d92:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2d96:	2f ef       	ldi	r18, 0xFF	; 255
    2d98:	3f ef       	ldi	r19, 0xFF	; 255
    2d9a:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2d9c:	41 14       	cp	r4, r1
    2d9e:	51 04       	cpc	r5, r1
    2da0:	61 04       	cpc	r6, r1
    2da2:	71 04       	cpc	r7, r1
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <tone(unsigned char, unsigned int, unsigned long)+0x510>
    2da6:	94 cf       	rjmp	.-216    	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:433
        break;
#endif

#if defined(OCR3A) && defined(TIMSK3) && defined(OCIE3A)
      case 3:
        OCR3A = ocr;
    2da8:	d0 92 99 00 	sts	0x0099, r13	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    2dac:	c0 92 98 00 	sts	0x0098, r12	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:434
        timer3_toggle_count = toggle_count;
    2db0:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <timer3_toggle_count>
    2db4:	30 93 3f 04 	sts	0x043F, r19	; 0x80043f <timer3_toggle_count+0x1>
    2db8:	40 93 40 04 	sts	0x0440, r20	; 0x800440 <timer3_toggle_count+0x2>
    2dbc:	50 93 41 04 	sts	0x0441, r21	; 0x800441 <timer3_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:435
        bitWrite(TIMSK3, OCIE3A, 1);
    2dc0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2dc4:	82 60       	ori	r24, 0x02	; 2
    2dc6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:436
        break;
    2dca:	85 cd       	rjmp	.-1270   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:375
#if defined(TCCR3B)
      else if (_timer == 3)
        TCCR3B = (TCCR3B & 0xf8) | prescalarbits;
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
    2dcc:	2d 81       	ldd	r18, Y+5	; 0x05
    2dce:	24 30       	cpi	r18, 0x04	; 4
    2dd0:	09 f5       	brne	.+66     	; 0x2e14 <tone(unsigned char, unsigned int, unsigned long)+0x57c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:376
        TCCR4B = (TCCR4B & 0xf8) | prescalarbits;
    2dd2:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    2dd6:	88 7f       	andi	r24, 0xF8	; 248
    2dd8:	89 2b       	or	r24, r25
    2dda:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2dde:	2f ef       	ldi	r18, 0xFF	; 255
    2de0:	3f ef       	ldi	r19, 0xFF	; 255
    2de2:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2de4:	41 14       	cp	r4, r1
    2de6:	51 04       	cpc	r5, r1
    2de8:	61 04       	cpc	r6, r1
    2dea:	71 04       	cpc	r7, r1
    2dec:	09 f0       	breq	.+2      	; 0x2df0 <tone(unsigned char, unsigned int, unsigned long)+0x558>
    2dee:	70 cf       	rjmp	.-288    	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:441
        break;
#endif

#if defined(OCR4A) && defined(TIMSK4) && defined(OCIE4A)
      case 4:
        OCR4A = ocr;
    2df0:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    2df4:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:442
        timer4_toggle_count = toggle_count;
    2df8:	20 93 37 04 	sts	0x0437, r18	; 0x800437 <timer4_toggle_count>
    2dfc:	30 93 38 04 	sts	0x0438, r19	; 0x800438 <timer4_toggle_count+0x1>
    2e00:	40 93 39 04 	sts	0x0439, r20	; 0x800439 <timer4_toggle_count+0x2>
    2e04:	50 93 3a 04 	sts	0x043A, r21	; 0x80043a <timer4_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:443
        bitWrite(TIMSK4, OCIE4A, 1);
    2e08:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2e0c:	82 60       	ori	r24, 0x02	; 2
    2e0e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:444
        break;
    2e12:	61 cd       	rjmp	.-1342   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:379
#if defined(TCCR4B)
      else if (_timer == 4)
        TCCR4B = (TCCR4B & 0xf8) | prescalarbits;
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	85 30       	cpi	r24, 0x05	; 5
    2e18:	09 f0       	breq	.+2      	; 0x2e1c <tone(unsigned char, unsigned int, unsigned long)+0x584>
    2e1a:	32 ce       	rjmp	.-924    	; 0x2a80 <tone(unsigned char, unsigned int, unsigned long)+0x1e8>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:380
        TCCR5B = (TCCR5B & 0xf8) | prescalarbits;
    2e1c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
    2e20:	88 7f       	andi	r24, 0xF8	; 248
    2e22:	89 2b       	or	r24, r25
    2e24:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    2e28:	2f ef       	ldi	r18, 0xFF	; 255
    2e2a:	3f ef       	ldi	r19, 0xFF	; 255
    2e2c:	a9 01       	movw	r20, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    2e2e:	41 14       	cp	r4, r1
    2e30:	51 04       	cpc	r5, r1
    2e32:	61 04       	cpc	r6, r1
    2e34:	71 04       	cpc	r7, r1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <tone(unsigned char, unsigned int, unsigned long)+0x5a2>
    2e38:	4b cf       	rjmp	.-362    	; 0x2cd0 <tone(unsigned char, unsigned int, unsigned long)+0x438>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:449
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
    2e3a:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    2e3e:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:450
        timer5_toggle_count = toggle_count;
    2e42:	20 93 30 04 	sts	0x0430, r18	; 0x800430 <timer5_toggle_count>
    2e46:	30 93 31 04 	sts	0x0431, r19	; 0x800431 <timer5_toggle_count+0x1>
    2e4a:	40 93 32 04 	sts	0x0432, r20	; 0x800432 <timer5_toggle_count+0x2>
    2e4e:	50 93 33 04 	sts	0x0433, r21	; 0x800433 <timer5_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:451
        bitWrite(TIMSK5, OCIE5A, 1);
    2e52:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2e56:	82 60       	ori	r24, 0x02	; 2
    2e58:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    2e5c:	3c cd       	rjmp	.-1416   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	84 30       	cpi	r24, 0x04	; 4
    2e62:	31 f2       	breq	.-116    	; 0x2df0 <tone(unsigned char, unsigned int, unsigned long)+0x558>
    2e64:	0c f4       	brge	.+2      	; 0x2e68 <tone(unsigned char, unsigned int, unsigned long)+0x5d0>
    2e66:	a0 cf       	rjmp	.-192    	; 0x2da8 <tone(unsigned char, unsigned int, unsigned long)+0x510>
    2e68:	85 30       	cpi	r24, 0x05	; 5
    2e6a:	39 f3       	breq	.-50     	; 0x2e3a <tone(unsigned char, unsigned int, unsigned long)+0x5a2>
    2e6c:	34 cd       	rjmp	.-1432   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:404
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    2e6e:	c7 bc       	out	0x27, r12	; 39
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:405
        timer0_toggle_count = toggle_count;
    2e70:	20 93 53 04 	sts	0x0453, r18	; 0x800453 <timer0_toggle_count>
    2e74:	30 93 54 04 	sts	0x0454, r19	; 0x800454 <timer0_toggle_count+0x1>
    2e78:	40 93 55 04 	sts	0x0455, r20	; 0x800455 <timer0_toggle_count+0x2>
    2e7c:	50 93 56 04 	sts	0x0456, r21	; 0x800456 <timer0_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:406
        bitWrite(TIMSK0, OCIE0A, 1);
    2e80:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    2e84:	82 60       	ori	r24, 0x02	; 2
    2e86:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:407
        break;
    2e8a:	25 cd       	rjmp	.-1462   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    2e8c:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
    2e90:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <timer2_toggle_count>
    2e94:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <timer2_toggle_count+0x1>
    2e98:	40 93 47 04 	sts	0x0447, r20	; 0x800447 <timer2_toggle_count+0x2>
    2e9c:	50 93 48 04 	sts	0x0448, r21	; 0x800448 <timer2_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
    2ea0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2ea4:	82 60       	ori	r24, 0x02	; 2
    2ea6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:428
        break;
    2eaa:	15 cd       	rjmp	.-1494   	; 0x28d6 <tone(unsigned char, unsigned int, unsigned long)+0x3e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:312
          prescalarbits = 0x03;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2eac:	68 e4       	ldi	r22, 0x48	; 72
    2eae:	78 ee       	ldi	r23, 0xE8	; 232
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a5 01       	movw	r20, r10
    2eb6:	94 01       	movw	r18, r8
    2eb8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2ebc:	69 01       	movw	r12, r18
    2ebe:	7a 01       	movw	r14, r20
    2ec0:	91 e0       	ldi	r25, 0x01	; 1
    2ec2:	c9 1a       	sub	r12, r25
    2ec4:	d1 08       	sbc	r13, r1
    2ec6:	e1 08       	sbc	r14, r1
    2ec8:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0x05;
          }

          if (ocr > 255)
    2eca:	83 e0       	ldi	r24, 0x03	; 3
    2ecc:	2f ef       	ldi	r18, 0xFF	; 255
    2ece:	c2 16       	cp	r12, r18
    2ed0:	d1 04       	cpc	r13, r1
    2ed2:	e1 04       	cpc	r14, r1
    2ed4:	f1 04       	cpc	r15, r1
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <tone(unsigned char, unsigned int, unsigned long)+0x642>
    2ed8:	0c f4       	brge	.+2      	; 0x2edc <tone(unsigned char, unsigned int, unsigned long)+0x644>
    2eda:	ea ce       	rjmp	.-556    	; 0x2cb0 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    2edc:	62 e1       	ldi	r22, 0x12	; 18
    2ede:	7a e7       	ldi	r23, 0x7A	; 122
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a5 01       	movw	r20, r10
    2ee6:	94 01       	movw	r18, r8
    2ee8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <__divmodsi4>
    2eec:	69 01       	movw	r12, r18
    2eee:	7a 01       	movw	r14, r20
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	c9 1a       	sub	r12, r25
    2ef4:	d1 08       	sbc	r13, r1
    2ef6:	e1 08       	sbc	r14, r1
    2ef8:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x04 : 0x06;
            if (ocr > 255)
    2efa:	84 e0       	ldi	r24, 0x04	; 4
    2efc:	2f ef       	ldi	r18, 0xFF	; 255
    2efe:	c2 16       	cp	r12, r18
    2f00:	d1 04       	cpc	r13, r1
    2f02:	e1 04       	cpc	r14, r1
    2f04:	f1 04       	cpc	r15, r1
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <tone(unsigned char, unsigned int, unsigned long)+0x672>
    2f08:	08 f4       	brcc	.+2      	; 0x2f0c <tone(unsigned char, unsigned int, unsigned long)+0x674>
    2f0a:	d2 ce       	rjmp	.-604    	; 0x2cb0 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    2f0c:	c9 80       	ldd	r12, Y+1	; 0x01
    2f0e:	da 80       	ldd	r13, Y+2	; 0x02
    2f10:	eb 80       	ldd	r14, Y+3	; 0x03
    2f12:	fc 80       	ldd	r15, Y+4	; 0x04
    2f14:	9a e0       	ldi	r25, 0x0A	; 10
    2f16:	f5 94       	asr	r15
    2f18:	e7 94       	ror	r14
    2f1a:	d7 94       	ror	r13
    2f1c:	c7 94       	ror	r12
    2f1e:	9a 95       	dec	r25
    2f20:	d1 f7       	brne	.-12     	; 0x2f16 <tone(unsigned char, unsigned int, unsigned long)+0x67e>
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	c8 1a       	sub	r12, r24
    2f26:	d1 08       	sbc	r13, r1
    2f28:	e1 08       	sbc	r14, r1
    2f2a:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0x05 : 0x07;
    2f2c:	85 e0       	ldi	r24, 0x05	; 5
    2f2e:	c0 ce       	rjmp	.-640    	; 0x2cb0 <tone(unsigned char, unsigned int, unsigned long)+0x418>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0x03;
        }

        if (ocr > 255)
    2f30:	8f ef       	ldi	r24, 0xFF	; 255
    2f32:	c8 16       	cp	r12, r24
    2f34:	d1 04       	cpc	r13, r1
    2f36:	e1 04       	cpc	r14, r1
    2f38:	f1 04       	cpc	r15, r1
    2f3a:	11 f0       	breq	.+4      	; 0x2f40 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <tone(unsigned char, unsigned int, unsigned long)+0x6a8>
    2f3e:	b6 cf       	rjmp	.-148    	; 0x2eac <tone(unsigned char, unsigned int, unsigned long)+0x614>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0x01;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0x02;  // ck/8: same for both timers
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	b6 ce       	rjmp	.-660    	; 0x2cb0 <tone(unsigned char, unsigned int, unsigned long)+0x418>

00002f44 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    2f44:	82 30       	cpi	r24, 0x02	; 2
    2f46:	a9 f0       	breq	.+42     	; 0x2f72 <disableTimer(unsigned char)+0x2e>
    2f48:	28 f4       	brcc	.+10     	; 0x2f54 <disableTimer(unsigned char)+0x10>
    2f4a:	88 23       	and	r24, r24
    2f4c:	49 f0       	breq	.+18     	; 0x2f60 <disableTimer(unsigned char)+0x1c>
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	51 f0       	breq	.+20     	; 0x2f66 <disableTimer(unsigned char)+0x22>
    2f52:	08 95       	ret
    2f54:	84 30       	cpi	r24, 0x04	; 4
    2f56:	21 f1       	breq	.+72     	; 0x2fa0 <disableTimer(unsigned char)+0x5c>
    2f58:	e8 f0       	brcs	.+58     	; 0x2f94 <disableTimer(unsigned char)+0x50>
    2f5a:	85 30       	cpi	r24, 0x05	; 5
    2f5c:	39 f1       	breq	.+78     	; 0x2fac <disableTimer(unsigned char)+0x68>
    2f5e:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:469
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    2f60:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:473
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    2f64:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    2f66:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
    2f6a:	8d 7f       	andi	r24, 0xFD	; 253
    2f6c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    2f70:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    2f72:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2f76:	8d 7f       	andi	r24, 0xFD	; 253
    2f78:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0xf8) | (1 << CS22);
    2f82:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
    2f86:	88 7f       	andi	r24, 0xF8	; 248
    2f88:	84 60       	ori	r24, 0x04	; 4
    2f8a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    2f8e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
    2f92:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:498
      #endif
      break;

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
    2f94:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2f98:	8d 7f       	andi	r24, 0xFD	; 253
    2f9a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:499
      break;
    2f9e:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:504
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
    2fa0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2fa4:	8d 7f       	andi	r24, 0xFD	; 253
    2fa6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:505
      break;
    2faa:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:510
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
    2fac:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2fb0:	8d 7f       	andi	r24, 0xFD	; 253
    2fb2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:514
      break;
#endif
  }
}
    2fb6:	08 95       	ret

00002fb8 <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    2fb8:	cf 93       	push	r28
    2fba:	c8 2f       	mov	r28, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    2fbc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2fc0:	c8 13       	cpse	r28, r24
    2fc2:	0d c0       	rjmp	.+26     	; 0x2fde <noTone(unsigned char)+0x26>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    2fc4:	e0 ec       	ldi	r30, 0xC0	; 192
    2fc6:	f1 e0       	ldi	r31, 0x01	; 1
    2fc8:	84 91       	lpm	r24, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    2fca:	9f ef       	ldi	r25, 0xFF	; 255
    2fcc:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    2fd0:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <disableTimer(unsigned char)>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	8c 2f       	mov	r24, r28
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:532
}
    2fd8:	cf 91       	pop	r28
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    2fda:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    2fde:	8f ef       	ldi	r24, 0xFF	; 255
    2fe0:	f7 cf       	rjmp	.-18     	; 0x2fd0 <noTone(unsigned char)+0x18>

00002fe2 <__vector_13>:
__vector_13():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	0b b6       	in	r0, 0x3b	; 59
    2fee:	0f 92       	push	r0
    2ff0:	2f 93       	push	r18
    2ff2:	3f 93       	push	r19
    2ff4:	4f 93       	push	r20
    2ff6:	5f 93       	push	r21
    2ff8:	6f 93       	push	r22
    2ffa:	7f 93       	push	r23
    2ffc:	8f 93       	push	r24
    2ffe:	9f 93       	push	r25
    3000:	af 93       	push	r26
    3002:	bf 93       	push	r27
    3004:	ef 93       	push	r30
    3006:	ff 93       	push	r31
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    3008:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <timer2_toggle_count>
    300c:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <timer2_toggle_count+0x1>
    3010:	a0 91 47 04 	lds	r26, 0x0447	; 0x800447 <timer2_toggle_count+0x2>
    3014:	b0 91 48 04 	lds	r27, 0x0448	; 0x800448 <timer2_toggle_count+0x3>
    3018:	89 2b       	or	r24, r25
    301a:	8a 2b       	or	r24, r26
    301c:	8b 2b       	or	r24, r27
    301e:	e1 f1       	breq	.+120    	; 0x3098 <__vector_13+0xb6>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    3020:	90 91 42 04 	lds	r25, 0x0442	; 0x800442 <timer2_pin_mask>
    3024:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <timer2_pin_port>
    3028:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <timer2_pin_port+0x1>
    302c:	80 81       	ld	r24, Z
    302e:	89 27       	eor	r24, r25
    3030:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    3032:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <timer2_toggle_count>
    3036:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <timer2_toggle_count+0x1>
    303a:	a0 91 47 04 	lds	r26, 0x0447	; 0x800447 <timer2_toggle_count+0x2>
    303e:	b0 91 48 04 	lds	r27, 0x0448	; 0x800448 <timer2_toggle_count+0x3>
    3042:	18 16       	cp	r1, r24
    3044:	19 06       	cpc	r1, r25
    3046:	1a 06       	cpc	r1, r26
    3048:	1b 06       	cpc	r1, r27
    304a:	9c f4       	brge	.+38     	; 0x3072 <__vector_13+0x90>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    304c:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <timer2_toggle_count>
    3050:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <timer2_toggle_count+0x1>
    3054:	a0 91 47 04 	lds	r26, 0x0447	; 0x800447 <timer2_toggle_count+0x2>
    3058:	b0 91 48 04 	lds	r27, 0x0448	; 0x800448 <timer2_toggle_count+0x3>
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	a1 09       	sbc	r26, r1
    3060:	b1 09       	sbc	r27, r1
    3062:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <timer2_toggle_count>
    3066:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <timer2_toggle_count+0x1>
    306a:	a0 93 47 04 	sts	0x0447, r26	; 0x800447 <timer2_toggle_count+0x2>
    306e:	b0 93 48 04 	sts	0x0448, r27	; 0x800448 <timer2_toggle_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    3072:	ff 91       	pop	r31
    3074:	ef 91       	pop	r30
    3076:	bf 91       	pop	r27
    3078:	af 91       	pop	r26
    307a:	9f 91       	pop	r25
    307c:	8f 91       	pop	r24
    307e:	7f 91       	pop	r23
    3080:	6f 91       	pop	r22
    3082:	5f 91       	pop	r21
    3084:	4f 91       	pop	r20
    3086:	3f 91       	pop	r19
    3088:	2f 91       	pop	r18
    308a:	0f 90       	pop	r0
    308c:	0b be       	out	0x3b, r0	; 59
    308e:	0f 90       	pop	r0
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	0f 90       	pop	r0
    3094:	1f 90       	pop	r1
    3096:	18 95       	reti
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    3098:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    309c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <noTone(unsigned char)>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    30a0:	e8 cf       	rjmp	.-48     	; 0x3072 <__vector_13+0x90>

000030a2 <initVariant>:
initVariant():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    30a2:	08 95       	ret

000030a4 <main>:
main():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    30a4:	0e 94 20 19 	call	0x3240	; 0x3240 <init>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    30a8:	0e 94 51 18 	call	0x30a2	; 0x30a2 <initVariant>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    30ac:	0e 94 bf 01 	call	0x37e	; 0x37e <setup>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    30b0:	c2 e4       	ldi	r28, 0x42	; 66
    30b2:	d2 e1       	ldi	r29, 0x12	; 18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    30b4:	0e 94 12 03 	call	0x624	; 0x624 <loop>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    30b8:	20 97       	sbiw	r28, 0x00	; 0
    30ba:	e1 f3       	breq	.-8      	; 0x30b4 <main+0x10>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    30bc:	0e 94 42 12 	call	0x2484	; 0x2484 <serialEventRun()>
    30c0:	f9 cf       	rjmp	.-14     	; 0x30b4 <main+0x10>

000030c2 <__vector_23>:
__vector_23():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    30c2:	1f 92       	push	r1
    30c4:	0f 92       	push	r0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	0f 92       	push	r0
    30ca:	11 24       	eor	r1, r1
    30cc:	2f 93       	push	r18
    30ce:	3f 93       	push	r19
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    30d8:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <timer0_millis>
    30dc:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <timer0_millis+0x1>
    30e0:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <timer0_millis+0x2>
    30e4:	b0 91 5f 04 	lds	r27, 0x045F	; 0x80045f <timer0_millis+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    30e8:	30 91 5b 04 	lds	r19, 0x045B	; 0x80045b <timer0_fract>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    30ec:	23 e0       	ldi	r18, 0x03	; 3
    30ee:	23 0f       	add	r18, r19
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    30f0:	2d 37       	cpi	r18, 0x7D	; 125
    30f2:	68 f1       	brcs	.+90     	; 0x314e <__vector_23+0x8c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    30f4:	26 e8       	ldi	r18, 0x86	; 134
    30f6:	23 0f       	add	r18, r19
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    30f8:	02 96       	adiw	r24, 0x02	; 2
    30fa:	a1 1d       	adc	r26, r1
    30fc:	b1 1d       	adc	r27, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    30fe:	20 93 5b 04 	sts	0x045B, r18	; 0x80045b <timer0_fract>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    3102:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <timer0_millis>
    3106:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <timer0_millis+0x1>
    310a:	a0 93 5e 04 	sts	0x045E, r26	; 0x80045e <timer0_millis+0x2>
    310e:	b0 93 5f 04 	sts	0x045F, r27	; 0x80045f <timer0_millis+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    3112:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <timer0_overflow_count>
    3116:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <timer0_overflow_count+0x1>
    311a:	a0 91 59 04 	lds	r26, 0x0459	; 0x800459 <timer0_overflow_count+0x2>
    311e:	b0 91 5a 04 	lds	r27, 0x045A	; 0x80045a <timer0_overflow_count+0x3>
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	a1 1d       	adc	r26, r1
    3126:	b1 1d       	adc	r27, r1
    3128:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <timer0_overflow_count>
    312c:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <timer0_overflow_count+0x1>
    3130:	a0 93 59 04 	sts	0x0459, r26	; 0x800459 <timer0_overflow_count+0x2>
    3134:	b0 93 5a 04 	sts	0x045A, r27	; 0x80045a <timer0_overflow_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    3138:	bf 91       	pop	r27
    313a:	af 91       	pop	r26
    313c:	9f 91       	pop	r25
    313e:	8f 91       	pop	r24
    3140:	3f 91       	pop	r19
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	0f 90       	pop	r0
    314a:	1f 90       	pop	r1
    314c:	18 95       	reti
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	a1 1d       	adc	r26, r1
    3152:	b1 1d       	adc	r27, r1
    3154:	d4 cf       	rjmp	.-88     	; 0x30fe <__vector_23+0x3c>

00003156 <millis>:
millis():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    3156:	2f b7       	in	r18, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    3158:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    315a:	60 91 5c 04 	lds	r22, 0x045C	; 0x80045c <timer0_millis>
    315e:	70 91 5d 04 	lds	r23, 0x045D	; 0x80045d <timer0_millis+0x1>
    3162:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <timer0_millis+0x2>
    3166:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <timer0_millis+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    316a:	2f bf       	out	0x3f, r18	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    316c:	08 95       	ret

0000316e <micros>:
micros():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    316e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    3170:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    3172:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <timer0_overflow_count>
    3176:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <timer0_overflow_count+0x1>
    317a:	a0 91 59 04 	lds	r26, 0x0459	; 0x800459 <timer0_overflow_count+0x2>
    317e:	b0 91 5a 04 	lds	r27, 0x045A	; 0x80045a <timer0_overflow_count+0x3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    3182:	26 b5       	in	r18, 0x26	; 38
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3184:	a8 9b       	sbis	0x15, 0	; 21
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <micros+0x24>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    3188:	2f 3f       	cpi	r18, 0xFF	; 255
    318a:	19 f0       	breq	.+6      	; 0x3192 <micros+0x24>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	a1 1d       	adc	r26, r1
    3190:	b1 1d       	adc	r27, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    3192:	3f bf       	out	0x3f, r19	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    3194:	ba 2f       	mov	r27, r26
    3196:	a9 2f       	mov	r26, r25
    3198:	98 2f       	mov	r25, r24
    319a:	88 27       	eor	r24, r24
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	62 0f       	add	r22, r18
    31a2:	71 1d       	adc	r23, r1
    31a4:	81 1d       	adc	r24, r1
    31a6:	91 1d       	adc	r25, r1
    31a8:	42 e0       	ldi	r20, 0x02	; 2
    31aa:	66 0f       	add	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	88 1f       	adc	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	4a 95       	dec	r20
    31b4:	d1 f7       	brne	.-12     	; 0x31aa <micros+0x3c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    31b6:	08 95       	ret

000031b8 <delay>:
delay():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    31b8:	8f 92       	push	r8
    31ba:	9f 92       	push	r9
    31bc:	af 92       	push	r10
    31be:	bf 92       	push	r11
    31c0:	cf 92       	push	r12
    31c2:	df 92       	push	r13
    31c4:	ef 92       	push	r14
    31c6:	ff 92       	push	r15
    31c8:	6b 01       	movw	r12, r22
    31ca:	7c 01       	movw	r14, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    31cc:	0e 94 b7 18 	call	0x316e	; 0x316e <micros>
    31d0:	4b 01       	movw	r8, r22
    31d2:	5c 01       	movw	r10, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    31d4:	c1 14       	cp	r12, r1
    31d6:	d1 04       	cpc	r13, r1
    31d8:	e1 04       	cpc	r14, r1
    31da:	f1 04       	cpc	r15, r1
    31dc:	e9 f0       	breq	.+58     	; 0x3218 <delay+0x60>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    31de:	0e 94 37 1b 	call	0x366e	; 0x366e <yield>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    31e2:	0e 94 b7 18 	call	0x316e	; 0x316e <micros>
    31e6:	68 19       	sub	r22, r8
    31e8:	79 09       	sbc	r23, r9
    31ea:	8a 09       	sbc	r24, r10
    31ec:	9b 09       	sbc	r25, r11
    31ee:	68 3e       	cpi	r22, 0xE8	; 232
    31f0:	73 40       	sbci	r23, 0x03	; 3
    31f2:	81 05       	cpc	r24, r1
    31f4:	91 05       	cpc	r25, r1
    31f6:	70 f3       	brcs	.-36     	; 0x31d4 <delay+0x1c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    31f8:	21 e0       	ldi	r18, 0x01	; 1
    31fa:	c2 1a       	sub	r12, r18
    31fc:	d1 08       	sbc	r13, r1
    31fe:	e1 08       	sbc	r14, r1
    3200:	f1 08       	sbc	r15, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    3202:	88 ee       	ldi	r24, 0xE8	; 232
    3204:	88 0e       	add	r8, r24
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	98 1e       	adc	r9, r24
    320a:	a1 1c       	adc	r10, r1
    320c:	b1 1c       	adc	r11, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    320e:	c1 14       	cp	r12, r1
    3210:	d1 04       	cpc	r13, r1
    3212:	e1 04       	cpc	r14, r1
    3214:	f1 04       	cpc	r15, r1
    3216:	29 f7       	brne	.-54     	; 0x31e2 <delay+0x2a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    3218:	ff 90       	pop	r15
    321a:	ef 90       	pop	r14
    321c:	df 90       	pop	r13
    321e:	cf 90       	pop	r12
    3220:	bf 90       	pop	r11
    3222:	af 90       	pop	r10
    3224:	9f 90       	pop	r9
    3226:	8f 90       	pop	r8
    3228:	08 95       	ret

0000322a <delayMicroseconds>:
delayMicroseconds():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	91 05       	cpc	r25, r1
    322e:	38 f0       	brcs	.+14     	; 0x323e <delayMicroseconds+0x14>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    3238:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <delayMicroseconds+0x10>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    323e:	08 95       	ret

00003240 <init>:
init():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3240:	78 94       	sei
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3242:	84 b5       	in	r24, 0x24	; 36
    3244:	83 60       	ori	r24, 0x03	; 3
    3246:	84 bd       	out	0x24, r24	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3248:	85 b5       	in	r24, 0x25	; 37
    324a:	83 60       	ori	r24, 0x03	; 3
    324c:	85 bd       	out	0x25, r24	; 37
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    324e:	ee e6       	ldi	r30, 0x6E	; 110
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	81 60       	ori	r24, 0x01	; 1
    3256:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3258:	e1 e8       	ldi	r30, 0x81	; 129
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3260:	80 81       	ld	r24, Z
    3262:	81 60       	ori	r24, 0x01	; 1
    3264:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3266:	e0 e8       	ldi	r30, 0x80	; 128
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	81 60       	ori	r24, 0x01	; 1
    326e:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3270:	e1 eb       	ldi	r30, 0xB1	; 177
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	84 60       	ori	r24, 0x04	; 4
    3278:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    327a:	e0 eb       	ldi	r30, 0xB0	; 176
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	81 60       	ori	r24, 0x01	; 1
    3282:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    3284:	e1 e9       	ldi	r30, 0x91	; 145
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	83 60       	ori	r24, 0x03	; 3
    328c:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    328e:	e0 e9       	ldi	r30, 0x90	; 144
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	81 60       	ori	r24, 0x01	; 1
    3296:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    3298:	e1 ea       	ldi	r30, 0xA1	; 161
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	83 60       	ori	r24, 0x03	; 3
    32a0:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    32a2:	e0 ea       	ldi	r30, 0xA0	; 160
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	81 60       	ori	r24, 0x01	; 1
    32aa:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1043
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
  TCCR5B |= _BV(CS51) | _BV(CS50); // Set timer 5 prescale factor to 64
    32ac:	e1 e2       	ldi	r30, 0x21	; 33
    32ae:	f1 e0       	ldi	r31, 0x01	; 1
    32b0:	80 81       	ld	r24, Z
    32b2:	83 60       	ori	r24, 0x03	; 3
    32b4:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1044
  TCCR5A |= _BV(WGM50);            // Put timer 5 in 8-bit phase correct pwm mode
    32b6:	e0 e2       	ldi	r30, 0x20	; 32
    32b8:	f1 e0       	ldi	r31, 0x01	; 1
    32ba:	80 81       	ld	r24, Z
    32bc:	81 60       	ori	r24, 0x01	; 1
    32be:	80 83       	st	Z, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    32c0:	87 e8       	ldi	r24, 0x87	; 135
    32c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    32c6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    32ca:	08 95       	ret

000032cc <analogWrite>:
analogWrite():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:95
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    32cc:	1f 93       	push	r17
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	18 2f       	mov	r17, r24
    32d4:	eb 01       	movw	r28, r22
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:101
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    32d6:	61 e0       	ldi	r22, 0x01	; 1
    32d8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <pinMode>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:102
  if (val == 0)
    32dc:	20 97       	sbiw	r28, 0x00	; 0
    32de:	39 f4       	brne	.+14     	; 0x32ee <analogWrite+0x22>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:104
  {
    digitalWrite(pin, LOW);
    32e0:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:108
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    32e2:	81 2f       	mov	r24, r17
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    32ea:	0c 94 e0 1a 	jmp	0x35c0	; 0x35c0 <digitalWrite>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:106
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    32ee:	cf 3f       	cpi	r28, 0xFF	; 255
    32f0:	d1 05       	cpc	r29, r1
    32f2:	11 f4       	brne	.+4      	; 0x32f8 <analogWrite+0x2c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:108
  {
    digitalWrite(pin, HIGH);
    32f4:	61 e0       	ldi	r22, 0x01	; 1
    32f6:	f5 cf       	rjmp	.-22     	; 0x32e2 <analogWrite+0x16>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:112
  }
  else
  {
    switch(digitalPinToTimer(pin))
    32f8:	e1 2f       	mov	r30, r17
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	ef 53       	subi	r30, 0x3F	; 63
    32fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3300:	e4 91       	lpm	r30, Z
    3302:	e2 50       	subi	r30, 0x02	; 2
    3304:	e2 31       	cpi	r30, 0x12	; 18
    3306:	08 f0       	brcs	.+2      	; 0x330a <analogWrite+0x3e>
    3308:	b3 c0       	rjmp	.+358    	; 0x3470 <analogWrite+0x1a4>
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	88 27       	eor	r24, r24
    330e:	e4 57       	subi	r30, 0x74	; 116
    3310:	f6 4e       	sbci	r31, 0xE6	; 230
    3312:	8f 4f       	sbci	r24, 0xFF	; 255
    3314:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__tablejump2__>
    3318:	9e 19       	sub	r25, r14
    331a:	a6 19       	sub	r26, r6
    331c:	ab 19       	sub	r26, r11
    331e:	b5 19       	sub	r27, r5
    3320:	bf 19       	sub	r27, r15
    3322:	38 1a       	sub	r3, r24
    3324:	c9 19       	sub	r28, r9
    3326:	d1 19       	sub	r29, r1
    3328:	d9 19       	sub	r29, r9
    332a:	e3 19       	sub	r30, r3
    332c:	ed 19       	sub	r30, r13
    332e:	f7 19       	sub	r31, r7
    3330:	06 1a       	sub	r0, r22
    3332:	10 1a       	sub	r1, r16
    3334:	38 1a       	sub	r3, r24
    3336:	1a 1a       	sub	r1, r26
    3338:	24 1a       	sub	r2, r20
    333a:	2e 1a       	sub	r2, r30
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:132
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
    333c:	84 b5       	in	r24, 0x24	; 36
    333e:	80 68       	ori	r24, 0x80	; 128
    3340:	84 bd       	out	0x24, r24	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:133
        OCR0A = val; // set pwm duty
    3342:	c7 bd       	out	0x27, r28	; 39
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:299
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:140
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
    334c:	84 b5       	in	r24, 0x24	; 36
    334e:	80 62       	ori	r24, 0x20	; 32
    3350:	84 bd       	out	0x24, r24	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:141
        OCR0B = val; // set pwm duty
    3352:	c8 bd       	out	0x28, r28	; 40
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:142
        break;
    3354:	f7 cf       	rjmp	.-18     	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:148
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    3356:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    335a:	80 68       	ori	r24, 0x80	; 128
    335c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:149
        OCR1A = val; // set pwm duty
    3360:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
    3364:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:150
        break;
    3368:	ed cf       	rjmp	.-38     	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:156
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    336a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    336e:	80 62       	ori	r24, 0x20	; 32
    3370:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:157
        OCR1B = val; // set pwm duty
    3374:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
    3378:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:158
        break;
    337c:	e3 cf       	rjmp	.-58     	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:164
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
    337e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    3382:	88 60       	ori	r24, 0x08	; 8
    3384:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:165
        OCR1C = val; // set pwm duty
    3388:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
    338c:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:166
        break;
    3390:	d9 cf       	rjmp	.-78     	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:180
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
    3392:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    3396:	80 68       	ori	r24, 0x80	; 128
    3398:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:181
        OCR2A = val; // set pwm duty
    339c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:182
        break;
    33a0:	d1 cf       	rjmp	.-94     	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:188
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
    33a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    33a6:	80 62       	ori	r24, 0x20	; 32
    33a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:189
        OCR2B = val; // set pwm duty
    33ac:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:190
        break;
    33b0:	c9 cf       	rjmp	.-110    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:196
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
    33b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33b6:	80 68       	ori	r24, 0x80	; 128
    33b8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:197
        OCR3A = val; // set pwm duty
    33bc:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
    33c0:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:198
        break;
    33c4:	bf cf       	rjmp	.-130    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:209
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
    33c6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33ca:	80 62       	ori	r24, 0x20	; 32
    33cc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:210
        OCR3B = val; // set pwm duty
    33d0:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
    33d4:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:211
        break;
    33d8:	b5 cf       	rjmp	.-150    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:217
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
    33da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    33de:	88 60       	ori	r24, 0x08	; 8
    33e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:218
        OCR3C = val; // set pwm duty
    33e4:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
    33e8:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:219
        break;
    33ec:	ab cf       	rjmp	.-170    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:225
      #endif

      #if defined(TCCR4A)
      case TIMER4A:
        //connect pwm to pin on timer 4, channel A
        TCCR4A |= _BV(COM4A1);
    33ee:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    33f2:	80 68       	ori	r24, 0x80	; 128
    33f4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:227
        #if defined(COM4A0)    // only used on 32U4
          TCCR4A &= ~_BV(COM4A0);
    33f8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    33fc:	8f 7b       	andi	r24, 0xBF	; 191
    33fe:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:229
        #endif
        OCR4A = val;  // set pwm duty
    3402:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    3406:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:230
        break;
    340a:	9c cf       	rjmp	.-200    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:241
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR4A |= _BV(COM4B1);
    340c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3410:	80 62       	ori	r24, 0x20	; 32
    3412:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:242
        OCR4B = val; // set pwm duty
    3416:	d0 93 ab 00 	sts	0x00AB, r29	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7000ab>
    341a:	c0 93 aa 00 	sts	0x00AA, r28	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7000aa>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:243
        break;
    341e:	92 cf       	rjmp	.-220    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:249
      #endif

      #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        // connect pwm to pin on timer 4, channel C
        TCCR4A |= _BV(COM4C1);
    3420:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3424:	88 60       	ori	r24, 0x08	; 8
    3426:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:250
        OCR4C = val; // set pwm duty
    342a:	d0 93 ad 00 	sts	0x00AD, r29	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7000ad>
    342e:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7000ac>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:251
        break;
    3432:	88 cf       	rjmp	.-240    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:269

              
      #if defined(TCCR5A) && defined(COM5A1)
      case TIMER5A:
        // connect pwm to pin on timer 5, channel A
        TCCR5A |= _BV(COM5A1);
    3434:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3438:	80 68       	ori	r24, 0x80	; 128
    343a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:270
        OCR5A = val; // set pwm duty
    343e:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    3442:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:271
        break;
    3446:	7e cf       	rjmp	.-260    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:277
      #endif

      #if defined(TCCR5A) && defined(COM5B1)
      case TIMER5B:
        // connect pwm to pin on timer 5, channel B
        TCCR5A |= _BV(COM5B1);
    3448:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    344c:	80 62       	ori	r24, 0x20	; 32
    344e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:278
        OCR5B = val; // set pwm duty
    3452:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    3456:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:279
        break;
    345a:	74 cf       	rjmp	.-280    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:285
      #endif

      #if defined(TCCR5A) && defined(COM5C1)
      case TIMER5C:
        // connect pwm to pin on timer 5, channel C
        TCCR5A |= _BV(COM5C1);
    345c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3460:	88 60       	ori	r24, 0x08	; 8
    3462:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:286
        OCR5C = val; // set pwm duty
    3466:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    346a:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:287
        break;
    346e:	6a cf       	rjmp	.-300    	; 0x3344 <analogWrite+0x78>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_analog.c:292
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    3470:	c0 38       	cpi	r28, 0x80	; 128
    3472:	d1 05       	cpc	r29, r1
    3474:	0c f0       	brlt	.+2      	; 0x3478 <analogWrite+0x1ac>
    3476:	3e cf       	rjmp	.-388    	; 0x32f4 <analogWrite+0x28>
    3478:	33 cf       	rjmp	.-410    	; 0x32e0 <analogWrite+0x14>

0000347a <turnOffPWM>:
turnOffPWM():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    347a:	82 50       	subi	r24, 0x02	; 2
    347c:	82 31       	cpi	r24, 0x12	; 18
    347e:	08 f0       	brcs	.+2      	; 0x3482 <turnOffPWM+0x8>
    3480:	5f c0       	rjmp	.+190    	; 0x3540 <turnOffPWM+0xc6>
    3482:	e8 2f       	mov	r30, r24
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	88 27       	eor	r24, r24
    3488:	e7 5b       	subi	r30, 0xB7	; 183
    348a:	f5 4e       	sbci	r31, 0xE5	; 229
    348c:	8f 4f       	sbci	r24, 0xFF	; 255
    348e:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__tablejump2__>
    3492:	9d 1a       	sub	r9, r29
    3494:	a1 1a       	sub	r10, r17
    3496:	5b 1a       	sub	r5, r27
    3498:	61 1a       	sub	r6, r17
    349a:	65 1a       	sub	r6, r21
    349c:	a0 1a       	sub	r10, r16
    349e:	69 1a       	sub	r6, r25
    34a0:	6f 1a       	sub	r6, r31
    34a2:	73 1a       	sub	r7, r19
    34a4:	79 1a       	sub	r7, r25
    34a6:	7d 1a       	sub	r7, r29
    34a8:	81 1a       	sub	r8, r17
    34aa:	87 1a       	sub	r8, r23
    34ac:	8b 1a       	sub	r8, r27
    34ae:	a0 1a       	sub	r10, r16
    34b0:	8f 1a       	sub	r8, r31
    34b2:	95 1a       	sub	r9, r21
    34b4:	99 1a       	sub	r9, r25
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    34b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    34ba:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    34bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    34c0:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    34c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    34c6:	8f 7d       	andi	r24, 0xDF	; 223
    34c8:	f9 cf       	rjmp	.-14     	; 0x34bc <turnOffPWM+0x42>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    34ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    34ce:	87 7f       	andi	r24, 0xF7	; 247
    34d0:	f5 cf       	rjmp	.-22     	; 0x34bc <turnOffPWM+0x42>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    34d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    34d6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    34d8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    34dc:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    34de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    34e2:	8f 7d       	andi	r24, 0xDF	; 223
    34e4:	f9 cf       	rjmp	.-14     	; 0x34d8 <turnOffPWM+0x5e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    34e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    34ea:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    34ec:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    34f0:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    34f2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    34f6:	8f 7d       	andi	r24, 0xDF	; 223
    34f8:	f9 cf       	rjmp	.-14     	; 0x34ec <turnOffPWM+0x72>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    34fa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    34fe:	87 7f       	andi	r24, 0xF7	; 247
    3500:	f5 cf       	rjmp	.-22     	; 0x34ec <turnOffPWM+0x72>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    3502:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3506:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        TCCR4A &= ~_BV(COM4B1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    3508:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:144
        break;
    350c:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    350e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    3512:	8f 7d       	andi	r24, 0xDF	; 223
    3514:	f9 cf       	rjmp	.-14     	; 0x3508 <turnOffPWM+0x8e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:143
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4C1)
      case TIMER4C:
        TCCR4A &= ~_BV(COM4C1);
    3516:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    351a:	87 7f       	andi	r24, 0xF7	; 247
    351c:	f5 cf       	rjmp	.-22     	; 0x3508 <turnOffPWM+0x8e>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:155
    #endif

    // Timer5
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
    351e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3522:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    3524:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:162
        break;
    3528:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:158
    #if defined(TCCR5A)
      case TIMER5A:
        TCCR5A &= ~_BV(COM5A1);
        break;
      case TIMER5B:
        TCCR5A &= ~_BV(COM5B1);
    352a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    352e:	8f 7d       	andi	r24, 0xDF	; 223
    3530:	f9 cf       	rjmp	.-14     	; 0x3524 <turnOffPWM+0xaa>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:161
        break;
      case TIMER5C:
        TCCR5A &= ~_BV(COM5C1);
    3532:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    3536:	87 7f       	andi	r24, 0xF7	; 247
    3538:	f5 cf       	rjmp	.-22     	; 0x3524 <turnOffPWM+0xaa>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    353a:	84 b5       	in	r24, 0x24	; 36
    353c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    353e:	84 bd       	out	0x24, r24	; 36
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    3540:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    3542:	84 b5       	in	r24, 0x24	; 36
    3544:	8f 7d       	andi	r24, 0xDF	; 223
    3546:	fb cf       	rjmp	.-10     	; 0x353e <turnOffPWM+0xc4>

00003548 <pinMode>:
pinMode():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	fc 01       	movw	r30, r24
    3550:	e9 5e       	subi	r30, 0xE9	; 233
    3552:	fd 4f       	sbci	r31, 0xFD	; 253
    3554:	24 91       	lpm	r18, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    3556:	83 59       	subi	r24, 0x93	; 147
    3558:	9d 4f       	sbci	r25, 0xFD	; 253
    355a:	fc 01       	movw	r30, r24
    355c:	84 91       	lpm	r24, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    355e:	88 23       	and	r24, r24
    3560:	c9 f0       	breq	.+50     	; 0x3594 <pinMode+0x4c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	fc 01       	movw	r30, r24
    356a:	e9 50       	subi	r30, 0x09	; 9
    356c:	fd 4f       	sbci	r31, 0xFD	; 253
    356e:	a5 91       	lpm	r26, Z+
    3570:	b4 91       	lpm	r27, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    3572:	fc 01       	movw	r30, r24
    3574:	e3 52       	subi	r30, 0x23	; 35
    3576:	fd 4f       	sbci	r31, 0xFD	; 253
    3578:	c5 91       	lpm	r28, Z+
    357a:	d4 91       	lpm	r29, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    357c:	61 11       	cpse	r22, r1
    357e:	0d c0       	rjmp	.+26     	; 0x359a <pinMode+0x52>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    3580:	9f b7       	in	r25, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    3582:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    3584:	8c 91       	ld	r24, X
    3586:	20 95       	com	r18
    3588:	82 23       	and	r24, r18
    358a:	8c 93       	st	X, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    358c:	88 81       	ld	r24, Y
    358e:	28 23       	and	r18, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    3590:	28 83       	st	Y, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    3592:	9f bf       	out	0x3f, r25	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    359a:	62 30       	cpi	r22, 0x02	; 2
    359c:	51 f4       	brne	.+20     	; 0x35b2 <pinMode+0x6a>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    359e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    35a0:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    35a2:	3c 91       	ld	r19, X
    35a4:	82 2f       	mov	r24, r18
    35a6:	80 95       	com	r24
    35a8:	83 23       	and	r24, r19
    35aa:	8c 93       	st	X, r24
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    35ac:	e8 81       	ld	r30, Y
    35ae:	2e 2b       	or	r18, r30
    35b0:	ef cf       	rjmp	.-34     	; 0x3590 <pinMode+0x48>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    35b2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    35b4:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    35b6:	ec 91       	ld	r30, X
    35b8:	2e 2b       	or	r18, r30
    35ba:	2c 93       	st	X, r18
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    35bc:	8f bf       	out	0x3f, r24	; 63
    35be:	ea cf       	rjmp	.-44     	; 0x3594 <pinMode+0x4c>

000035c0 <digitalWrite>:
digitalWrite():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	f9 01       	movw	r30, r18
    35cc:	ef 53       	subi	r30, 0x3F	; 63
    35ce:	fe 4f       	sbci	r31, 0xFE	; 254
    35d0:	84 91       	lpm	r24, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    35d2:	f9 01       	movw	r30, r18
    35d4:	e9 5e       	subi	r30, 0xE9	; 233
    35d6:	fd 4f       	sbci	r31, 0xFD	; 253
    35d8:	d4 91       	lpm	r29, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    35da:	f9 01       	movw	r30, r18
    35dc:	e3 59       	subi	r30, 0x93	; 147
    35de:	fd 4f       	sbci	r31, 0xFD	; 253
    35e0:	c4 91       	lpm	r28, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    35e2:	cc 23       	and	r28, r28
    35e4:	a9 f0       	breq	.+42     	; 0x3610 <digitalWrite+0x50>
    35e6:	16 2f       	mov	r17, r22
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    35e8:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    35ea:	0e 94 3d 1a 	call	0x347a	; 0x347a <turnOffPWM>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    35ee:	ec 2f       	mov	r30, r28
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	ee 0f       	add	r30, r30
    35f4:	ff 1f       	adc	r31, r31
    35f6:	e3 52       	subi	r30, 0x23	; 35
    35f8:	fd 4f       	sbci	r31, 0xFD	; 253
    35fa:	a5 91       	lpm	r26, Z+
    35fc:	b4 91       	lpm	r27, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    35fe:	8f b7       	in	r24, 0x3f	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    3600:	f8 94       	cli
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    3602:	ec 91       	ld	r30, X
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    3604:	11 11       	cpse	r17, r1
    3606:	08 c0       	rjmp	.+16     	; 0x3618 <digitalWrite+0x58>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    3608:	d0 95       	com	r29
    360a:	de 23       	and	r29, r30
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    360c:	dc 93       	st	X, r29
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    360e:	8f bf       	out	0x3f, r24	; 63
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    3618:	de 2b       	or	r29, r30
    361a:	f8 cf       	rjmp	.-16     	; 0x360c <digitalWrite+0x4c>

0000361c <digitalRead>:
digitalRead():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	f9 01       	movw	r30, r18
    3626:	ef 53       	subi	r30, 0x3F	; 63
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	84 91       	lpm	r24, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    362c:	f9 01       	movw	r30, r18
    362e:	e9 5e       	subi	r30, 0xE9	; 233
    3630:	fd 4f       	sbci	r31, 0xFD	; 253
    3632:	d4 91       	lpm	r29, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    3634:	f9 01       	movw	r30, r18
    3636:	e3 59       	subi	r30, 0x93	; 147
    3638:	fd 4f       	sbci	r31, 0xFD	; 253
    363a:	c4 91       	lpm	r28, Z
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    363c:	cc 23       	and	r28, r28
    363e:	a1 f0       	breq	.+40     	; 0x3668 <digitalRead+0x4c>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3640:	81 11       	cpse	r24, r1
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    3642:	0e 94 3d 1a 	call	0x347a	; 0x347a <turnOffPWM>
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    3646:	ec 2f       	mov	r30, r28
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	ee 0f       	add	r30, r30
    364c:	ff 1f       	adc	r31, r31
    364e:	ed 53       	subi	r30, 0x3D	; 61
    3650:	fd 4f       	sbci	r31, 0xFD	; 253
    3652:	a5 91       	lpm	r26, Z+
    3654:	b4 91       	lpm	r27, Z
    3656:	ec 91       	ld	r30, X
    3658:	ed 23       	and	r30, r29
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	09 f4       	brne	.+2      	; 0x3662 <digitalRead+0x46>
    3660:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	08 95       	ret
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	fa cf       	rjmp	.-12     	; 0x3662 <digitalRead+0x46>

0000366e <yield>:
__empty():
C:\Users\artem\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    366e:	08 95       	ret

00003670 <__subsf3>:
__subsf3():
    3670:	50 58       	subi	r21, 0x80	; 128

00003672 <__addsf3>:
    3672:	bb 27       	eor	r27, r27
    3674:	aa 27       	eor	r26, r26
    3676:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__addsf3x>
    367a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__fp_round>
__addsf3():
    367e:	0e 94 21 1c 	call	0x3842	; 0x3842 <__fp_pscA>
    3682:	38 f0       	brcs	.+14     	; 0x3692 <__addsf3+0x20>
    3684:	0e 94 28 1c 	call	0x3850	; 0x3850 <__fp_pscB>
    3688:	20 f0       	brcs	.+8      	; 0x3692 <__addsf3+0x20>
    368a:	39 f4       	brne	.+14     	; 0x369a <__addsf3+0x28>
    368c:	9f 3f       	cpi	r25, 0xFF	; 255
    368e:	19 f4       	brne	.+6      	; 0x3696 <__addsf3+0x24>
    3690:	26 f4       	brtc	.+8      	; 0x369a <__addsf3+0x28>
    3692:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_nan>
    3696:	0e f4       	brtc	.+2      	; 0x369a <__addsf3+0x28>
    3698:	e0 95       	com	r30
    369a:	e7 fb       	bst	r30, 7
    369c:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__fp_inf>

000036a0 <__addsf3x>:
__addsf3x():
    36a0:	e9 2f       	mov	r30, r25
    36a2:	0e 94 40 1c 	call	0x3880	; 0x3880 <__fp_split3>
    36a6:	58 f3       	brcs	.-42     	; 0x367e <__addsf3+0xc>
    36a8:	ba 17       	cp	r27, r26
    36aa:	62 07       	cpc	r22, r18
    36ac:	73 07       	cpc	r23, r19
    36ae:	84 07       	cpc	r24, r20
    36b0:	95 07       	cpc	r25, r21
    36b2:	20 f0       	brcs	.+8      	; 0x36bc <__addsf3x+0x1c>
    36b4:	79 f4       	brne	.+30     	; 0x36d4 <__addsf3x+0x34>
    36b6:	a6 f5       	brtc	.+104    	; 0x3720 <__addsf3x+0x80>
    36b8:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__fp_zero>
    36bc:	0e f4       	brtc	.+2      	; 0x36c0 <__addsf3x+0x20>
    36be:	e0 95       	com	r30
    36c0:	0b 2e       	mov	r0, r27
    36c2:	ba 2f       	mov	r27, r26
    36c4:	a0 2d       	mov	r26, r0
    36c6:	0b 01       	movw	r0, r22
    36c8:	b9 01       	movw	r22, r18
    36ca:	90 01       	movw	r18, r0
    36cc:	0c 01       	movw	r0, r24
    36ce:	ca 01       	movw	r24, r20
    36d0:	a0 01       	movw	r20, r0
    36d2:	11 24       	eor	r1, r1
    36d4:	ff 27       	eor	r31, r31
    36d6:	59 1b       	sub	r21, r25
    36d8:	99 f0       	breq	.+38     	; 0x3700 <__addsf3x+0x60>
    36da:	59 3f       	cpi	r21, 0xF9	; 249
    36dc:	50 f4       	brcc	.+20     	; 0x36f2 <__addsf3x+0x52>
    36de:	50 3e       	cpi	r21, 0xE0	; 224
    36e0:	68 f1       	brcs	.+90     	; 0x373c <__addsf3x+0x9c>
    36e2:	1a 16       	cp	r1, r26
    36e4:	f0 40       	sbci	r31, 0x00	; 0
    36e6:	a2 2f       	mov	r26, r18
    36e8:	23 2f       	mov	r18, r19
    36ea:	34 2f       	mov	r19, r20
    36ec:	44 27       	eor	r20, r20
    36ee:	58 5f       	subi	r21, 0xF8	; 248
    36f0:	f3 cf       	rjmp	.-26     	; 0x36d8 <__addsf3x+0x38>
    36f2:	46 95       	lsr	r20
    36f4:	37 95       	ror	r19
    36f6:	27 95       	ror	r18
    36f8:	a7 95       	ror	r26
    36fa:	f0 40       	sbci	r31, 0x00	; 0
    36fc:	53 95       	inc	r21
    36fe:	c9 f7       	brne	.-14     	; 0x36f2 <__addsf3x+0x52>
    3700:	7e f4       	brtc	.+30     	; 0x3720 <__addsf3x+0x80>
    3702:	1f 16       	cp	r1, r31
    3704:	ba 0b       	sbc	r27, r26
    3706:	62 0b       	sbc	r22, r18
    3708:	73 0b       	sbc	r23, r19
    370a:	84 0b       	sbc	r24, r20
    370c:	ba f0       	brmi	.+46     	; 0x373c <__addsf3x+0x9c>
    370e:	91 50       	subi	r25, 0x01	; 1
    3710:	a1 f0       	breq	.+40     	; 0x373a <__addsf3x+0x9a>
    3712:	ff 0f       	add	r31, r31
    3714:	bb 1f       	adc	r27, r27
    3716:	66 1f       	adc	r22, r22
    3718:	77 1f       	adc	r23, r23
    371a:	88 1f       	adc	r24, r24
    371c:	c2 f7       	brpl	.-16     	; 0x370e <__addsf3x+0x6e>
    371e:	0e c0       	rjmp	.+28     	; 0x373c <__addsf3x+0x9c>
    3720:	ba 0f       	add	r27, r26
    3722:	62 1f       	adc	r22, r18
    3724:	73 1f       	adc	r23, r19
    3726:	84 1f       	adc	r24, r20
    3728:	48 f4       	brcc	.+18     	; 0x373c <__addsf3x+0x9c>
    372a:	87 95       	ror	r24
    372c:	77 95       	ror	r23
    372e:	67 95       	ror	r22
    3730:	b7 95       	ror	r27
    3732:	f7 95       	ror	r31
    3734:	9e 3f       	cpi	r25, 0xFE	; 254
    3736:	08 f0       	brcs	.+2      	; 0x373a <__addsf3x+0x9a>
    3738:	b0 cf       	rjmp	.-160    	; 0x369a <__addsf3+0x28>
    373a:	93 95       	inc	r25
    373c:	88 0f       	add	r24, r24
    373e:	08 f0       	brcs	.+2      	; 0x3742 <__addsf3x+0xa2>
    3740:	99 27       	eor	r25, r25
    3742:	ee 0f       	add	r30, r30
    3744:	97 95       	ror	r25
    3746:	87 95       	ror	r24
    3748:	08 95       	ret

0000374a <__fixsfsi>:
    374a:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__fixunssfsi>
    374e:	68 94       	set
    3750:	b1 11       	cpse	r27, r1
    3752:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_szero>
    3756:	08 95       	ret

00003758 <__fixunssfsi>:
    3758:	0e 94 48 1c 	call	0x3890	; 0x3890 <__fp_splitA>
    375c:	88 f0       	brcs	.+34     	; 0x3780 <__fixunssfsi+0x28>
    375e:	9f 57       	subi	r25, 0x7F	; 127
    3760:	98 f0       	brcs	.+38     	; 0x3788 <__fixunssfsi+0x30>
    3762:	b9 2f       	mov	r27, r25
    3764:	99 27       	eor	r25, r25
    3766:	b7 51       	subi	r27, 0x17	; 23
    3768:	b0 f0       	brcs	.+44     	; 0x3796 <__fixunssfsi+0x3e>
    376a:	e1 f0       	breq	.+56     	; 0x37a4 <__fixunssfsi+0x4c>
__fixunssfsi():
    376c:	66 0f       	add	r22, r22
    376e:	77 1f       	adc	r23, r23
    3770:	88 1f       	adc	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	1a f0       	brmi	.+6      	; 0x377c <__fixunssfsi+0x24>
    3776:	ba 95       	dec	r27
    3778:	c9 f7       	brne	.-14     	; 0x376c <__fixunssfsi+0x14>
    377a:	14 c0       	rjmp	.+40     	; 0x37a4 <__fixunssfsi+0x4c>
    377c:	b1 30       	cpi	r27, 0x01	; 1
    377e:	91 f0       	breq	.+36     	; 0x37a4 <__fixunssfsi+0x4c>
    3780:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__fp_zero>
    3784:	b1 e0       	ldi	r27, 0x01	; 1
    3786:	08 95       	ret
    3788:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__fp_zero>
    378c:	67 2f       	mov	r22, r23
    378e:	78 2f       	mov	r23, r24
    3790:	88 27       	eor	r24, r24
    3792:	b8 5f       	subi	r27, 0xF8	; 248
    3794:	39 f0       	breq	.+14     	; 0x37a4 <__fixunssfsi+0x4c>
    3796:	b9 3f       	cpi	r27, 0xF9	; 249
    3798:	cc f3       	brlt	.-14     	; 0x378c <__fixunssfsi+0x34>
    379a:	86 95       	lsr	r24
    379c:	77 95       	ror	r23
    379e:	67 95       	ror	r22
    37a0:	b3 95       	inc	r27
    37a2:	d9 f7       	brne	.-10     	; 0x379a <__fixunssfsi+0x42>
    37a4:	3e f4       	brtc	.+14     	; 0x37b4 <__fixunssfsi+0x5c>
    37a6:	90 95       	com	r25
    37a8:	80 95       	com	r24
    37aa:	70 95       	com	r23
    37ac:	61 95       	neg	r22
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	8f 4f       	sbci	r24, 0xFF	; 255
    37b2:	9f 4f       	sbci	r25, 0xFF	; 255
    37b4:	08 95       	ret

000037b6 <__floatunsisf>:
__floatunsisf():
    37b6:	e8 94       	clt
    37b8:	09 c0       	rjmp	.+18     	; 0x37cc <__floatsisf+0x12>

000037ba <__floatsisf>:
    37ba:	97 fb       	bst	r25, 7
    37bc:	3e f4       	brtc	.+14     	; 0x37cc <__floatsisf+0x12>
    37be:	90 95       	com	r25
    37c0:	80 95       	com	r24
    37c2:	70 95       	com	r23
    37c4:	61 95       	neg	r22
    37c6:	7f 4f       	sbci	r23, 0xFF	; 255
    37c8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ca:	9f 4f       	sbci	r25, 0xFF	; 255
    37cc:	99 23       	and	r25, r25
    37ce:	a9 f0       	breq	.+42     	; 0x37fa <__floatsisf+0x40>
    37d0:	f9 2f       	mov	r31, r25
    37d2:	96 e9       	ldi	r25, 0x96	; 150
    37d4:	bb 27       	eor	r27, r27
    37d6:	93 95       	inc	r25
    37d8:	f6 95       	lsr	r31
    37da:	87 95       	ror	r24
    37dc:	77 95       	ror	r23
    37de:	67 95       	ror	r22
    37e0:	b7 95       	ror	r27
    37e2:	f1 11       	cpse	r31, r1
    37e4:	f8 cf       	rjmp	.-16     	; 0x37d6 <__floatsisf+0x1c>
    37e6:	fa f4       	brpl	.+62     	; 0x3826 <__floatsisf+0x6c>
    37e8:	bb 0f       	add	r27, r27
    37ea:	11 f4       	brne	.+4      	; 0x37f0 <__floatsisf+0x36>
    37ec:	60 ff       	sbrs	r22, 0
    37ee:	1b c0       	rjmp	.+54     	; 0x3826 <__floatsisf+0x6c>
    37f0:	6f 5f       	subi	r22, 0xFF	; 255
    37f2:	7f 4f       	sbci	r23, 0xFF	; 255
    37f4:	8f 4f       	sbci	r24, 0xFF	; 255
    37f6:	9f 4f       	sbci	r25, 0xFF	; 255
    37f8:	16 c0       	rjmp	.+44     	; 0x3826 <__floatsisf+0x6c>
    37fa:	88 23       	and	r24, r24
    37fc:	11 f0       	breq	.+4      	; 0x3802 <__floatsisf+0x48>
    37fe:	96 e9       	ldi	r25, 0x96	; 150
    3800:	11 c0       	rjmp	.+34     	; 0x3824 <__floatsisf+0x6a>
    3802:	77 23       	and	r23, r23
    3804:	21 f0       	breq	.+8      	; 0x380e <__floatsisf+0x54>
    3806:	9e e8       	ldi	r25, 0x8E	; 142
    3808:	87 2f       	mov	r24, r23
    380a:	76 2f       	mov	r23, r22
    380c:	05 c0       	rjmp	.+10     	; 0x3818 <__floatsisf+0x5e>
    380e:	66 23       	and	r22, r22
    3810:	71 f0       	breq	.+28     	; 0x382e <__floatsisf+0x74>
    3812:	96 e8       	ldi	r25, 0x86	; 134
    3814:	86 2f       	mov	r24, r22
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	2a f0       	brmi	.+10     	; 0x3826 <__floatsisf+0x6c>
    381c:	9a 95       	dec	r25
    381e:	66 0f       	add	r22, r22
    3820:	77 1f       	adc	r23, r23
    3822:	88 1f       	adc	r24, r24
    3824:	da f7       	brpl	.-10     	; 0x381c <__floatsisf+0x62>
    3826:	88 0f       	add	r24, r24
    3828:	96 95       	lsr	r25
    382a:	87 95       	ror	r24
    382c:	97 f9       	bld	r25, 7
    382e:	08 95       	ret

00003830 <__fp_inf>:
__fp_inf():
    3830:	97 f9       	bld	r25, 7
    3832:	9f 67       	ori	r25, 0x7F	; 127
    3834:	80 e8       	ldi	r24, 0x80	; 128
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	60 e0       	ldi	r22, 0x00	; 0
    383a:	08 95       	ret

0000383c <__fp_nan>:
__fp_nan():
    383c:	9f ef       	ldi	r25, 0xFF	; 255
    383e:	80 ec       	ldi	r24, 0xC0	; 192
    3840:	08 95       	ret

00003842 <__fp_pscA>:
__fp_pscA():
    3842:	00 24       	eor	r0, r0
    3844:	0a 94       	dec	r0
    3846:	16 16       	cp	r1, r22
    3848:	17 06       	cpc	r1, r23
    384a:	18 06       	cpc	r1, r24
    384c:	09 06       	cpc	r0, r25
    384e:	08 95       	ret

00003850 <__fp_pscB>:
__fp_pscB():
    3850:	00 24       	eor	r0, r0
    3852:	0a 94       	dec	r0
    3854:	12 16       	cp	r1, r18
    3856:	13 06       	cpc	r1, r19
    3858:	14 06       	cpc	r1, r20
    385a:	05 06       	cpc	r0, r21
    385c:	08 95       	ret

0000385e <__fp_round>:
__fp_round():
    385e:	09 2e       	mov	r0, r25
    3860:	03 94       	inc	r0
    3862:	00 0c       	add	r0, r0
    3864:	11 f4       	brne	.+4      	; 0x386a <__fp_round+0xc>
    3866:	88 23       	and	r24, r24
    3868:	52 f0       	brmi	.+20     	; 0x387e <__fp_round+0x20>
    386a:	bb 0f       	add	r27, r27
    386c:	40 f4       	brcc	.+16     	; 0x387e <__fp_round+0x20>
    386e:	bf 2b       	or	r27, r31
    3870:	11 f4       	brne	.+4      	; 0x3876 <__fp_round+0x18>
    3872:	60 ff       	sbrs	r22, 0
    3874:	04 c0       	rjmp	.+8      	; 0x387e <__fp_round+0x20>
    3876:	6f 5f       	subi	r22, 0xFF	; 255
    3878:	7f 4f       	sbci	r23, 0xFF	; 255
    387a:	8f 4f       	sbci	r24, 0xFF	; 255
    387c:	9f 4f       	sbci	r25, 0xFF	; 255
    387e:	08 95       	ret

00003880 <__fp_split3>:
__fp_split3():
    3880:	57 fd       	sbrc	r21, 7
    3882:	90 58       	subi	r25, 0x80	; 128
    3884:	44 0f       	add	r20, r20
    3886:	55 1f       	adc	r21, r21
    3888:	59 f0       	breq	.+22     	; 0x38a0 <__fp_splitA+0x10>
    388a:	5f 3f       	cpi	r21, 0xFF	; 255
    388c:	71 f0       	breq	.+28     	; 0x38aa <__fp_splitA+0x1a>
    388e:	47 95       	ror	r20

00003890 <__fp_splitA>:
    3890:	88 0f       	add	r24, r24
    3892:	97 fb       	bst	r25, 7
    3894:	99 1f       	adc	r25, r25
    3896:	61 f0       	breq	.+24     	; 0x38b0 <__fp_splitA+0x20>
    3898:	9f 3f       	cpi	r25, 0xFF	; 255
    389a:	79 f0       	breq	.+30     	; 0x38ba <__fp_splitA+0x2a>
    389c:	87 95       	ror	r24
    389e:	08 95       	ret
    38a0:	12 16       	cp	r1, r18
    38a2:	13 06       	cpc	r1, r19
    38a4:	14 06       	cpc	r1, r20
    38a6:	55 1f       	adc	r21, r21
    38a8:	f2 cf       	rjmp	.-28     	; 0x388e <__fp_split3+0xe>
    38aa:	46 95       	lsr	r20
    38ac:	f1 df       	rcall	.-30     	; 0x3890 <__fp_splitA>
    38ae:	08 c0       	rjmp	.+16     	; 0x38c0 <__fp_splitA+0x30>
    38b0:	16 16       	cp	r1, r22
    38b2:	17 06       	cpc	r1, r23
    38b4:	18 06       	cpc	r1, r24
    38b6:	99 1f       	adc	r25, r25
    38b8:	f1 cf       	rjmp	.-30     	; 0x389c <__fp_splitA+0xc>
    38ba:	86 95       	lsr	r24
    38bc:	71 05       	cpc	r23, r1
    38be:	61 05       	cpc	r22, r1
    38c0:	08 94       	sec
    38c2:	08 95       	ret

000038c4 <__fp_zero>:
__fp_zero():
    38c4:	e8 94       	clt

000038c6 <__fp_szero>:
    38c6:	bb 27       	eor	r27, r27
    38c8:	66 27       	eor	r22, r22
    38ca:	77 27       	eor	r23, r23
    38cc:	cb 01       	movw	r24, r22
    38ce:	97 f9       	bld	r25, 7
    38d0:	08 95       	ret

000038d2 <__mulsf3>:
__mulsf3():
    38d2:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__mulsf3x>
    38d6:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__fp_round>
    38da:	0e 94 21 1c 	call	0x3842	; 0x3842 <__fp_pscA>
    38de:	38 f0       	brcs	.+14     	; 0x38ee <__mulsf3+0x1c>
    38e0:	0e 94 28 1c 	call	0x3850	; 0x3850 <__fp_pscB>
    38e4:	20 f0       	brcs	.+8      	; 0x38ee <__mulsf3+0x1c>
    38e6:	95 23       	and	r25, r21
    38e8:	11 f0       	breq	.+4      	; 0x38ee <__mulsf3+0x1c>
    38ea:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__fp_inf>
    38ee:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_nan>
    38f2:	11 24       	eor	r1, r1
    38f4:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_szero>

000038f8 <__mulsf3x>:
__mulsf3x():
    38f8:	0e 94 40 1c 	call	0x3880	; 0x3880 <__fp_split3>
    38fc:	70 f3       	brcs	.-36     	; 0x38da <__mulsf3+0x8>

000038fe <__mulsf3_pse>:
    38fe:	95 9f       	mul	r25, r21
    3900:	c1 f3       	breq	.-16     	; 0x38f2 <__mulsf3+0x20>
    3902:	95 0f       	add	r25, r21
    3904:	50 e0       	ldi	r21, 0x00	; 0
    3906:	55 1f       	adc	r21, r21
    3908:	62 9f       	mul	r22, r18
    390a:	f0 01       	movw	r30, r0
    390c:	72 9f       	mul	r23, r18
    390e:	bb 27       	eor	r27, r27
    3910:	f0 0d       	add	r31, r0
    3912:	b1 1d       	adc	r27, r1
    3914:	63 9f       	mul	r22, r19
    3916:	aa 27       	eor	r26, r26
    3918:	f0 0d       	add	r31, r0
    391a:	b1 1d       	adc	r27, r1
    391c:	aa 1f       	adc	r26, r26
    391e:	64 9f       	mul	r22, r20
    3920:	66 27       	eor	r22, r22
    3922:	b0 0d       	add	r27, r0
    3924:	a1 1d       	adc	r26, r1
    3926:	66 1f       	adc	r22, r22
    3928:	82 9f       	mul	r24, r18
    392a:	22 27       	eor	r18, r18
    392c:	b0 0d       	add	r27, r0
    392e:	a1 1d       	adc	r26, r1
    3930:	62 1f       	adc	r22, r18
    3932:	73 9f       	mul	r23, r19
    3934:	b0 0d       	add	r27, r0
    3936:	a1 1d       	adc	r26, r1
    3938:	62 1f       	adc	r22, r18
    393a:	83 9f       	mul	r24, r19
    393c:	a0 0d       	add	r26, r0
    393e:	61 1d       	adc	r22, r1
    3940:	22 1f       	adc	r18, r18
    3942:	74 9f       	mul	r23, r20
    3944:	33 27       	eor	r19, r19
    3946:	a0 0d       	add	r26, r0
    3948:	61 1d       	adc	r22, r1
    394a:	23 1f       	adc	r18, r19
    394c:	84 9f       	mul	r24, r20
    394e:	60 0d       	add	r22, r0
    3950:	21 1d       	adc	r18, r1
    3952:	82 2f       	mov	r24, r18
    3954:	76 2f       	mov	r23, r22
    3956:	6a 2f       	mov	r22, r26
    3958:	11 24       	eor	r1, r1
    395a:	9f 57       	subi	r25, 0x7F	; 127
    395c:	50 40       	sbci	r21, 0x00	; 0
    395e:	9a f0       	brmi	.+38     	; 0x3986 <__mulsf3_pse+0x88>
    3960:	f1 f0       	breq	.+60     	; 0x399e <__mulsf3_pse+0xa0>
    3962:	88 23       	and	r24, r24
    3964:	4a f0       	brmi	.+18     	; 0x3978 <__mulsf3_pse+0x7a>
    3966:	ee 0f       	add	r30, r30
    3968:	ff 1f       	adc	r31, r31
    396a:	bb 1f       	adc	r27, r27
    396c:	66 1f       	adc	r22, r22
    396e:	77 1f       	adc	r23, r23
    3970:	88 1f       	adc	r24, r24
    3972:	91 50       	subi	r25, 0x01	; 1
    3974:	50 40       	sbci	r21, 0x00	; 0
    3976:	a9 f7       	brne	.-22     	; 0x3962 <__mulsf3_pse+0x64>
    3978:	9e 3f       	cpi	r25, 0xFE	; 254
    397a:	51 05       	cpc	r21, r1
    397c:	80 f0       	brcs	.+32     	; 0x399e <__mulsf3_pse+0xa0>
    397e:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__fp_inf>
    3982:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__fp_szero>
    3986:	5f 3f       	cpi	r21, 0xFF	; 255
    3988:	e4 f3       	brlt	.-8      	; 0x3982 <__mulsf3_pse+0x84>
    398a:	98 3e       	cpi	r25, 0xE8	; 232
    398c:	d4 f3       	brlt	.-12     	; 0x3982 <__mulsf3_pse+0x84>
    398e:	86 95       	lsr	r24
    3990:	77 95       	ror	r23
    3992:	67 95       	ror	r22
    3994:	b7 95       	ror	r27
    3996:	f7 95       	ror	r31
    3998:	e7 95       	ror	r30
    399a:	9f 5f       	subi	r25, 0xFF	; 255
    399c:	c1 f7       	brne	.-16     	; 0x398e <__mulsf3_pse+0x90>
    399e:	fe 2b       	or	r31, r30
    39a0:	88 0f       	add	r24, r24
    39a2:	91 1d       	adc	r25, r1
    39a4:	96 95       	lsr	r25
    39a6:	87 95       	ror	r24
    39a8:	97 f9       	bld	r25, 7
    39aa:	08 95       	ret

000039ac <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    39ac:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    39ae:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    39b0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    39b2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    39b4:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    39b6:	0d c0       	rjmp	.+26     	; 0x39d2 <__udivmodsi4_ep>

000039b8 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    39b8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    39ba:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    39bc:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    39be:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    39c0:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    39c2:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    39c4:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    39c6:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    39c8:	20 f0       	brcs	.+8      	; 0x39d2 <__udivmodsi4_ep>
__udivmodsi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    39ca:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    39cc:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    39ce:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    39d0:	f5 0b       	sbc	r31, r21

000039d2 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    39d2:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    39d4:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    39d6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    39d8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    39da:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    39dc:	69 f7       	brne	.-38     	; 0x39b8 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    39de:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    39e0:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    39e2:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    39e4:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    39e6:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    39e8:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    39ea:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    39ec:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    39ee:	08 95       	ret

000039f0 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    39f0:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    39f2:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    39f4:	1e f4       	brtc	.+6      	; 0x39fc <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    39f6:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    39f8:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    39fc:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    39fe:	07 d0       	rcall	.+14     	; 0x3a0e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3a00:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3a04:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3a06:	03 d0       	rcall	.+6      	; 0x3a0e <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3a08:	4e f4       	brtc	.+18     	; 0x3a1c <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3a0a:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__negsi2>

00003a0e <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3a0e:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3a10:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3a12:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3a14:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3a16:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3a18:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3a1a:	5f 4f       	sbci	r21, 0xFF	; 255

00003a1c <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3a1c:	08 95       	ret

00003a1e <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3a1e:	90 95       	com	r25
    3a20:	80 95       	com	r24
    3a22:	70 95       	com	r23
    3a24:	61 95       	neg	r22
    3a26:	7f 4f       	sbci	r23, 0xFF	; 255
    3a28:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3a2c:	08 95       	ret

00003a2e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3a2e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3a30:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2300
    3a32:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2301
    3a34:	8b bf       	out	0x3b, r24	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3a36:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3a38:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3a3a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3a3c:	19 94       	eijmp

00003a3e <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3a3e:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3a42:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3a44:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3a46:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3a48:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3a4a:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3a4c:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3a4e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3a50:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3a52:	08 95       	ret

00003a54 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3a54:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3a56:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3a58:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3a5a:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3a5c:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3a5e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3a60:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3a62:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3a64:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3a66:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3a68:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3a6a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3a6c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3a6e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3a70:	08 95       	ret

00003a72 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3a72:	f8 94       	cli

00003a74 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr6/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3a74:	ff cf       	rjmp	.-2      	; 0x3a74 <__stop_program>
